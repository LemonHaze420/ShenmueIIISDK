
#include "../SDK.h"

// Name: Shenmue3SDK, Version: 1.4.1

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
// Functions
//---------------------------------------------------------------------------

// Function Shenmue3.TalkEventTaskBase.Update
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTalkEventTaskBase::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventTaskBase.Update");

	UTalkEventTaskBase_Update_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.TalkEventTaskBase.IsStopForceDebugSkip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3TalkEventManagerBase* mng                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTalkEventTaskBase::IsStopForceDebugSkip(class AS3TalkEventManagerBase* mng)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventTaskBase.IsStopForceDebugSkip");

	UTalkEventTaskBase_IsStopForceDebugSkip_Params params;
	params.mng = mng;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.TalkEventTaskBase.GetLogMessage
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UTalkEventTaskBase::GetLogMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventTaskBase.GetLogMessage");

	UTalkEventTaskBase_GetLogMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.TalkEventTaskBase.GetCommandName
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UTalkEventTaskBase::GetCommandName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventTaskBase.GetCommandName");

	UTalkEventTaskBase_GetCommandName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.TalkEventTaskBase.Finish
// (Native, Public, BlueprintCallable)

void UTalkEventTaskBase::Finish()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventTaskBase.Finish");

	UTalkEventTaskBase_Finish_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkEventTaskBase.FinalizeTask
// (Final, Native, Public, BlueprintCallable)

void UTalkEventTaskBase::FinalizeTask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventTaskBase.FinalizeTask");

	UTalkEventTaskBase_FinalizeTask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BattleTask.SetWinLabelIndex
// (Final, Native, Public, BlueprintCallable)

void UBattleTask::SetWinLabelIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BattleTask.SetWinLabelIndex");

	UBattleTask_SetWinLabelIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BattleTask.SetLoseLabelIndex
// (Final, Native, Public, BlueprintCallable)

void UBattleTask::SetLoseLabelIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BattleTask.SetLoseLabelIndex");

	UBattleTask_SetLoseLabelIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BetTask.NextSelectEnoughMoney
// (Final, Native, Public, BlueprintCallable)

void UBetTask::NextSelectEnoughMoney()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BetTask.NextSelectEnoughMoney");

	UBetTask_NextSelectEnoughMoney_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BetTask.NextSelectCancel
// (Final, Native, Public, BlueprintCallable)

void UBetTask::NextSelectCancel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BetTask.NextSelectCancel");

	UBetTask_NextSelectCancel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BetTask.NextSelectBet
// (Final, Native, Public, BlueprintCallable)

void UBetTask::NextSelectBet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BetTask.NextSelectBet");

	UBetTask_NextSelectBet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BuyKihudaTask.SetNextCancelLabel
// (Final, Native, Public, BlueprintCallable)

void UBuyKihudaTask::SetNextCancelLabel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BuyKihudaTask.SetNextCancelLabel");

	UBuyKihudaTask_SetNextCancelLabel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.BuyKihudaTask.SetNextBuyLabel
// (Final, Native, Public, BlueprintCallable)

void UBuyKihudaTask::SetNextBuyLabel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.BuyKihudaTask.SetNextBuyLabel");

	UBuyKihudaTask_SetNextBuyLabel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.CallScriptTask.GetScriptName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UCallScriptTask::GetScriptName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.CallScriptTask.GetScriptName");

	UCallScriptTask_GetScriptName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.ChooseMiniGameTask.NextSelectChoose
// (Final, Native, Public, BlueprintCallable)

void UChooseMiniGameTask::NextSelectChoose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ChooseMiniGameTask.NextSelectChoose");

	UChooseMiniGameTask_NextSelectChoose_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.ChooseMiniGameTask.NextSelectCancel
// (Final, Native, Public, BlueprintCallable)

void UChooseMiniGameTask::NextSelectCancel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ChooseMiniGameTask.NextSelectCancel");

	UChooseMiniGameTask_NextSelectCancel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.EventMiniGameTask.SetNextLabelIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NextIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void UEventMiniGameTask::SetNextLabelIndex(int NextIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.EventMiniGameTask.SetNextLabelIndex");

	UEventMiniGameTask_SetNextLabelIndex_Params params;
	params.NextIndex = NextIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.EventMiniGameTask.IsSetupLabelIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            CheckIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UEventMiniGameTask::IsSetupLabelIndex(int CheckIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.EventMiniGameTask.IsSetupLabelIndex");

	UEventMiniGameTask_IsSetupLabelIndex_Params params;
	params.CheckIndex = CheckIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.Replace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            leftInd                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            rightInd                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewNum                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UExpressionFunctionLibrary::STATIC_Replace(const struct FString& InStr, int leftInd, int rightInd, int NewNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.Replace");

	UExpressionFunctionLibrary_Replace_Params params;
	params.InStr = InStr;
	params.leftInd = leftInd;
	params.rightInd = rightInd;
	params.NewNum = NewNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.GetExpressionFromOperator
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            operatorInd                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            lNum                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            rNum                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            lInd                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            rInd                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_GetExpressionFromOperator(const struct FString& InStr, int operatorInd, int* lNum, int* rNum, int* lInd, int* rInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.GetExpressionFromOperator");

	UExpressionFunctionLibrary_GetExpressionFromOperator_Params params;
	params.InStr = InStr;
	params.operatorInd = operatorInd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lNum != nullptr)
		*lNum = params.lNum;
	if (rNum != nullptr)
		*rNum = params.rNum;
	if (lInd != nullptr)
		*lInd = params.lInd;
	if (rInd != nullptr)
		*rInd = params.rInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.GetExpressionFromComparison
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            operatorInd                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EComparisonKind>   comparisonKind                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            lNum                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            rNum                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            lInd                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            rInd                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 lStr                           (Parm, OutParm, ZeroConstructor)
// struct FString                 rStr                           (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_GetExpressionFromComparison(const struct FString& InStr, int operatorInd, TEnumAsByte<EComparisonKind> comparisonKind, int* lNum, int* rNum, int* lInd, int* rInd, struct FString* lStr, struct FString* rStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.GetExpressionFromComparison");

	UExpressionFunctionLibrary_GetExpressionFromComparison_Params params;
	params.InStr = InStr;
	params.operatorInd = operatorInd;
	params.comparisonKind = comparisonKind;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lNum != nullptr)
		*lNum = params.lNum;
	if (rNum != nullptr)
		*rNum = params.rNum;
	if (lInd != nullptr)
		*lInd = params.lInd;
	if (rInd != nullptr)
		*rInd = params.rInd;
	if (lStr != nullptr)
		*lStr = params.lStr;
	if (rStr != nullptr)
		*rStr = params.rStr;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindSub
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            findInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindSub(const struct FString& InStr, int* findInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindSub");

	UExpressionFunctionLibrary_FindSub_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findInd != nullptr)
		*findInd = params.findInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindParenBlock
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            leftInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            rightInd                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 retStr                         (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindParenBlock(const struct FString& InStr, int* leftInd, int* rightInd, struct FString* retStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindParenBlock");

	UExpressionFunctionLibrary_FindParenBlock_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (leftInd != nullptr)
		*leftInd = params.leftInd;
	if (rightInd != nullptr)
		*rightInd = params.rightInd;
	if (retStr != nullptr)
		*retStr = params.retStr;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindMul
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            findInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindMul(const struct FString& InStr, int* findInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindMul");

	UExpressionFunctionLibrary_FindMul_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findInd != nullptr)
		*findInd = params.findInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindMod
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            findInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindMod(const struct FString& InStr, int* findInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindMod");

	UExpressionFunctionLibrary_FindMod_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findInd != nullptr)
		*findInd = params.findInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindFirstOperator
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// TEnumAsByte<ESearchDir>        SearchDir                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 findOperator                   (Parm, OutParm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UExpressionFunctionLibrary::STATIC_FindFirstOperator(const struct FString& InStr, TEnumAsByte<ESearchDir> SearchDir, struct FString* findOperator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindFirstOperator");

	UExpressionFunctionLibrary_FindFirstOperator_Params params;
	params.InStr = InStr;
	params.SearchDir = SearchDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findOperator != nullptr)
		*findOperator = params.findOperator;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindDiv
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            findInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindDiv(const struct FString& InStr, int* findInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindDiv");

	UExpressionFunctionLibrary_FindDiv_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findInd != nullptr)
		*findInd = params.findInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindComparison
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            findInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EComparisonKind>   comparisonKind                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindComparison(const struct FString& InStr, TEnumAsByte<EComparisonKind> comparisonKind, int* findInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindComparison");

	UExpressionFunctionLibrary_FindComparison_Params params;
	params.InStr = InStr;
	params.comparisonKind = comparisonKind;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findInd != nullptr)
		*findInd = params.findInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.FindAdd
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// int                            findInd                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UExpressionFunctionLibrary::STATIC_FindAdd(const struct FString& InStr, int* findInd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.FindAdd");

	UExpressionFunctionLibrary_FindAdd_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (findInd != nullptr)
		*findInd = params.findInd;

	return params.ReturnValue;
}


// Function Shenmue3.ExpressionFunctionLibrary.EvaluateAllFlags
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 InStr                          (Parm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UExpressionFunctionLibrary::STATIC_EvaluateAllFlags(const struct FString& InStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ExpressionFunctionLibrary.EvaluateAllFlags");

	UExpressionFunctionLibrary_EvaluateAllFlags_Params params;
	params.InStr = InStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.GachaFunctionLibrary.SetGachaDataTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*              GachaItemTable                 (Parm, ZeroConstructor, IsPlainOldData)

void UGachaFunctionLibrary::STATIC_SetGachaDataTable(class UDataTable* GachaItemTable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.GachaFunctionLibrary.SetGachaDataTable");

	UGachaFunctionLibrary_SetGachaDataTable_Params params;
	params.GachaItemTable = GachaItemTable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.GachaFunctionLibrary.PlayGacha
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   GachaId                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3GachaItem            Out                            (Parm, OutParm)
// bool                           IsRare                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGachaFunctionLibrary::STATIC_PlayGacha(const struct FName& GachaId, struct FS3GachaItem* Out, bool* IsRare)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.GachaFunctionLibrary.PlayGacha");

	UGachaFunctionLibrary_PlayGacha_Params params;
	params.GachaId = GachaId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Out != nullptr)
		*Out = params.Out;
	if (IsRare != nullptr)
		*IsRare = params.IsRare;

	return params.ReturnValue;
}


// Function Shenmue3.GachaFunctionLibrary.LoadGachaDataTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 GachaItemTableName             (Parm, ZeroConstructor)

void UGachaFunctionLibrary::STATIC_LoadGachaDataTable(const struct FString& GachaItemTableName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.GachaFunctionLibrary.LoadGachaDataTable");

	UGachaFunctionLibrary_LoadGachaDataTable_Params params;
	params.GachaItemTableName = GachaItemTableName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.GachaFunctionLibrary.IsLoadGachaDataTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGachaFunctionLibrary::STATIC_IsLoadGachaDataTable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.GachaFunctionLibrary.IsLoadGachaDataTable");

	UGachaFunctionLibrary_IsLoadGachaDataTable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.KsSelectTask.SetSelectKeywordIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            new_index                      (Parm, ZeroConstructor, IsPlainOldData)

void UKsSelectTask::SetSelectKeywordIndex(int new_index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.KsSelectTask.SetSelectKeywordIndex");

	UKsSelectTask_SetSelectKeywordIndex_Params params;
	params.new_index = new_index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkScript.Init
// (Final, Native, Public, BlueprintCallable)

void UTalkScript::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkScript.Init");

	UTalkScript_Init_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.MG_ODDataTable.MG_ODOutputTextFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Filename                       (Parm, ZeroConstructor)
// struct FString                 outputFolderName               (Parm, ZeroConstructor)
// struct FString                 outStr                         (Parm, ZeroConstructor)

void UMG_ODDataTable::STATIC_MG_ODOutputTextFile(const struct FString& Filename, const struct FString& outputFolderName, const struct FString& outStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MG_ODDataTable.MG_ODOutputTextFile");

	UMG_ODDataTable_MG_ODOutputTextFile_Params params;
	params.Filename = Filename;
	params.outputFolderName = outputFolderName;
	params.outStr = outStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.MG_ODDataTable.GetODDataTableRowFromName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UScriptStruct*           _struct                        (Parm, ZeroConstructor, IsPlainOldData)
// class UDataTable*              _table                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   _row_name                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMG_ODDataTable::STATIC_GetODDataTableRowFromName(class UScriptStruct* _struct, class UDataTable* _table, const struct FName& _row_name, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MG_ODDataTable.GetODDataTableRowFromName");

	UMG_ODDataTable_GetODDataTableRowFromName_Params params;
	params._struct = _struct;
	params._table = _table;
	params._row_name = _row_name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Shenmue3.MG_WMData.IsEnableMole
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            RoundNum                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            AppearCount                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FMG_WMDataStruct        ReturnData                     (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMG_WMData::IsEnableMole(int RoundNum, float CurrentTime, int AppearCount, struct FMG_WMDataStruct* ReturnData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MG_WMData.IsEnableMole");

	UMG_WMData_IsEnableMole_Params params;
	params.RoundNum = RoundNum;
	params.CurrentTime = CurrentTime;
	params.AppearCount = AppearCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ReturnData != nullptr)
		*ReturnData = params.ReturnData;

	return params.ReturnValue;
}


// Function Shenmue3.MG_WMData.GetToatalRoundNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMG_WMData::GetToatalRoundNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MG_WMData.GetToatalRoundNum");

	UMG_WMData_GetToatalRoundNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.MG_WMData.GetRoundMaxTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            RoundNum                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMG_WMData::GetRoundMaxTime(int RoundNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MG_WMData.GetRoundMaxTime");

	UMG_WMData_GetRoundMaxTime_Params params;
	params.RoundNum = RoundNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.MG_WMData.GetMoleNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            RoundNum                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMG_WMData::GetMoleNum(int RoundNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MG_WMData.GetMoleNum");

	UMG_WMData_GetMoleNum_Params params;
	params.RoundNum = RoundNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.MGForkliftRCFunctionLibrary.SetVehicleWheelOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWheeledVehicleMovementComponent* wheel_vehicle_movement_component (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<struct FVector>         Offset                         (Parm, ZeroConstructor)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)

void UMGForkliftRCFunctionLibrary::STATIC_SetVehicleWheelOffset(class UWheeledVehicleMovementComponent* wheel_vehicle_movement_component, TArray<struct FVector> Offset, int Size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MGForkliftRCFunctionLibrary.SetVehicleWheelOffset");

	UMGForkliftRCFunctionLibrary_SetVehicleWheelOffset_Params params;
	params.wheel_vehicle_movement_component = wheel_vehicle_movement_component;
	params.Offset = Offset;
	params.Size = Size;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.MGForkliftRCFunctionLibrary.GetRowByNameCowDataTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   pName                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FMGForkliftRCCowTableRowBase ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMGForkliftRCCowTableRowBase UMGForkliftRCFunctionLibrary::STATIC_GetRowByNameCowDataTable(class UDataTable* DataTable, const struct FName& pName, bool* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.MGForkliftRCFunctionLibrary.GetRowByNameCowDataTable");

	UMGForkliftRCFunctionLibrary_GetRowByNameCowDataTable_Params params;
	params.DataTable = DataTable;
	params.pName = pName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Shenmue3.ResultMiniGameTask.NextSelectWin
// (Final, Native, Public, BlueprintCallable)

void UResultMiniGameTask::NextSelectWin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ResultMiniGameTask.NextSelectWin");

	UResultMiniGameTask_NextSelectWin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.ResultMiniGameTask.NextSelectLose
// (Final, Native, Public, BlueprintCallable)

void UResultMiniGameTask::NextSelectLose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ResultMiniGameTask.NextSelectLose");

	UResultMiniGameTask_NextSelectLose_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.ResultMiniGameTask.NextSelectDraw
// (Final, Native, Public, BlueprintCallable)

void UResultMiniGameTask::NextSelectDraw()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ResultMiniGameTask.NextSelectDraw");

	UResultMiniGameTask_NextSelectDraw_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.ResumeMiniGameTask.SetLoopLabelIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            LoopIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void UResumeMiniGameTask::SetLoopLabelIndex(int LoopIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ResumeMiniGameTask.SetLoopLabelIndex");

	UResumeMiniGameTask_SetLoopLabelIndex_Params params;
	params.LoopIndex = LoopIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3_BRallyAwardSystem.UnlockAward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   AwardId                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAnnounce                      (Parm, ZeroConstructor, IsPlainOldData)

void US3_BRallyAwardSystem::UnlockAward(const struct FName& AwardId, bool bAnnounce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.UnlockAward");

	US3_BRallyAwardSystem_UnlockAward_Params params;
	params.AwardId = AwardId;
	params.bAnnounce = bAnnounce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3_BRallyAwardSystem.SetAwardCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   AwardId                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpOnly                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAnnounce                      (Parm, ZeroConstructor, IsPlainOldData)

void US3_BRallyAwardSystem::SetAwardCount(const struct FName& AwardId, int Count, bool bUpOnly, bool bAnnounce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.SetAwardCount");

	US3_BRallyAwardSystem_SetAwardCount_Params params;
	params.AwardId = AwardId;
	params.Count = Count;
	params.bUpOnly = bUpOnly;
	params.bAnnounce = bAnnounce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3_BRallyAwardSystem.LockAward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   AwardId                        (Parm, ZeroConstructor, IsPlainOldData)

void US3_BRallyAwardSystem::LockAward(const struct FName& AwardId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.LockAward");

	US3_BRallyAwardSystem_LockAward_Params params;
	params.AwardId = AwardId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3_BRallyAwardSystem.ListUpAwardStatuses
// (Final, Native, Public, HasOutParms, BlueprintCallable, Const)
// Parameters:
// TArray<struct FS3BRallyAwardStatus> StatusList                     (Parm, OutParm, ZeroConstructor)

void US3_BRallyAwardSystem::ListUpAwardStatuses(TArray<struct FS3BRallyAwardStatus>* StatusList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.ListUpAwardStatuses");

	US3_BRallyAwardSystem_ListUpAwardStatuses_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatusList != nullptr)
		*StatusList = params.StatusList;
}


// Function Shenmue3.S3_BRallyAwardSystem.IsEarned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Award                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckAnnounced                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3_BRallyAwardSystem::IsEarned(const struct FName& Award, bool bCheckAnnounced)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.IsEarned");

	US3_BRallyAwardSystem_IsEarned_Params params;
	params.Award = Award;
	params.bCheckAnnounced = bCheckAnnounced;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3_BRallyAwardSystem.HasAnnouncement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3_BRallyAwardSystem::HasAnnouncement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.HasAnnouncement");

	US3_BRallyAwardSystem_HasAnnouncement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3_BRallyAwardSystem.GetEarnedItems
// (Final, Native, Public, HasOutParms, BlueprintCallable, Const)
// Parameters:
// TArray<int>                    Items                          (Parm, OutParm, ZeroConstructor)

void US3_BRallyAwardSystem::GetEarnedItems(TArray<int>* Items)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.GetEarnedItems");

	US3_BRallyAwardSystem_GetEarnedItems_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Items != nullptr)
		*Items = params.Items;
}


// Function Shenmue3.S3_BRallyAwardSystem.GetAwardCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   AwardId                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3_BRallyAwardSystem::GetAwardCount(const struct FName& AwardId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.GetAwardCount");

	US3_BRallyAwardSystem_GetAwardCount_Params params;
	params.AwardId = AwardId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3_BRallyAwardSystem.GetAnnouncements
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FName>           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<struct FName> US3_BRallyAwardSystem::GetAnnouncements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.GetAnnouncements");

	US3_BRallyAwardSystem_GetAnnouncements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3_BRallyAwardSystem.GetAnnouncementQueue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FS3BRallyAwardAnnouncement> ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<struct FS3BRallyAwardAnnouncement> US3_BRallyAwardSystem::GetAnnouncementQueue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.GetAnnouncementQueue");

	US3_BRallyAwardSystem_GetAnnouncementQueue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3_BRallyAwardSystem.ClearAnnouncement
// (Final, Native, Public, BlueprintCallable)

void US3_BRallyAwardSystem::ClearAnnouncement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_BRallyAwardSystem.ClearAnnouncement");

	US3_BRallyAwardSystem_ClearAnnouncement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3_ExclamationComponent.SearchSpecificCue
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// struct FString                 CueName                        (Parm, ZeroConstructor)
// class USoundAtomCue*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundAtomCue* US3_ExclamationComponent::SearchSpecificCue(const struct FString& CueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_ExclamationComponent.SearchSpecificCue");

	US3_ExclamationComponent_SearchSpecificCue_Params params;
	params.CueName = CueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3_ExclamationComponent.ListCuesByType
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 Type                           (Parm, ZeroConstructor)
// TArray<class USoundAtomCue*>   Cues                           (Parm, OutParm, ZeroConstructor)

void US3_ExclamationComponent::ListCuesByType(const struct FString& Type, TArray<class USoundAtomCue*>* Cues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_ExclamationComponent.ListCuesByType");

	US3_ExclamationComponent_ListCuesByType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Cues != nullptr)
		*Cues = params.Cues;
}


// Function Shenmue3.S3_ExclamationComponent.InitializeCueSheet
// (Final, Native, Public, BlueprintCallable)

void US3_ExclamationComponent::InitializeCueSheet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3_ExclamationComponent.InitializeCueSheet");

	US3_ExclamationComponent_InitializeCueSheet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.UpdateMainFlowWork
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Param                          (Parm, ZeroConstructor)

void US3GameInstance::UpdateMainFlowWork(const struct FName& ID, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.UpdateMainFlowWork");

	US3GameInstance_UpdateMainFlowWork_Params params;
	params.ID = ID;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.UpdateCulture
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::UpdateCulture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.UpdateCulture");

	US3GameInstance_UpdateCulture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.UpdateClothParts
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TMap<EClothPartsType, struct FName> PartsInfo                      (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::UpdateClothParts(bool bRyo, TMap<EClothPartsType, struct FName>* PartsInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.UpdateClothParts");

	US3GameInstance_UpdateClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartsInfo != nullptr)
		*PartsInfo = params.PartsInfo;
}


// Function Shenmue3.S3GameInstance.UpdateACPlayDateTime
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDateTime               NewDateTime                    (Parm)

void US3GameInstance::UpdateACPlayDateTime(const struct FName& ID, const struct FDateTime& NewDateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.UpdateACPlayDateTime");

	US3GameInstance_UpdateACPlayDateTime_Params params;
	params.ID = ID;
	params.NewDateTime = NewDateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.UnlockClothParts
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::UnlockClothParts(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.UnlockClothParts");

	US3GameInstance_UnlockClothParts_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.StartCheckRetryFlag
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::StartCheckRetryFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.StartCheckRetryFlag");

	US3GameInstance_StartCheckRetryFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetYesterdayPlayerState
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Player                         (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetYesterdayPlayerState(class AActor* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetYesterdayPlayerState");

	US3GameInstance_SetYesterdayPlayerState_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetWindowParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3WindowType                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 InResolution                   (Parm, ZeroConstructor)

void US3GameInstance::SetWindowParam(ES3WindowType Type, const struct FString& InResolution)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetWindowParam");

	US3GameInstance_SetWindowParam_Params params;
	params.Type = Type;
	params.InResolution = InResolution;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetVSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetVSync(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetVSync");

	US3GameInstance_SetVSync_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetVoiceVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetVoiceVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetVoiceVolume");

	US3GameInstance_SetVoiceVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetVoiceLanguage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3VoiceLanguage               InVoiceLanguage                (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetVoiceLanguage(ES3VoiceLanguage InVoiceLanguage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetVoiceLanguage");

	US3GameInstance_SetVoiceLanguage_Params params;
	params.InVoiceLanguage = InVoiceLanguage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetUnleadMemoIds
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    Ids                            (Parm, OutParm, ZeroConstructor)

void US3GameInstance::SetUnleadMemoIds(TArray<int>* Ids)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetUnleadMemoIds");

	US3GameInstance_SetUnleadMemoIds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Ids != nullptr)
		*Ids = params.Ids;
}


// Function Shenmue3.S3GameInstance.SetTabFlagUnread
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<bool>                   TabUnreadArray                 (Parm, ZeroConstructor)

void US3GameInstance::SetTabFlagUnread(TArray<bool> TabUnreadArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetTabFlagUnread");

	US3GameInstance_SetTabFlagUnread_Params params;
	params.TabUnreadArray = TabUnreadArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetSystemFlag
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            array_index                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            flag                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetSystemFlag(int array_index, int flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetSystemFlag");

	US3GameInstance_SetSystemFlag_Params params;
	params.array_index = array_index;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetSEVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetSEVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetSEVolume");

	US3GameInstance_SetSEVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetRedemptionPoint
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewPoint                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetRedemptionPoint(int NewPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetRedemptionPoint");

	US3GameInstance_SetRedemptionPoint_Params params;
	params.NewPoint = NewPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetReadHelp
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetReadHelp(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetReadHelp");

	US3GameInstance_SetReadHelp_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetProgressIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::SetProgressIndex(const struct FString& Key, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetProgressIndex");

	US3GameInstance_SetProgressIndex_Params params;
	params.Key = Key;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.SetPlayerBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3PlayerBehavior              InPlayerBehavior               (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetPlayerBehavior(ES3PlayerBehavior InPlayerBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetPlayerBehavior");

	US3GameInstance_SetPlayerBehavior_Params params;
	params.InPlayerBehavior = InPlayerBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoTabIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            memoTabNum                     (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoTabIndex(int memoTabNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoTabIndex");

	US3GameInstance_SetMemoTabIndex_Params params;
	params.memoTabNum = memoTabNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoSubEventUnderlineList
// (Native, Public, BlueprintCallable)
// Parameters:
// TArray<int>                    SubEventUbderlineList          (Parm, ZeroConstructor)

void US3GameInstance::SetMemoSubEventUnderlineList(TArray<int> SubEventUbderlineList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoSubEventUnderlineList");

	US3GameInstance_SetMemoSubEventUnderlineList_Params params;
	params.SubEventUbderlineList = SubEventUbderlineList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoMapMask
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsVisible                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoMapMask(int Index, bool IsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoMapMask");

	US3GameInstance_SetMemoMapMask_Params params;
	params.Index = Index;
	params.IsVisible = IsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoLatestMotivationIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoLatestMotivationIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoLatestMotivationIndex");

	US3GameInstance_SetMemoLatestMotivationIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoLatestIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoLatestIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoLatestIndex");

	US3GameInstance_SetMemoLatestIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoFlagAndAlready
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Already                        (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoFlagAndAlready(int MemoId, bool flag, bool Already)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoFlagAndAlready");

	US3GameInstance_SetMemoFlagAndAlready_Params params;
	params.MemoId = MemoId;
	params.flag = flag;
	params.Already = Already;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoFlag
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoFlag(int MemoId, bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoFlag");

	US3GameInstance_SetMemoFlag_Params params;
	params.MemoId = MemoId;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoDataUnderline
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoNo                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsUnderline                    (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoDataUnderline(int MemoNo, bool IsUnderline)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoDataUnderline");

	US3GameInstance_SetMemoDataUnderline_Params params;
	params.MemoNo = MemoNo;
	params.IsUnderline = IsUnderline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoDataPage
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoNo                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            page                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoDataPage(int MemoNo, int page)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoDataPage");

	US3GameInstance_SetMemoDataPage_Params params;
	params.MemoNo = MemoNo;
	params.page = page;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoDataIdentifer
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoNo                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            identifer                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoDataIdentifer(int MemoNo, int identifer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoDataIdentifer");

	US3GameInstance_SetMemoDataIdentifer_Params params;
	params.MemoNo = MemoNo;
	params.identifer = identifer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetMemoAlready
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetMemoAlready(int MemoId, bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetMemoAlready");

	US3GameInstance_SetMemoAlready_Params params;
	params.MemoId = MemoId;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetLocale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3Locale                      InLocale                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetLocale(ES3Locale InLocale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetLocale");

	US3GameInstance_SetLocale_Params params;
	params.InLocale = InLocale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetLoadMemoDataIdentifer
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoNo                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            identifer                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetLoadMemoDataIdentifer(int MemoNo, int identifer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetLoadMemoDataIdentifer");

	US3GameInstance_SetLoadMemoDataIdentifer_Params params;
	params.MemoNo = MemoNo;
	params.identifer = identifer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetKeyConfigValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3KeyConfigType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetKeyConfigValue(ES3KeyConfigType Type, unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetKeyConfigValue");

	US3GameInstance_SetKeyConfigValue_Params params;
	params.Type = Type;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetItemNum
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ItemId                         (Parm, ZeroConstructor)
// int                            Num                            (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetItemNum(const struct FString& ItemId, int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetItemNum");

	US3GameInstance_SetItemNum_Params params;
	params.ItemId = ItemId;
	params.Num = Num;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetItemCheckFlag
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetItemCheckFlag(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetItemCheckFlag");

	US3GameInstance_SetItemCheckFlag_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetIsJumpYesterdayPrace
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsJump                         (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetIsJumpYesterdayPrace(bool IsJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetIsJumpYesterdayPrace");

	US3GameInstance_SetIsJumpYesterdayPrace_Params params;
	params.IsJump = IsJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetIsFirstContactState
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// bool                           newParam                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetIsFirstContactState(const struct FString& NPCID, bool newParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetIsFirstContactState");

	US3GameInstance_SetIsFirstContactState_Params params;
	params.NPCID = NPCID;
	params.newParam = newParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetInstalledRewards
// (Native, Public, BlueprintCallable)
// Parameters:
// TArray<ES3RewardType>          Rewards                        (Parm, ZeroConstructor)

void US3GameInstance::SetInstalledRewards(TArray<ES3RewardType> Rewards)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetInstalledRewards");

	US3GameInstance_SetInstalledRewards_Params params;
	params.Rewards = Rewards;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetHaveMoney_NoDispatcher
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetHaveMoney_NoDispatcher(int NewMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetHaveMoney_NoDispatcher");

	US3GameInstance_SetHaveMoney_NoDispatcher_Params params;
	params.NewMoney = NewMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetHaveMoney
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetHaveMoney(int NewMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetHaveMoney");

	US3GameInstance_SetHaveMoney_Params params;
	params.NewMoney = NewMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetGraphicQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3GraphicPreset               InQuality                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetGraphicQuality(ES3GraphicPreset InQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetGraphicQuality");

	US3GameInstance_SetGraphicQuality_Params params;
	params.InQuality = InQuality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetFishingInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 StoreId                        (Parm, ZeroConstructor)
// struct FString                 RodId                          (Parm, ZeroConstructor)

void US3GameInstance::SetFishingInfo(const struct FString& StoreId, const struct FString& RodId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetFishingInfo");

	US3GameInstance_SetFishingInfo_Params params;
	params.StoreId = StoreId;
	params.RodId = RodId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetEventStep
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetEventStep(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetEventStep");

	US3GameInstance_SetEventStep_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetEventFlag
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            flag                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetEventFlag(int Index, int flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetEventFlag");

	US3GameInstance_SetEventFlag_Params params;
	params.Index = Index;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetEnableVibration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetEnableVibration(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetEnableVibration");

	US3GameInstance_SetEnableVibration_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetDisplayGamma
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetDisplayGamma(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetDisplayGamma");

	US3GameInstance_SetDisplayGamma_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetDebugEventStep
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetDebugEventStep(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetDebugEventStep");

	US3GameInstance_SetDebugEventStep_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetBootFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           InBootFlag                     (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetBootFlag(bool InBootFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetBootFlag");

	US3GameInstance_SetBootFlag_Params params;
	params.InBootFlag = InBootFlag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetBGMVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetBGMVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetBGMVolume");

	US3GameInstance_SetBGMVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetBetMoney_NoDispatcher
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetBetMoney_NoDispatcher(int NewMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetBetMoney_NoDispatcher");

	US3GameInstance_SetBetMoney_NoDispatcher_Params params;
	params.NewMoney = NewMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetBetMoney
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            NewMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetBetMoney(int NewMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetBetMoney");

	US3GameInstance_SetBetMoney_Params params;
	params.NewMoney = NewMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetBattleRallyInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FS3BattleRallySaveData  Info                           (Parm)

void US3GameInstance::SetBattleRallyInfo(const struct FS3BattleRallySaveData& Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetBattleRallyInfo");

	US3GameInstance_SetBattleRallyInfo_Params params;
	params.Info = Info;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.SetAcquisitionMap
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TMap<struct FName, unsigned char> InMap                          (Parm, OutParm, ZeroConstructor)
// TMap<struct FName, unsigned char> InAchieveMap                   (Parm, OutParm, ZeroConstructor)

void US3GameInstance::SetAcquisitionMap(TMap<struct FName, unsigned char>* InMap, TMap<struct FName, unsigned char>* InAchieveMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetAcquisitionMap");

	US3GameInstance_SetAcquisitionMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InMap != nullptr)
		*InMap = params.InMap;
	if (InAchieveMap != nullptr)
		*InAchieveMap = params.InAchieveMap;
}


// Function Shenmue3.S3GameInstance.SetAcquisition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   UniqueName                     (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::SetAcquisition(const struct FName& UniqueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.SetAcquisition");

	US3GameInstance_SetAcquisition_Params params;
	params.UniqueName = UniqueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.ResetRetryFlag
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::ResetRetryFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.ResetRetryFlag");

	US3GameInstance_ResetRetryFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.RemovePlayerBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3PlayerBehavior              InPlayerBehavior               (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::RemovePlayerBehavior(ES3PlayerBehavior InPlayerBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.RemovePlayerBehavior");

	US3GameInstance_RemovePlayerBehavior_Params params;
	params.InPlayerBehavior = InPlayerBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.RemoveMemoSubEventOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::RemoveMemoSubEventOrder(int MemoId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.RemoveMemoSubEventOrder");

	US3GameInstance_RemoveMemoSubEventOrder_Params params;
	params.MemoId = MemoId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.RemoveMainFlowWork
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::RemoveMainFlowWork(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.RemoveMainFlowWork");

	US3GameInstance_RemoveMainFlowWork_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.PushPlayerBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3PlayerBehavior              InPlayerBehavior               (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::PushPlayerBehavior(ES3PlayerBehavior InPlayerBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.PushPlayerBehavior");

	US3GameInstance_PushPlayerBehavior_Params params;
	params.InPlayerBehavior = InPlayerBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.PrepareLoadingScreen
// (Native, Public, BlueprintCallable)
// Parameters:
// ES3LoadingType                 Type                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::PrepareLoadingScreen(ES3LoadingType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.PrepareLoadingScreen");

	US3GameInstance_PrepareLoadingScreen_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.PopPlayerBehavior
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::PopPlayerBehavior()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.PopPlayerBehavior");

	US3GameInstance_PopPlayerBehavior_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.OnEndLoadingScreen
// (Native, Public)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::OnEndLoadingScreen(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.OnEndLoadingScreen");

	US3GameInstance_OnEndLoadingScreen_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.OnBeginLoadingScreen
// (Native, Public)
// Parameters:
// struct FString                 MapName                        (Parm, ZeroConstructor)

void US3GameInstance::OnBeginLoadingScreen(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.OnBeginLoadingScreen");

	US3GameInstance_OnBeginLoadingScreen_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.IsTrialVersion
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsTrialVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsTrialVersion");

	US3GameInstance_IsTrialVersion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsSwapDecideButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsSwapDecideButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsSwapDecideButton");

	US3GameInstance_IsSwapDecideButton_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsReadHelp
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsReadHelp(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsReadHelp");

	US3GameInstance_IsReadHelp_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsPlayedCutscene
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsPlayedCutscene(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsPlayedCutscene");

	US3GameInstance_IsPlayedCutscene_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsMainlandChina
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsMainlandChina()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsMainlandChina");

	US3GameInstance_IsMainlandChina_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsEventStepMaxMin
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsEventStepMaxMin(int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsEventStepMaxMin");

	US3GameInstance_IsEventStepMaxMin_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsEventStep
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsEventStep(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsEventStep");

	US3GameInstance_IsEventStep_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsEnableVibration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsEnableVibration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsEnableVibration");

	US3GameInstance_IsEnableVibration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsDebugChangeStep
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsDebugChangeStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsDebugChangeStep");

	US3GameInstance_IsDebugChangeStep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsAcquisitionAchievement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   UniqueName                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsAcquisitionAchievement(const struct FName& UniqueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsAcquisitionAchievement");

	US3GameInstance_IsAcquisitionAchievement_Params params;
	params.UniqueName = UniqueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.IsAcquisition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   UniqueName                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::IsAcquisition(const struct FName& UniqueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.IsAcquisition");

	US3GameInstance_IsAcquisition_Params params;
	params.UniqueName = UniqueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.InitTalkScript
// (Native, Public, BlueprintCallable)

void US3GameInstance::InitTalkScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitTalkScript");

	US3GameInstance_InitTalkScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.InitStatus
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::InitStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitStatus");

	US3GameInstance_InitStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.InitReward
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3GameInstance::InitReward()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitReward");

	US3GameInstance_InitReward_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.InitProgress
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::InitProgress(int Length)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitProgress");

	US3GameInstance_InitProgress_Params params;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.InitMemoFlag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::InitMemoFlag(int Length)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitMemoFlag");

	US3GameInstance_InitMemoFlag_Params params;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.InitItem
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::InitItem(int Length)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitItem");

	US3GameInstance_InitItem_Params params;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.InitBattleStats
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::InitBattleStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.InitBattleStats");

	US3GameInstance_InitBattleStats_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.GetYesterdayRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator US3GameInstance::GetYesterdayRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetYesterdayRotation");

	US3GameInstance_GetYesterdayRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetYesterdayPraceLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3GameInstance::GetYesterdayPraceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetYesterdayPraceLocation");

	US3GameInstance_GetYesterdayPraceLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetWindParam
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 NormalVec                      (Parm, OutParm, IsPlainOldData)
// struct FRotator                Rot                            (Parm, OutParm, IsPlainOldData)
// float                          Power                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::GetWindParam(struct FVector* NormalVec, struct FRotator* Rot, float* Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetWindParam");

	US3GameInstance_GetWindParam_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NormalVec != nullptr)
		*NormalVec = params.NormalVec;
	if (Rot != nullptr)
		*Rot = params.Rot;
	if (Power != nullptr)
		*Power = params.Power;
}


// Function Shenmue3.S3GameInstance.GetWindowParam
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3WindowType                  Type                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 OutResolution                  (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetWindowParam(ES3WindowType* Type, struct FString* OutResolution)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetWindowParam");

	US3GameInstance_GetWindowParam_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Type != nullptr)
		*Type = params.Type;
	if (OutResolution != nullptr)
		*OutResolution = params.OutResolution;
}


// Function Shenmue3.S3GameInstance.GetWearClothParts
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<EClothPartsType, struct FName> WearParts                      (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::GetWearClothParts(bool bRyo, TMap<EClothPartsType, struct FName>* WearParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetWearClothParts");

	US3GameInstance_GetWearClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WearParts != nullptr)
		*WearParts = params.WearParts;
}


// Function Shenmue3.S3GameInstance.GetVSync
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetVSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetVSync");

	US3GameInstance_GetVSync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetVoiceVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3GameInstance::GetVoiceVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetVoiceVolume");

	US3GameInstance_GetVoiceVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetVoiceLanguage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ES3VoiceLanguage               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3VoiceLanguage US3GameInstance::GetVoiceLanguage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetVoiceLanguage");

	US3GameInstance_GetVoiceLanguage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetUnlockedClothParts
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FName>           UnlockedParts                  (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::GetUnlockedClothParts(bool bRyo, TArray<struct FName>* UnlockedParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetUnlockedClothParts");

	US3GameInstance_GetUnlockedClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (UnlockedParts != nullptr)
		*UnlockedParts = params.UnlockedParts;
}


// Function Shenmue3.S3GameInstance.GetUnleadMemoIds
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> US3GameInstance::GetUnleadMemoIds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetUnleadMemoIds");

	US3GameInstance_GetUnleadMemoIds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetTalkScriptManager
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3TalkScriptManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3TalkScriptManager* US3GameInstance::GetTalkScriptManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetTalkScriptManager");

	US3GameInstance_GetTalkScriptManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetTalkScriptIndexData
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FTalkScriptData> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FTalkScriptData> US3GameInstance::GetTalkScriptIndexData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetTalkScriptIndexData");

	US3GameInstance_GetTalkScriptIndexData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetTabFlagUnread
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<bool>                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<bool> US3GameInstance::GetTabFlagUnread()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetTabFlagUnread");

	US3GameInstance_GetTabFlagUnread_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetSystemFlagLength
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetSystemFlagLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetSystemFlagLength");

	US3GameInstance_GetSystemFlagLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetSystemFlag
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            array_index                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetSystemFlag(int array_index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetSystemFlag");

	US3GameInstance_GetSystemFlag_Params params;
	params.array_index = array_index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetSEVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3GameInstance::GetSEVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetSEVolume");

	US3GameInstance_GetSEVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetSaveItemNum
// (Final, Native, Public, HasOutParms, Const)
// Parameters:
// TArray<int>                    NumArray                       (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetSaveItemNum(TArray<int>* NumArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetSaveItemNum");

	US3GameInstance_GetSaveItemNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NumArray != nullptr)
		*NumArray = params.NumArray;
}


// Function Shenmue3.S3GameInstance.GetSaveEventFlag
// (Final, Native, Public, HasOutParms, Const)
// Parameters:
// TArray<int>                    FlagArray                      (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetSaveEventFlag(TArray<int>* FlagArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetSaveEventFlag");

	US3GameInstance_GetSaveEventFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FlagArray != nullptr)
		*FlagArray = params.FlagArray;
}


// Function Shenmue3.S3GameInstance.GetRewardPasswords
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> US3GameInstance::GetRewardPasswords()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetRewardPasswords");

	US3GameInstance_GetRewardPasswords_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetRedemptionPoint
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetRedemptionPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetRedemptionPoint");

	US3GameInstance_GetRedemptionPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetReadHelpIdAll
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FName>           IdArray                        (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetReadHelpIdAll(TArray<struct FName>* IdArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetReadHelpIdAll");

	US3GameInstance_GetReadHelpIdAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IdArray != nullptr)
		*IdArray = params.IdArray;
}


// Function Shenmue3.S3GameInstance.GetProgressStep
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetProgressStep(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetProgressStep");

	US3GameInstance_GetProgressStep_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetProgressIndex
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetProgressIndex(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetProgressIndex");

	US3GameInstance_GetProgressIndex_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetPlayerBehavior
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ES3PlayerBehavior              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3PlayerBehavior US3GameInstance::GetPlayerBehavior()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetPlayerBehavior");

	US3GameInstance_GetPlayerBehavior_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMiniGameProgressManager
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3MiniGameProgressManager* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3MiniGameProgressManager* US3GameInstance::GetMiniGameProgressManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMiniGameProgressManager");

	US3GameInstance_GetMiniGameProgressManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoUnreadNum
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetMemoUnreadNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoUnreadNum");

	US3GameInstance_GetMemoUnreadNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoSubEventOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> US3GameInstance::GetMemoSubEventOrder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoSubEventOrder");

	US3GameInstance_GetMemoSubEventOrder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoMapMask
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<bool>                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<bool> US3GameInstance::GetMemoMapMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoMapMask");

	US3GameInstance_GetMemoMapMask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoLatestMotivationIndex
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetMemoLatestMotivationIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoLatestMotivationIndex");

	US3GameInstance_GetMemoLatestMotivationIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoLatestIndex
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetMemoLatestIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoLatestIndex");

	US3GameInstance_GetMemoLatestIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoFlagManager
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3MemoFlagManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3MemoFlagManager* US3GameInstance::GetMemoFlagManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoFlagManager");

	US3GameInstance_GetMemoFlagManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoFlagLength
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetMemoFlagLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoFlagLength");

	US3GameInstance_GetMemoFlagLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMemoFlag
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           flag                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Already                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::GetMemoFlag(int MemoId, bool* flag, bool* Already)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoFlag");

	US3GameInstance_GetMemoFlag_Params params;
	params.MemoId = MemoId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (flag != nullptr)
		*flag = params.flag;
	if (Already != nullptr)
		*Already = params.Already;
}


// Function Shenmue3.S3GameInstance.GetMemoDataArray
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FMemoData>       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FMemoData> US3GameInstance::GetMemoDataArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMemoDataArray");

	US3GameInstance_GetMemoDataArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetMainFlowWorkMap
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<struct FName, struct FString> WorkMap                        (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetMainFlowWorkMap(TMap<struct FName, struct FString>* WorkMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMainFlowWorkMap");

	US3GameInstance_GetMainFlowWorkMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorkMap != nullptr)
		*WorkMap = params.WorkMap;
}


// Function Shenmue3.S3GameInstance.GetMainFlowWork
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3GameInstance::GetMainFlowWork(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetMainFlowWork");

	US3GameInstance_GetMainFlowWork_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetLocale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ES3Locale                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3Locale US3GameInstance::GetLocale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetLocale");

	US3GameInstance_GetLocale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetKeyConfigValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3KeyConfigType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char US3GameInstance::GetKeyConfigValue(ES3KeyConfigType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetKeyConfigValue");

	US3GameInstance_GetKeyConfigValue_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetItemNum
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ItemId                         (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetItemNum(const struct FString& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetItemNum");

	US3GameInstance_GetItemNum_Params params;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetItemLength
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetItemLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetItemLength");

	US3GameInstance_GetItemLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetItemFlag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ItemId                         (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetItemFlag(const struct FString& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetItemFlag");

	US3GameInstance_GetItemFlag_Params params;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetItemCheckFlagArray
// (Final, Native, Public, HasOutParms, Const)
// Parameters:
// TArray<bool>                   FlagArray                      (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetItemCheckFlagArray(TArray<bool>* FlagArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetItemCheckFlagArray");

	US3GameInstance_GetItemCheckFlagArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FlagArray != nullptr)
		*FlagArray = params.FlagArray;
}


// Function Shenmue3.S3GameInstance.GetItemCheckFlag
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetItemCheckFlag(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetItemCheckFlag");

	US3GameInstance_GetItemCheckFlag_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetIsJumpYesterdayPrace
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetIsJumpYesterdayPrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetIsJumpYesterdayPrace");

	US3GameInstance_GetIsJumpYesterdayPrace_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetIsFirstContactState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetIsFirstContactState(const struct FString& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetIsFirstContactState");

	US3GameInstance_GetIsFirstContactState_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetInstalledRewards
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<ES3RewardType>          Rewards                        (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetInstalledRewards(TArray<ES3RewardType>* Rewards)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetInstalledRewards");

	US3GameInstance_GetInstalledRewards_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Rewards != nullptr)
		*Rewards = params.Rewards;
}


// Function Shenmue3.S3GameInstance.GetInputDeviceManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3InputDeviceManager*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3InputDeviceManager* US3GameInstance::GetInputDeviceManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetInputDeviceManager");

	US3GameInstance_GetInputDeviceManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetHaveMoney
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetHaveMoney()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetHaveMoney");

	US3GameInstance_GetHaveMoney_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetGraphicQuality
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3GraphicPreset               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3GraphicPreset US3GameInstance::GetGraphicQuality()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetGraphicQuality");

	US3GameInstance_GetGraphicQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetFishingInfo
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 StoreId                        (Parm, OutParm, ZeroConstructor)
// struct FString                 RodId                          (Parm, OutParm, ZeroConstructor)
// struct FDateTime               RentalDate                     (Parm, OutParm)

void US3GameInstance::GetFishingInfo(struct FString* StoreId, struct FString* RodId, struct FDateTime* RentalDate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetFishingInfo");

	US3GameInstance_GetFishingInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StoreId != nullptr)
		*StoreId = params.StoreId;
	if (RodId != nullptr)
		*RodId = params.RodId;
	if (RentalDate != nullptr)
		*RentalDate = params.RentalDate;
}


// Function Shenmue3.S3GameInstance.GetEventStep
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetEventStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetEventStep");

	US3GameInstance_GetEventStep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetEventFlagLength
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetEventFlagLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetEventFlagLength");

	US3GameInstance_GetEventFlagLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetEventFlag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetEventFlag(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetEventFlag");

	US3GameInstance_GetEventFlag_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetDisplayGamma
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3GameInstance::GetDisplayGamma()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetDisplayGamma");

	US3GameInstance_GetDisplayGamma_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetDemoType
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3DemoType                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3DemoType US3GameInstance::GetDemoType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetDemoType");

	US3GameInstance_GetDemoType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetBootFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetBootFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetBootFlag");

	US3GameInstance_GetBootFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetBGMVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3GameInstance::GetBGMVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetBGMVolume");

	US3GameInstance_GetBGMVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetBetMoney
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GameInstance::GetBetMoney()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetBetMoney");

	US3GameInstance_GetBetMoney_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetBattleStatsManager
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3BattleStatsManager*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3BattleStatsManager* US3GameInstance::GetBattleStatsManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetBattleStatsManager");

	US3GameInstance_GetBattleStatsManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetBattleRallyInfo
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FS3BattleRallySaveData  Info                           (Parm, OutParm)

void US3GameInstance::GetBattleRallyInfo(struct FS3BattleRallySaveData* Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetBattleRallyInfo");

	US3GameInstance_GetBattleRallyInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Info != nullptr)
		*Info = params.Info;
}


// Function Shenmue3.S3GameInstance.GetBattleCommandLibrary
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBTL_CommandLibraryBase* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UBTL_CommandLibraryBase* US3GameInstance::GetBattleCommandLibrary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetBattleCommandLibrary");

	US3GameInstance_GetBattleCommandLibrary_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.GetAcquisitionMap
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<struct FName, unsigned char> OutMap                         (Parm, OutParm, ZeroConstructor)
// TMap<struct FName, unsigned char> OutAchieveMap                  (Parm, OutParm, ZeroConstructor)

void US3GameInstance::GetAcquisitionMap(TMap<struct FName, unsigned char>* OutMap, TMap<struct FName, unsigned char>* OutAchieveMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetAcquisitionMap");

	US3GameInstance_GetAcquisitionMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMap != nullptr)
		*OutMap = params.OutMap;
	if (OutAchieveMap != nullptr)
		*OutAchieveMap = params.OutAchieveMap;
}


// Function Shenmue3.S3GameInstance.GetACPlayDateTime
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDateTime               DateTime                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::GetACPlayDateTime(const struct FName& ID, struct FDateTime* DateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.GetACPlayDateTime");

	US3GameInstance_GetACPlayDateTime_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DateTime != nullptr)
		*DateTime = params.DateTime;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.ForceCallOnStepChanged
// (Native, Public, BlueprintCallable)

void US3GameInstance::ForceCallOnStepChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.ForceCallOnStepChanged");

	US3GameInstance_ForceCallOnStepChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.EnableAnsel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::EnableAnsel(class UObject* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.EnableAnsel");

	US3GameInstance_EnableAnsel_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.DisableAnsel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::DisableAnsel(class UObject* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.DisableAnsel");

	US3GameInstance_DisableAnsel_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.ClearPlayerBehaviorStack
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::ClearPlayerBehaviorStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.ClearPlayerBehaviorStack");

	US3GameInstance_ClearPlayerBehaviorStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.ClearGameModeCache
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::ClearGameModeCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.ClearGameModeCache");

	US3GameInstance_ClearGameModeCache_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.ClearAnselObjects
// (Final, Native, Public, BlueprintCallable)

void US3GameInstance::ClearAnselObjects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.ClearAnselObjects");

	US3GameInstance_ClearAnselObjects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.ChangeBattleCommandLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  CommandLibraryClass            (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::ChangeBattleCommandLibrary(class UClass* CommandLibraryClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.ChangeBattleCommandLibrary");

	US3GameInstance_ChangeBattleCommandLibrary_Params params;
	params.CommandLibraryClass = CommandLibraryClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.AddRewardPassword
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Password                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3GameInstance::AddRewardPassword(const struct FName& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddRewardPassword");

	US3GameInstance_AddRewardPassword_Params params;
	params.Password = Password;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameInstance.AddRedemptionPoint
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            AddPoint                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::AddRedemptionPoint(int AddPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddRedemptionPoint");

	US3GameInstance_AddRedemptionPoint_Params params;
	params.AddPoint = AddPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.AddMemoSubEventOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::AddMemoSubEventOrder(int MemoId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddMemoSubEventOrder");

	US3GameInstance_AddMemoSubEventOrder_Params params;
	params.MemoId = MemoId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.AddItemNum
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ItemId                         (Parm, ZeroConstructor)
// int                            Num                            (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::AddItemNum(const struct FString& ItemId, int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddItemNum");

	US3GameInstance_AddItemNum_Params params;
	params.ItemId = ItemId;
	params.Num = Num;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.AddHaveMoney
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            AddMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::AddHaveMoney(int AddMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddHaveMoney");

	US3GameInstance_AddHaveMoney_Params params;
	params.AddMoney = AddMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.AddCutsceneId
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::AddCutsceneId(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddCutsceneId");

	US3GameInstance_AddCutsceneId_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameInstance.AddBetMoney
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            AddMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3GameInstance::AddBetMoney(int AddMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameInstance.AddBetMoney");

	US3GameInstance_AddBetMoney_Params params;
	params.AddMoney = AddMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.WriteAchievement
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3AchievementType             ID                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AchievementManager::WriteAchievement(ES3AchievementType ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.WriteAchievement");

	US3AchievementManager_WriteAchievement_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AchievementManager.OnMoneyChanged
// (Final, Native, Public)
// Parameters:
// int                            NewMoney                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::OnMoneyChanged(int NewMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.OnMoneyChanged");

	US3AchievementManager_OnMoneyChanged_Params params;
	params.NewMoney = NewMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.OnMiniGameHighScoreChanged
// (Final, Native, Public)
// Parameters:
// ES3MiniGameCategory            Category                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ScoreKey                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::OnMiniGameHighScoreChanged(ES3MiniGameCategory Category, const struct FName& ScoreKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.OnMiniGameHighScoreChanged");

	US3AchievementManager_OnMiniGameHighScoreChanged_Params params;
	params.Category = Category;
	params.ScoreKey = ScoreKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.OnItemNumChanged
// (Final, Native, Public)
// Parameters:
// struct FName                   ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewNum                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            OldNum                         (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::OnItemNumChanged(const struct FName& ItemId, int NewNum, int OldNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.OnItemNumChanged");

	US3AchievementManager_OnItemNumChanged_Params params;
	params.ItemId = ItemId;
	params.NewNum = NewNum;
	params.OldNum = OldNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.OnEventFlagChanged
// (Final, Native, Public)
// Parameters:
// int                            ArrayIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            SetFlags                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::OnEventFlagChanged(int ArrayIndex, int SetFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.OnEventFlagChanged");

	US3AchievementManager_OnEventFlagChanged_Params params;
	params.ArrayIndex = ArrayIndex;
	params.SetFlags = SetFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.OnBetMoneyChanged
// (Final, Native, Public)
// Parameters:
// int                            NewBetMoney                    (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::OnBetMoneyChanged(int NewBetMoney)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.OnBetMoneyChanged");

	US3AchievementManager_OnBetMoneyChanged_Params params;
	params.NewBetMoney = NewBetMoney;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.OnAcquisitionFlagChanged
// (Final, Native, Public)
// Parameters:
// struct FName                   UniqueName                     (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::OnAcquisitionFlagChanged(const struct FName& UniqueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.OnAcquisitionFlagChanged");

	US3AchievementManager_OnAcquisitionFlagChanged_Params params;
	params.UniqueName = UniqueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AchievementManager.IsGachaSetComplete
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3AchievementGachaSet  GachaSet                       (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AchievementManager::IsGachaSetComplete(const struct FS3AchievementGachaSet& GachaSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.IsGachaSetComplete");

	US3AchievementManager_IsGachaSetComplete_Params params;
	params.GachaSet = GachaSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AchievementManager.GetGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3AchievementManager::GetGameInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.GetGameInstance");

	US3AchievementManager_GetGameInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AchievementManager.GetAchievementCount
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3AchievementCountType        Type                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3AchievementManager::GetAchievementCount(ES3AchievementCountType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.GetAchievementCount");

	US3AchievementManager_GetAchievementCount_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AchievementManager.AddAchievementCount
// (Native, Public, BlueprintCallable)
// Parameters:
// ES3AchievementCountType        Type                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            AddNum                         (Parm, ZeroConstructor, IsPlainOldData)

void US3AchievementManager::AddAchievementCount(ES3AchievementCountType Type, int AddNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AchievementManager.AddAchievementCount");

	US3AchievementManager_AddAchievementCount_Params params;
	params.Type = Type;
	params.AddNum = AddNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerControllerBase.UpdateKeyBinding
// (Final, Native, Public, BlueprintCallable)

void AS3PlayerControllerBase::UpdateKeyBinding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerControllerBase.UpdateKeyBinding");

	AS3PlayerControllerBase_UpdateKeyBinding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.UnregisterInteractionComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3InteractionComponent* Interaction                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3PlayerController::UnregisterInteractionComponent(class US3InteractionComponent* Interaction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.UnregisterInteractionComponent");

	AS3PlayerController_UnregisterInteractionComponent_Params params;
	params.Interaction = Interaction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.UnloadAtomCueSheet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 CueSheetId                     (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3PlayerController::UnloadAtomCueSheet(const struct FString& CueSheetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.UnloadAtomCueSheet");

	AS3PlayerController_UnloadAtomCueSheet_Params params;
	params.CueSheetId = CueSheetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.UnbindDebugInputDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FText                   Name                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3PlayerController::UnbindDebugInputDelegate(const struct FText& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.UnbindDebugInputDelegate");

	AS3PlayerController_UnbindDebugInputDelegate_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.SetViewTargetWithBoomBlend
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  NewViewTarget                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewPivot                       (ConstParm, Parm, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLockOutgoing                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InvalidBoomBlend               (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerController::SetViewTargetWithBoomBlend(class AActor* NewViewTarget, const struct FVector& NewPivot, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing, bool InvalidBoomBlend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.SetViewTargetWithBoomBlend");

	AS3PlayerController_SetViewTargetWithBoomBlend_Params params;
	params.NewViewTarget = NewViewTarget;
	params.NewPivot = NewPivot;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;
	params.InvalidBoomBlend = InvalidBoomBlend;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.SetFOVOffset
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          NewOffset                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerController::SetFOVOffset(float NewOffset, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.SetFOVOffset");

	AS3PlayerController_SetFOVOffset_Params params;
	params.NewOffset = NewOffset;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.RegisterInteractionComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3InteractionComponent* NewInteraction                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3PlayerController::RegisterInteractionComponent(class US3InteractionComponent* NewInteraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.RegisterInteractionComponent");

	AS3PlayerController_RegisterInteractionComponent_Params params;
	params.NewInteraction = NewInteraction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.NumberOfWatchItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3PlayerController::NumberOfWatchItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.NumberOfWatchItems");

	AS3PlayerController_NumberOfWatchItems_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.NumberOfTeleportDelegates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3PlayerController::NumberOfTeleportDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.NumberOfTeleportDelegates");

	AS3PlayerController_NumberOfTeleportDelegates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.NumberOfInputDelegates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3PlayerController::NumberOfInputDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.NumberOfInputDelegates");

	AS3PlayerController_NumberOfInputDelegates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.LoadAtomCueSheet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 CueSheetId                     (Parm, ZeroConstructor)
// struct FName                   Path                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3PlayerController::LoadAtomCueSheet(const struct FString& CueSheetId, const struct FName& Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.LoadAtomCueSheet");

	AS3PlayerController_LoadAtomCueSheet_Params params;
	params.CueSheetId = CueSheetId;
	params.Path = Path;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.IsViewportInFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3PlayerController::IsViewportInFocus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.IsViewportInFocus");

	AS3PlayerController_IsViewportInFocus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.InitDebugInputBox
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class US3DebugInputBox*        InputBox                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   OutCategory                    (Parm, OutParm)
// struct FText                   OutName                        (Parm, OutParm)
// struct FText                   OutDescription                 (Parm, OutParm)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// class US3DebugInputBox*        ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3DebugInputBox* AS3PlayerController::InitDebugInputBox(class US3DebugInputBox* InputBox, int Index, bool bTeleport, struct FText* OutCategory, struct FText* OutName, struct FText* OutDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.InitDebugInputBox");

	AS3PlayerController_InitDebugInputBox_Params params;
	params.InputBox = InputBox;
	params.Index = Index;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutCategory != nullptr)
		*OutCategory = params.OutCategory;
	if (OutName != nullptr)
		*OutName = params.OutName;
	if (OutDescription != nullptr)
		*OutDescription = params.OutDescription;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.GetWatchItem
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ObjectDisplayName              (Parm, OutParm)
// struct FText                   PropertyDisplayName            (Parm, OutParm)
// struct FText                   Description                    (Parm, OutParm)
// struct FName                   PropertyName                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ES3WatchPropertyTypes> PropertyType                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 EnumType                       (Parm, OutParm, ZeroConstructor)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* AS3PlayerController::GetWatchItem(int Index, struct FText* ObjectDisplayName, struct FText* PropertyDisplayName, struct FText* Description, struct FName* PropertyName, TEnumAsByte<ES3WatchPropertyTypes>* PropertyType, struct FString* EnumType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.GetWatchItem");

	AS3PlayerController_GetWatchItem_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ObjectDisplayName != nullptr)
		*ObjectDisplayName = params.ObjectDisplayName;
	if (PropertyDisplayName != nullptr)
		*PropertyDisplayName = params.PropertyDisplayName;
	if (Description != nullptr)
		*Description = params.Description;
	if (PropertyName != nullptr)
		*PropertyName = params.PropertyName;
	if (PropertyType != nullptr)
		*PropertyType = params.PropertyType;
	if (EnumType != nullptr)
		*EnumType = params.EnumType;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.CreateDebugWidght
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  WidgetClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UUserWidget*             ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UUserWidget* AS3PlayerController::CreateDebugWidght(class UClass* WidgetClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.CreateDebugWidght");

	AS3PlayerController_CreateDebugWidght_Params params;
	params.WidgetClass = WidgetClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerController.ClearDebugTeleportDelegates
// (Final, Native, Public, BlueprintCallable)

void AS3PlayerController::ClearDebugTeleportDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.ClearDebugTeleportDelegates");

	AS3PlayerController_ClearDebugTeleportDelegates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.ClearDebugInputDelegates
// (Final, Native, Public, BlueprintCallable)

void AS3PlayerController::ClearDebugInputDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.ClearDebugInputDelegates");

	AS3PlayerController_ClearDebugInputDelegates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.ClearAtomCueSheet
// (Final, Native, Public, BlueprintCallable)

void AS3PlayerController::ClearAtomCueSheet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.ClearAtomCueSheet");

	AS3PlayerController_ClearAtomCueSheet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.CancelViewTargetWithBlend
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OnlyIfMatch                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLockOutgoing                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerController::CancelViewTargetWithBlend(class AActor* OnlyIfMatch, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.CancelViewTargetWithBlend");

	AS3PlayerController_CancelViewTargetWithBlend_Params params;
	params.OnlyIfMatch = OnlyIfMatch;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.CancelViewTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OnlyIfMatch                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerController::CancelViewTarget(class AActor* OnlyIfMatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.CancelViewTarget");

	AS3PlayerController_CancelViewTarget_Params params;
	params.OnlyIfMatch = OnlyIfMatch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.BindTeleportDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FText                   Category                       (Parm)
// struct FText                   Name                           (Parm)
// struct FText                   Description                    (Parm)
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)

void AS3PlayerController::BindTeleportDelegate(const struct FText& Category, const struct FText& Name, const struct FText& Description, class UObject* ContextObject, const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.BindTeleportDelegate");

	AS3PlayerController_BindTeleportDelegate_Params params;
	params.Category = Category;
	params.Name = Name;
	params.Description = Description;
	params.ContextObject = ContextObject;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.BindDebugInputDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FText                   Category                       (Parm)
// struct FText                   Name                           (Parm)
// struct FText                   Description                    (Parm)
// bool                           bHotKey                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FInputActionKeyMapping  Input                          (Parm)
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)

void AS3PlayerController::BindDebugInputDelegate(const struct FText& Category, const struct FText& Name, const struct FText& Description, bool bHotKey, const struct FInputActionKeyMapping& Input, class UObject* ContextObject, const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.BindDebugInputDelegate");

	AS3PlayerController_BindDebugInputDelegate_Params params;
	params.Category = Category;
	params.Name = Name;
	params.Description = Description;
	params.bHotKey = bHotKey;
	params.Input = Input;
	params.ContextObject = ContextObject;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerController.AddPropertyWatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FText                   ObjectDisplayName              (Parm)
// struct FText                   PropertyDisplayName            (Parm)
// struct FText                   Description                    (Parm)
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerController::AddPropertyWatch(const struct FText& ObjectDisplayName, const struct FText& PropertyDisplayName, const struct FText& Description, class UObject* WatchedObject, const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerController.AddPropertyWatch");

	AS3PlayerController_AddPropertyWatch_Params params;
	params.ObjectDisplayName = ObjectDisplayName;
	params.PropertyDisplayName = PropertyDisplayName;
	params.Description = Description;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AdventurePlayerController.ProjectionXY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           InNormalize                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::STATIC_ProjectionXY(const struct FVector& InVec, bool InNormalize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.ProjectionXY");

	AS3AdventurePlayerController_ProjectionXY_Params params;
	params.InVec = InVec;
	params.InNormalize = InNormalize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.PC_GetIsInFirstPersonMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AdventurePlayerController::PC_GetIsInFirstPersonMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.PC_GetIsInFirstPersonMode");

	AS3AdventurePlayerController_PC_GetIsInFirstPersonMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.PC_GetInteractionVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::PC_GetInteractionVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.PC_GetInteractionVector");

	AS3AdventurePlayerController_PC_GetInteractionVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.IsOwnedByPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         InComponent                    (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AdventurePlayerController::STATIC_IsOwnedByPlayer(class UObject* WorldContextObject, class UActorComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.IsOwnedByPlayer");

	AS3AdventurePlayerController_IsOwnedByPlayer_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.IsDisablePadControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AdventurePlayerController::IsDisablePadControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.IsDisablePadControl");

	AS3AdventurePlayerController_IsDisablePadControl_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.GetOffsetVectorZ
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          InOffsetZ                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::STATIC_GetOffsetVectorZ(const struct FVector& InVec, float InOffsetZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.GetOffsetVectorZ");

	AS3AdventurePlayerController_GetOffsetVectorZ_Params params;
	params.InVec = InVec;
	params.InOffsetZ = InOffsetZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.GetOffsetVectorY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          InOffsetY                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::STATIC_GetOffsetVectorY(const struct FVector& InVec, float InOffsetY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.GetOffsetVectorY");

	AS3AdventurePlayerController_GetOffsetVectorY_Params params;
	params.InVec = InVec;
	params.InOffsetY = InOffsetY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.GetOffsetVectorX
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          InOffsetX                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::STATIC_GetOffsetVectorX(const struct FVector& InVec, float InOffsetX)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.GetOffsetVectorX");

	AS3AdventurePlayerController_GetOffsetVectorX_Params params;
	params.InVec = InVec;
	params.InOffsetX = InOffsetX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.GetHighestFloatIndex
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  InFloatArray                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3AdventurePlayerController::STATIC_GetHighestFloatIndex(TArray<float> InFloatArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.GetHighestFloatIndex");

	AS3AdventurePlayerController_GetHighestFloatIndex_Params params;
	params.InFloatArray = InFloatArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.GetHavingTagChildComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*         InSceneComponent               (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InTag                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           InAllChildren                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AS3AdventurePlayerController::STATIC_GetHavingTagChildComponent(class USceneComponent* InSceneComponent, const struct FName& InTag, bool InAllChildren)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.GetHavingTagChildComponent");

	AS3AdventurePlayerController_GetHavingTagChildComponent_Params params;
	params.InSceneComponent = InSceneComponent;
	params.InTag = InTag;
	params.InAllChildren = InAllChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.GetFloatSign
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InValue                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3AdventurePlayerController::STATIC_GetFloatSign(float InValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.GetFloatSign");

	AS3AdventurePlayerController_GetFloatSign_Params params;
	params.InValue = InValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.EnablePadControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3AdventurePlayerController::EnablePadControl(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.EnablePadControl");

	AS3AdventurePlayerController_EnablePadControl_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AdventurePlayerController.DisablePadControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3AdventurePlayerController::DisablePadControl(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.DisablePadControl");

	AS3AdventurePlayerController_DisablePadControl_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AdventurePlayerController.CalcNormal
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InVec                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           InProjectionXZ                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::STATIC_CalcNormal(const struct FVector& InVec, bool InProjectionXZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.CalcNormal");

	AS3AdventurePlayerController_CalcNormal_Params params;
	params.InVec = InVec;
	params.InProjectionXZ = InProjectionXZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.CalcDirection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InSrc                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 InDst                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           InProjectionXY                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3AdventurePlayerController::STATIC_CalcDirection(const struct FVector& InSrc, const struct FVector& InDst, bool InProjectionXY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.CalcDirection");

	AS3AdventurePlayerController_CalcDirection_Params params;
	params.InSrc = InSrc;
	params.InDst = InDst;
	params.InProjectionXY = InProjectionXY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AdventurePlayerController.CalcAngleDegXY
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 InSrcDir                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 InDstDir                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3AdventurePlayerController::STATIC_CalcAngleDegXY(const struct FVector& InSrcDir, const struct FVector& InDstDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AdventurePlayerController.CalcAngleDegXY");

	AS3AdventurePlayerController_CalcAngleDegXY_Params params;
	params.InSrcDir = InSrcDir;
	params.InDstDir = InDstDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.TryGetSocketLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   Socket                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_TryGetSocketLocation(class USceneComponent* Component, const struct FName& Socket, struct FVector* Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.TryGetSocketLocation");

	US3AnalyzeFunctionLibrary_TryGetSocketLocation_Params params;
	params.Component = Component;
	params.Socket = Socket;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.IsPlayerPawn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_IsPlayerPawn(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.IsPlayerPawn");

	US3AnalyzeFunctionLibrary_IsPlayerPawn_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.IsPlayerCollision
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_IsPlayerCollision(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.IsPlayerCollision");

	US3AnalyzeFunctionLibrary_IsPlayerCollision_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.IsOverlappingPlayer
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Trigger                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCapsuleComponent*       PlayerCapsule                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_IsOverlappingPlayer(class UPrimitiveComponent* Trigger, class UCapsuleComponent** PlayerCapsule)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.IsOverlappingPlayer");

	US3AnalyzeFunctionLibrary_IsOverlappingPlayer_Params params;
	params.Trigger = Trigger;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerCapsule != nullptr)
		*PlayerCapsule = params.PlayerCapsule;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.IsOverlappingAdventurePlayer
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Trigger                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCapsuleComponent*       PlayerCapsule                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_IsOverlappingAdventurePlayer(class UPrimitiveComponent* Trigger, class UCapsuleComponent** PlayerCapsule)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.IsOverlappingAdventurePlayer");

	US3AnalyzeFunctionLibrary_IsOverlappingAdventurePlayer_Params params;
	params.Trigger = Trigger;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerCapsule != nullptr)
		*PlayerCapsule = params.PlayerCapsule;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.IsAdventurePlayerCollision
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_IsAdventurePlayerCollision(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.IsAdventurePlayerCollision");

	US3AnalyzeFunctionLibrary_IsAdventurePlayerCollision_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.IsAdventurePlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_IsAdventurePlayer(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.IsAdventurePlayer");

	US3AnalyzeFunctionLibrary_IsAdventurePlayer_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.GetS3CharacterFromCollision
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AS3Character*            Character                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnalyzeFunctionLibrary::STATIC_GetS3CharacterFromCollision(class UActorComponent* Component, class AS3Character** Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.GetS3CharacterFromCollision");

	US3AnalyzeFunctionLibrary_GetS3CharacterFromCollision_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Character != nullptr)
		*Character = params.Character;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnalyzeFunctionLibrary.EstimateGroundLocation
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*              Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          MaxAbove                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxBelow                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3AnalyzeFunctionLibrary::STATIC_EstimateGroundLocation(class ACharacter* Pawn, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, const struct FVector& Location, float MaxAbove, float MaxBelow, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnalyzeFunctionLibrary.EstimateGroundLocation");

	US3AnalyzeFunctionLibrary_EstimateGroundLocation_Params params;
	params.Pawn = Pawn;
	params.ObjectTypes = ObjectTypes;
	params.Location = Location;
	params.MaxAbove = MaxAbove;
	params.MaxBelow = MaxBelow;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.MapToCircularRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeA                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeB                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_MapToCircularRange(float Time, float RangeA, float RangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.MapToCircularRange");

	US3AngleFunctionLibrary_MapToCircularRange_Params params;
	params.Time = Time;
	params.RangeA = RangeA;
	params.RangeB = RangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.MakeAngleRangeFromLimits
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          LHS                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          RHS                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3AngleRange           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3AngleRange US3AngleFunctionLibrary::STATIC_MakeAngleRangeFromLimits(float LHS, float RHS)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.MakeAngleRangeFromLimits");

	US3AngleFunctionLibrary_MakeAngleRangeFromLimits_Params params;
	params.LHS = LHS;
	params.RHS = RHS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.IsWithinCircularRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMin                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMax                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AngleFunctionLibrary::STATIC_IsWithinCircularRange(float Time, float RangeMin, float RangeMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.IsWithinCircularRange");

	US3AngleFunctionLibrary_IsWithinCircularRange_Params params;
	params.Time = Time;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.GetNormalizedOutsideRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3AngleRange           Range                          (Parm)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_GetNormalizedOutsideRange(const struct FS3AngleRange& Range, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.GetNormalizedOutsideRange");

	US3AngleFunctionLibrary_GetNormalizedOutsideRange_Params params;
	params.Range = Range;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.GetCycleDifferenceInDirection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Prev                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Next                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_GetCycleDifferenceInDirection(float Prev, float Next, bool Forward)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.GetCycleDifferenceInDirection");

	US3AngleFunctionLibrary_GetCycleDifferenceInDirection_Params params;
	params.Prev = Prev;
	params.Next = Next;
	params.Forward = Forward;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.GetCycleDifferenceAbs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_GetCycleDifferenceAbs(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.GetCycleDifferenceAbs");

	US3AngleFunctionLibrary_GetCycleDifferenceAbs_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.GetCloserCyclePosition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          CloseTo                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_GetCloserCyclePosition(float CloseTo, float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.GetCloserCyclePosition");

	US3AngleFunctionLibrary_GetCloserCyclePosition_Params params;
	params.CloseTo = CloseTo;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.GetAngleOutsideRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3AngleRange           Range                          (Parm)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_GetAngleOutsideRange(const struct FS3AngleRange& Range, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.GetAngleOutsideRange");

	US3AngleFunctionLibrary_GetAngleOutsideRange_Params params;
	params.Range = Range;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.ExpandAngleRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3AngleRange           Range                          (Parm)
// float                          IncludeAngle                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3AngleRange           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3AngleRange US3AngleFunctionLibrary::STATIC_ExpandAngleRange(const struct FS3AngleRange& Range, float IncludeAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.ExpandAngleRange");

	US3AngleFunctionLibrary_ExpandAngleRange_Params params;
	params.Range = Range;
	params.IncludeAngle = IncludeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.ClampAngleToRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3AngleRange           Range                          (Parm)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3AngleFunctionLibrary::STATIC_ClampAngleToRange(const struct FS3AngleRange& Range, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.ClampAngleToRange");

	US3AngleFunctionLibrary_ClampAngleToRange_Params params;
	params.Range = Range;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AngleFunctionLibrary.AngleRangeContains
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3AngleRange           Range                          (Parm)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AngleFunctionLibrary::STATIC_AngleRangeContains(const struct FS3AngleRange& Range, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AngleFunctionLibrary.AngleRangeContains");

	US3AngleFunctionLibrary_AngleRangeContains_Params params;
	params.Range = Range;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.StartCharaFadeOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::StartCharaFadeOut(class AActor* Executor, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.StartCharaFadeOut");

	AS3Character_StartCharaFadeOut_Params params;
	params.Executor = Executor;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.StartCharaFadeIn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::StartCharaFadeIn(class AActor* Executor, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.StartCharaFadeIn");

	AS3Character_StartCharaFadeIn_Params params;
	params.Executor = Executor;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.StairsPreSetting
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  StairActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::StairsPreSetting(class AActor* StairActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.StairsPreSetting");

	AS3Character_StairsPreSetting_Params params;
	params.StairActor = StairActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetupMesh
// (Final, Native, Public, BlueprintCallable)

void AS3Character::SetupMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetupMesh");

	AS3Character_SetupMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetUpdateTickEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetUpdateTickEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetUpdateTickEnabled");

	AS3Character_SetUpdateTickEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetTagCharaName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetTagCharaName(const struct FName& CharaName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetTagCharaName");

	AS3Character_SetTagCharaName_Params params;
	params.CharaName = CharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetSchedulePaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewSchedulePaused             (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetSchedulePaused(bool bNewSchedulePaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetSchedulePaused");

	AS3Character_SetSchedulePaused_Params params;
	params.bNewSchedulePaused = bNewSchedulePaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetNPCFadeTimeOnce
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeTime                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetNPCFadeTimeOnce(float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetNPCFadeTimeOnce");

	AS3Character_SetNPCFadeTimeOnce_Params params;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetFaceAnimData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class US3FaceAnimDataAsset*    InFaceMontageData              (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetFaceAnimData(class US3FaceAnimDataAsset* InFaceMontageData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetFaceAnimData");

	AS3Character_SetFaceAnimData_Params params;
	params.InFaceMontageData = InFaceMontageData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetDistanceFromPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InDistanceFromPlayer           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInBattleMode                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetDistanceFromPlayer(float InDistanceFromPlayer, bool bInBattleMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetDistanceFromPlayer");

	AS3Character_SetDistanceFromPlayer_Params params;
	params.InDistanceFromPlayer = InDistanceFromPlayer;
	params.bInBattleMode = bInBattleMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.SetAttachObjectHiddenInGame
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::SetAttachObjectHiddenInGame(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.SetAttachObjectHiddenInGame");

	AS3Character_SetAttachObjectHiddenInGame_Params params;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.ReturnOutOfWorld
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::ReturnOutOfWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.ReturnOutOfWorld");

	AS3Character_ReturnOutOfWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.ResetFadeMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  MeshComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3Character::ResetFadeMaterial(class USkeletalMeshComponent* MeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.ResetFadeMaterial");

	AS3Character_ResetFadeMaterial_Params params;
	params.MeshComponent = MeshComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.PauseAvoidance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsPaused                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::PauseAvoidance(bool IsPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.PauseAvoidance");

	AS3Character_PauseAvoidance_Params params;
	params.IsPaused = IsPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnStartStairs
// (Event, Public, BlueprintEvent)

void AS3Character::OnStartStairs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnStartStairs");

	AS3Character_OnStartStairs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnNPCUninitialized
// (Event, Public, BlueprintEvent)

void AS3Character::OnNPCUninitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnNPCUninitialized");

	AS3Character_OnNPCUninitialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnNPCInitialized
// (Event, Public, BlueprintEvent)

void AS3Character::OnNPCInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnNPCInitialized");

	AS3Character_OnNPCInitialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnMeshVisibilityChanged
// (Final, Native, Private)
// Parameters:
// bool                           Visible                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::OnMeshVisibilityChanged(bool Visible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnMeshVisibilityChanged");

	AS3Character_OnMeshVisibilityChanged_Params params;
	params.Visible = Visible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnEndStairs
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AS3Character::OnEndStairs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnEndStairs");

	AS3Character_OnEndStairs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnDoorAreaOutsideEndOverlap
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3GimmickOpenDoor*      Door                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::OnDoorAreaOutsideEndOverlap(class AS3GimmickOpenDoor* Door)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnDoorAreaOutsideEndOverlap");

	AS3Character_OnDoorAreaOutsideEndOverlap_Params params;
	params.Door = Door;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnDoorAreaOutsideBeginOverlap
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3GimmickOpenDoor*      Door                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::OnDoorAreaOutsideBeginOverlap(class AS3GimmickOpenDoor* Door)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnDoorAreaOutsideBeginOverlap");

	AS3Character_OnDoorAreaOutsideBeginOverlap_Params params;
	params.Door = Door;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnDoorAreaEndOverlap
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3GimmickOpenDoor*      Door                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::OnDoorAreaEndOverlap(class AS3GimmickOpenDoor* Door)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnDoorAreaEndOverlap");

	AS3Character_OnDoorAreaEndOverlap_Params params;
	params.Door = Door;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.OnDoorAreaBeginOverlap
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3GimmickOpenDoor*      Door                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::OnDoorAreaBeginOverlap(class AS3GimmickOpenDoor* Door)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.OnDoorAreaBeginOverlap");

	AS3Character_OnDoorAreaBeginOverlap_Params params;
	params.Door = Door;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.IsSchedulePaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsSchedulePaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsSchedulePaused");

	AS3Character_IsSchedulePaused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IsRespawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsRespawn");

	AS3Character_IsRespawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IsPauseAvoidance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsPauseAvoidance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsPauseAvoidance");

	AS3Character_IsPauseAvoidance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IsMeshFadeOutComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsMeshFadeOutComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsMeshFadeOutComplete");

	AS3Character_IsMeshFadeOutComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IsMeshFadeInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsMeshFadeInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsMeshFadeInProgress");

	AS3Character_IsMeshFadeInProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IsMeshFadeInComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsMeshFadeInComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsMeshFadeInComplete");

	AS3Character_IsMeshFadeInComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IsIgnoringPlayerWhenMoving
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::IsIgnoringPlayerWhenMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IsIgnoringPlayerWhenMoving");

	AS3Character_IsIgnoringPlayerWhenMoving_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.IgnorePlayerWhenMoving
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::IgnorePlayerWhenMoving(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.IgnorePlayerWhenMoving");

	AS3Character_IgnorePlayerWhenMoving_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.HandleTeleportSucceeded
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bIsATest                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::HandleTeleportSucceeded(bool bIsATest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.HandleTeleportSucceeded");

	AS3Character_HandleTeleportSucceeded_Params params;
	params.bIsATest = bIsATest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.GetTagCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3Character::GetTagCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetTagCharaName");

	AS3Character_GetTagCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetTagCharaComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3TagCharaComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3TagCharaComponent* AS3Character::GetTagCharaComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetTagCharaComponent");

	AS3Character_GetTagCharaComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetProfileHandedness
// (Event, Public, BlueprintEvent)
// Parameters:
// TEnumAsByte<ES3HandednessType> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ES3HandednessType> AS3Character::GetProfileHandedness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetProfileHandedness");

	AS3Character_GetProfileHandedness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetNPCStreamingState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ES3NPCStreamingState           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3NPCStreamingState AS3Character::GetNPCStreamingState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetNPCStreamingState");

	AS3Character_GetNPCStreamingState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetNPCMeshState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ES3NPCMeshState                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3NPCMeshState AS3Character::GetNPCMeshState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetNPCMeshState");

	AS3Character_GetNPCMeshState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetNPCFadeTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Character::GetNPCFadeTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetNPCFadeTime");

	AS3Character_GetNPCFadeTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetNPCDefaultFadeTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Character::GetNPCDefaultFadeTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetNPCDefaultFadeTime");

	AS3Character_GetNPCDefaultFadeTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetMeshFadeAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Character::GetMeshFadeAlpha()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetMeshFadeAlpha");

	AS3Character_GetMeshFadeAlpha_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetDoorActor
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AS3GimmickOpenDoor*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GimmickOpenDoor* AS3Character::GetDoorActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetDoorActor");

	AS3Character_GetDoorActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3Character::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.GetClothCharaName");

	AS3Character_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.DestroyCameraCollision
// (Event, Public, BlueprintEvent)

void AS3Character::DestroyCameraCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.DestroyCameraCollision");

	AS3Character_DestroyCameraCollision_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.DestroyBSCollision
// (Final, Native, Public, BlueprintCallable)

void AS3Character::DestroyBSCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.DestroyBSCollision");

	AS3Character_DestroyBSCollision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.CreateProceduralTalkCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InSides                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InCanTalkAngle                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InCanTalkRadius                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InHeight                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::CreateProceduralTalkCollision(int InSides, float InCanTalkAngle, float InCanTalkRadius, float InHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CreateProceduralTalkCollision");

	AS3Character_CreateProceduralTalkCollision_Params params;
	params.InSides = InSides;
	params.InCanTalkAngle = InCanTalkAngle;
	params.InCanTalkRadius = InCanTalkRadius;
	params.InHeight = InHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.CreateCameraCollision
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::CreateCameraCollision(float Radius, float HalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CreateCameraCollision");

	AS3Character_CreateCameraCollision_Params params;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.CreateBSCollision
// (Final, Native, Public, BlueprintCallable)

void AS3Character::CreateBSCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CreateBSCollision");

	AS3Character_CreateBSCollision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Character.CheckInRangePlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::CheckInRangePlayer(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CheckInRangePlayer");

	AS3Character_CheckInRangePlayer_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.CanDisableNPCTick
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::CanDisableNPCTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CanDisableNPCTick");

	AS3Character_CanDisableNPCTick_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.CalculateShoveVectorWithBones
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class AS3Character*            ShovedCharacter                (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutShove                       (Parm, OutParm, IsPlainOldData)
// float                          ExtraDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::CalculateShoveVectorWithBones(class AS3Character* ShovedCharacter, float ExtraDistance, struct FVector* OutShove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CalculateShoveVectorWithBones");

	AS3Character_CalculateShoveVectorWithBones_Params params;
	params.ShovedCharacter = ShovedCharacter;
	params.ExtraDistance = ExtraDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutShove != nullptr)
		*OutShove = params.OutShove;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.CalculateShoveVector
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class AS3Character*            ShovedCharacter                (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutShove                       (Parm, OutParm, IsPlainOldData)
// float                          ExtraDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Character::CalculateShoveVector(class AS3Character* ShovedCharacter, float ExtraDistance, struct FVector* OutShove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.CalculateShoveVector");

	AS3Character_CalculateShoveVector_Params params;
	params.ShovedCharacter = ShovedCharacter;
	params.ExtraDistance = ExtraDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutShove != nullptr)
		*OutShove = params.OutShove;

	return params.ReturnValue;
}


// Function Shenmue3.S3Character.AccelerateCharaFadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          MaxAlpha                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3Character::AccelerateCharaFadeOut(float MaxAlpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Character.AccelerateCharaFadeOut");

	AS3Character_AccelerateCharaFadeOut_Params params;
	params.MaxAlpha = MaxAlpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AnimationFunctionLibrary.LoadFaceAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   CharaTag                       (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshComponent*  SkeletalMeshComp               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class US3FaceAnimDataAsset*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3FaceAnimDataAsset* US3AnimationFunctionLibrary::STATIC_LoadFaceAnimation(const struct FName& CharaTag, class USkeletalMeshComponent* SkeletalMeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimationFunctionLibrary.LoadFaceAnimation");

	US3AnimationFunctionLibrary_LoadFaceAnimation_Params params;
	params.CharaTag = CharaTag;
	params.SkeletalMeshComp = SkeletalMeshComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnimCutsceneInstance.SetUpdateEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AnimCutsceneInstance::SetUpdateEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimCutsceneInstance.SetUpdateEnabled");

	US3AnimCutsceneInstance_SetUpdateEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AnimCutsceneInstance.SetEyeBlinkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AnimCutsceneInstance::SetEyeBlinkEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimCutsceneInstance.SetEyeBlinkEnabled");

	US3AnimCutsceneInstance_SetEyeBlinkEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AnimCutsceneInstance.SetClipperEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AnimCutsceneInstance::SetClipperEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimCutsceneInstance.SetClipperEnabled");

	US3AnimCutsceneInstance_SetClipperEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AnimCutsceneInstance.IsUpdateEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnimCutsceneInstance::IsUpdateEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimCutsceneInstance.IsUpdateEnabled");

	US3AnimCutsceneInstance_IsUpdateEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnimCutsceneInstance.IsEyeBlinkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnimCutsceneInstance::IsEyeBlinkEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimCutsceneInstance.IsEyeBlinkEnabled");

	US3AnimCutsceneInstance_IsEyeBlinkEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnimCutsceneInstance.IsClipperEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnimCutsceneInstance::IsClipperEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimCutsceneInstance.IsClipperEnabled");

	US3AnimCutsceneInstance_IsClipperEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnimInstance.IsReadyTalk
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AnimInstance::IsReadyTalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimInstance.IsReadyTalk");

	US3AnimInstance_IsReadyTalk_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AnimNotify_PlayAtomCue.PlaySoundEditor
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class USoundAtomCue*           Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         AttachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// class UAtomComponent*          ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAtomComponent* US3AnimNotify_PlayAtomCue::PlaySoundEditor(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AnimNotify_PlayAtomCue.PlaySoundEditor");

	US3AnimNotify_PlayAtomCue_PlaySoundEditor_Params params;
	params.Sound = Sound;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.AttenuationSettings = AttenuationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaFunctionLibrary.IsInValidStreamingArea
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AreaFunctionLibrary::STATIC_IsInValidStreamingArea(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaFunctionLibrary.IsInValidStreamingArea");

	US3AreaFunctionLibrary_IsInValidStreamingArea_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaFunctionLibrary.GetLevelEnum
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 LevelName                      (Parm, ZeroConstructor)
// bool                           Detail                         (Parm, ZeroConstructor, IsPlainOldData)
// ES3Where                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3Where US3AreaFunctionLibrary::STATIC_GetLevelEnum(const struct FString& LevelName, bool Detail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaFunctionLibrary.GetLevelEnum");

	US3AreaFunctionLibrary_GetLevelEnum_Params params;
	params.LevelName = LevelName;
	params.Detail = Detail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaFunctionLibrary.GetCurrentLevelEnum
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           Detail                         (Parm, ZeroConstructor, IsPlainOldData)
// ES3Where                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3Where US3AreaFunctionLibrary::STATIC_GetCurrentLevelEnum(class UObject* WorldContextObject, bool Detail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaFunctionLibrary.GetCurrentLevelEnum");

	US3AreaFunctionLibrary_GetCurrentLevelEnum_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Detail = Detail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaJumpBase.SetYesterdayPraceLocationRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 PlayerLocation                 (Parm, IsPlainOldData)
// struct FRotator                PlayerRotation                 (Parm, IsPlainOldData)

void US3AreaJumpBase::SetYesterdayPraceLocationRotation(const struct FVector& PlayerLocation, const struct FRotator& PlayerRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaJumpBase.SetYesterdayPraceLocationRotation");

	US3AreaJumpBase_SetYesterdayPraceLocationRotation_Params params;
	params.PlayerLocation = PlayerLocation;
	params.PlayerRotation = PlayerRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AreaJumpBase.SetIsJumpYesterdayPrace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsJump                         (Parm, ZeroConstructor, IsPlainOldData)

void US3AreaJumpBase::SetIsJumpYesterdayPrace(bool IsJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaJumpBase.SetIsJumpYesterdayPrace");

	US3AreaJumpBase_SetIsJumpYesterdayPrace_Params params;
	params.IsJump = IsJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AreaJumpBase.GetYesterdayRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator US3AreaJumpBase::GetYesterdayRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaJumpBase.GetYesterdayRotation");

	US3AreaJumpBase_GetYesterdayRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaJumpBase.GetYesterdayPraceLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3AreaJumpBase::GetYesterdayPraceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaJumpBase.GetYesterdayPraceLocation");

	US3AreaJumpBase_GetYesterdayPraceLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaJumpBase.GetIsJumpYesterdayPrace
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AreaJumpBase::GetIsJumpYesterdayPrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaJumpBase.GetIsJumpYesterdayPrace");

	US3AreaJumpBase_GetIsJumpYesterdayPrace_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaLightManagerComponent.GetCertainRangeSpotLightList
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, IsPlainOldData)
// float                          SphereRadius                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AS3SpotLight*>    OutSpotLightList               (Parm, OutParm, ZeroConstructor)

void US3AreaLightManagerComponent::GetCertainRangeSpotLightList(const struct FVector& WorldLocation, float SphereRadius, TArray<class AS3SpotLight*>* OutSpotLightList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaLightManagerComponent.GetCertainRangeSpotLightList");

	US3AreaLightManagerComponent_GetCertainRangeSpotLightList_Params params;
	params.WorldLocation = WorldLocation;
	params.SphereRadius = SphereRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSpotLightList != nullptr)
		*OutSpotLightList = params.OutSpotLightList;
}


// Function Shenmue3.S3AreaLightManagerComponent.GetCertainRangePointLightList
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, IsPlainOldData)
// float                          SphereRadius                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AS3PointLight*>   OutPointLightList              (Parm, OutParm, ZeroConstructor)

void US3AreaLightManagerComponent::GetCertainRangePointLightList(const struct FVector& WorldLocation, float SphereRadius, TArray<class AS3PointLight*>* OutPointLightList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaLightManagerComponent.GetCertainRangePointLightList");

	US3AreaLightManagerComponent_GetCertainRangePointLightList_Params params;
	params.WorldLocation = WorldLocation;
	params.SphereRadius = SphereRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPointLightList != nullptr)
		*OutPointLightList = params.OutPointLightList;
}


// Function Shenmue3.S3AreaLightManagerComponent.GetAreaSpotLightList
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, IsPlainOldData)
// TArray<class AS3SpotLight*>    OutSpotLightList               (Parm, OutParm, ZeroConstructor)

void US3AreaLightManagerComponent::GetAreaSpotLightList(const struct FVector& WorldLocation, TArray<class AS3SpotLight*>* OutSpotLightList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaLightManagerComponent.GetAreaSpotLightList");

	US3AreaLightManagerComponent_GetAreaSpotLightList_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSpotLightList != nullptr)
		*OutSpotLightList = params.OutSpotLightList;
}


// Function Shenmue3.S3AreaLightManagerComponent.GetAreaPointLightList
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, IsPlainOldData)
// TArray<class AS3PointLight*>   OutPointLightList              (Parm, OutParm, ZeroConstructor)

void US3AreaLightManagerComponent::GetAreaPointLightList(const struct FVector& WorldLocation, TArray<class AS3PointLight*>* OutPointLightList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaLightManagerComponent.GetAreaPointLightList");

	US3AreaLightManagerComponent_GetAreaPointLightList_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPointLightList != nullptr)
		*OutPointLightList = params.OutPointLightList;
}


// Function Shenmue3.S3AreaManager.S3UnloadLevels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           OverrideLevelNames             (Parm, ZeroConstructor)
// bool                           bAbsolute                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AreaManager::S3UnloadLevels(const struct FName& ID, TArray<struct FName> OverrideLevelNames, bool bAbsolute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.S3UnloadLevels");

	AS3AreaManager_S3UnloadLevels_Params params;
	params.ID = ID;
	params.OverrideLevelNames = OverrideLevelNames;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.S3LoadLevels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           LevelNames                     (Parm, ZeroConstructor)
// bool                           bDisableStreamingVolume        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVisibleAfterLoad              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AreaManager::S3LoadLevels(const struct FName& ID, TArray<struct FName> LevelNames, bool bDisableStreamingVolume, bool bVisibleAfterLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.S3LoadLevels");

	AS3AreaManager_S3LoadLevels_Params params;
	params.ID = ID;
	params.LevelNames = LevelNames;
	params.bDisableStreamingVolume = bDisableStreamingVolume;
	params.bVisibleAfterLoad = bVisibleAfterLoad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.IsTargetActorInBuilding
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bInBuilding                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUsePoint                      (Parm, ZeroConstructor, IsPlainOldData)
// class AS3BuildingStaticMeshActor* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3BuildingStaticMeshActor* AS3AreaManager::IsTargetActorInBuilding(class AActor* Actor, bool bUsePoint, bool* bInBuilding)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.IsTargetActorInBuilding");

	AS3AreaManager_IsTargetActorInBuilding_Params params;
	params.Actor = Actor;
	params.bUsePoint = bUsePoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bInBuilding != nullptr)
		*bInBuilding = params.bInBuilding;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.IsEnabledStreamingVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelStreaming*         Level                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AreaManager::IsEnabledStreamingVolume(class ULevelStreaming* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.IsEnabledStreamingVolume");

	AS3AreaManager_IsEnabledStreamingVolume_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.GetNeedLevels
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FName>           LevelNames                     (Parm, OutParm, ZeroConstructor)
// struct FVector                 Point                          (Parm, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AreaManager::GetNeedLevels(const struct FVector& Point, float SphereRadius, TArray<struct FName>* LevelNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.GetNeedLevels");

	AS3AreaManager_GetNeedLevels_Params params;
	params.Point = Point;
	params.SphereRadius = SphereRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelNames != nullptr)
		*LevelNames = params.LevelNames;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.GetAreaId
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Point                          (Parm, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDirectValue                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AS3AreaManager::GetAreaId(const struct FVector& Point, float SphereRadius, bool bDirectValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.GetAreaId");

	AS3AreaManager_GetAreaId_Params params;
	params.Point = Point;
	params.SphereRadius = SphereRadius;
	params.bDirectValue = bDirectValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.EnableStreamingVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3AreaManager::EnableStreamingVolume(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.EnableStreamingVolume");

	AS3AreaManager_EnableStreamingVolume_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AreaManager.DisableStreamingVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3AreaManager::DisableStreamingVolume(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.DisableStreamingVolume");

	AS3AreaManager_DisableStreamingVolume_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AreaManager.CanUnloadLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelStreaming*         Level                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AreaManager::CanUnloadLevel(class ULevelStreaming* Level, const struct FName& LevelName, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.CanUnloadLevel");

	AS3AreaManager_CanUnloadLevel_Params params;
	params.Level = Level;
	params.LevelName = LevelName;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.CanLoadLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelStreaming*         Level                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3AreaManager::CanLoadLevel(class ULevelStreaming* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.CanLoadLevel");

	AS3AreaManager_CanLoadLevel_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AreaManager.AddVolume
// (Final, Native, Public)
// Parameters:
// class AS3AreaVolume*           Volume                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3AreaManager::AddVolume(class AS3AreaVolume* Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaManager.AddVolume");

	AS3AreaManager_AddVolume_Params params;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AreaVolume.RegisterManager
// (Native, Public)

void AS3AreaVolume::RegisterManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AreaVolume.RegisterManager");

	AS3AreaVolume_RegisterManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AssetChunkManager.ShowInstallDialog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AssetChunkManager::ShowInstallDialog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AssetChunkManager.ShowInstallDialog");

	US3AssetChunkManager_ShowInstallDialog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AssetChunkManager.SetPendingLocationId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3Where                       LocationId                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            EventStep                      (Parm, ZeroConstructor, IsPlainOldData)

void US3AssetChunkManager::SetPendingLocationId(ES3Where LocationId, int EventStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AssetChunkManager.SetPendingLocationId");

	US3AssetChunkManager_SetPendingLocationId_Params params;
	params.LocationId = LocationId;
	params.EventStep = EventStep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AssetChunkManager.SetPendingChunkId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3AssetChunkId                ChunkId                        (Parm, ZeroConstructor, IsPlainOldData)

void US3AssetChunkManager::SetPendingChunkId(ES3AssetChunkId ChunkId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AssetChunkManager.SetPendingChunkId");

	US3AssetChunkManager_SetPendingChunkId_Params params;
	params.ChunkId = ChunkId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AssetChunkManager.IsChunkInstalled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3AssetChunkId                ChunkId                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AssetChunkManager::IsChunkInstalled(ES3AssetChunkId ChunkId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AssetChunkManager.IsChunkInstalled");

	US3AssetChunkManager_IsChunkInstalled_Params params;
	params.ChunkId = ChunkId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AssetChunkManager.GetChunkIdFromLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3Where                       LocationId                     (Parm, ZeroConstructor, IsPlainOldData)
// ES3AssetChunkId                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3AssetChunkId US3AssetChunkManager::GetChunkIdFromLocation(ES3Where LocationId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AssetChunkManager.GetChunkIdFromLocation");

	US3AssetChunkManager_GetChunkIdFromLocation_Params params;
	params.LocationId = LocationId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3AssetCullDistanceVolume.OnGraphicPresetChanged
// (Final, Native, Public)

void AS3AssetCullDistanceVolume::OnGraphicPresetChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AssetCullDistanceVolume.OnGraphicPresetChanged");

	AS3AssetCullDistanceVolume_OnGraphicPresetChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AttentionComponent.SetFinishedActionEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Finished                       (Parm, ZeroConstructor, IsPlainOldData)

void US3AttentionComponent::SetFinishedActionEvent(bool Finished)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AttentionComponent.SetFinishedActionEvent");

	US3AttentionComponent_SetFinishedActionEvent_Params params;
	params.Finished = Finished;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AttentionComponent.SetEnabledBackerEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Enabled                        (Parm, ZeroConstructor, IsPlainOldData)

void US3AttentionComponent::SetEnabledBackerEvent(bool Enabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AttentionComponent.SetEnabledBackerEvent");

	US3AttentionComponent_SetEnabledBackerEvent_Params params;
	params.Enabled = Enabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3AttentionComponent.GetEnabledBackerEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3AttentionComponent::GetEnabledBackerEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3AttentionComponent.GetEnabledBackerEvent");

	US3AttentionComponent_GetEnabledBackerEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleRallyManager.ShowRewardResult
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AS3BattleRallyManager::ShowRewardResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleRallyManager.ShowRewardResult");

	AS3BattleRallyManager_ShowRewardResult_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleRallyManager.ClearInventoryItems
// (Final, Native, Protected, BlueprintCallable)

void AS3BattleRallyManager::ClearInventoryItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleRallyManager.ClearInventoryItems");

	AS3BattleRallyManager_ClearInventoryItems_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleRallyManager.CheckRewardAnnouncement
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3BattleRallyManager::CheckRewardAnnouncement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleRallyManager.CheckRewardAnnouncement");

	AS3BattleRallyManager_CheckRewardAnnouncement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.SetSkillsForSet
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           SkillIds                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            SkillSetIndex                  (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetSkillsForSet(TArray<struct FName> SkillIds, int SkillSetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetSkillsForSet");

	US3BattleStatsManager_SetSkillsForSet_Params params;
	params.SkillIds = SkillIds;
	params.SkillSetIndex = SkillSetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetSkill
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SkillId                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            SkillSetIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            SkillIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetSkill(const struct FName& SkillId, int SkillSetIndex, int SkillIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetSkill");

	US3BattleStatsManager_SetSkill_Params params;
	params.SkillId = SkillId;
	params.SkillSetIndex = SkillSetIndex;
	params.SkillIndex = SkillIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetLevelBasedStatCalculation
// (Final, Native, Public, BlueprintCallable)

void US3BattleStatsManager::SetLevelBasedStatCalculation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetLevelBasedStatCalculation");

	US3BattleStatsManager_SetLevelBasedStatCalculation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetHealthRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetHealthRatio(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetHealthRatio");

	US3BattleStatsManager_SetHealthRatio_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetHealth(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetHealth");

	US3BattleStatsManager_SetHealth_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetFixedStatCalculation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FixedHealthRatio               (Parm, ZeroConstructor, IsPlainOldData)
// float                          FixedAttackBonus               (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetFixedStatCalculation(float FixedHealthRatio, float FixedAttackBonus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetFixedStatCalculation");

	US3BattleStatsManager_SetFixedStatCalculation_Params params;
	params.FixedHealthRatio = FixedHealthRatio;
	params.FixedAttackBonus = FixedAttackBonus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetDojoRank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Dojo                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Rank                           (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetDojoRank(const struct FName& Dojo, int Rank)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetDojoRank");

	US3BattleStatsManager_SetDojoRank_Params params;
	params.Dojo = Dojo;
	params.Rank = Rank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetDifficultySetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewDifficulty                  (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SetDifficultySetting(int NewDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetDifficultySetting");

	US3BattleStatsManager_SetDifficultySetting_Params params;
	params.NewDifficulty = NewDifficulty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SetBattleCharacterAsset
// (Final, Native, Public, BlueprintCallable)

void US3BattleStatsManager::SetBattleCharacterAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SetBattleCharacterAsset");

	US3BattleStatsManager_SetBattleCharacterAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.SelectSkillSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::SelectSkillSet(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.SelectSkillSet");

	US3BattleStatsManager_SelectSkillSet_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.IsMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BattleStatsManager::IsMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.IsMaxHealth");

	US3BattleStatsManager_IsMaxHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.IsAutoSkillSetSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BattleStatsManager::IsAutoSkillSetSelected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.IsAutoSkillSetSelected");

	US3BattleStatsManager_IsAutoSkillSetSelected_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.InitBlueprint
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BattleStatsManager::InitBlueprint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.InitBlueprint");

	US3BattleStatsManager_InitBlueprint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetVitalityLevelMan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3DerivedPlayerLevel*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3DerivedPlayerLevel* US3BattleStatsManager::GetVitalityLevelMan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetVitalityLevelMan");

	US3BattleStatsManager_GetVitalityLevelMan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetSkillExpMan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3PlayerExpCollection*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3PlayerExpCollection* US3BattleStatsManager::GetSkillExpMan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetSkillExpMan");

	US3BattleStatsManager_GetSkillExpMan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetSelectedSkillSetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BattleStatsManager::GetSelectedSkillSetIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetSelectedSkillSetIndex");

	US3BattleStatsManager_GetSelectedSkillSetIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetSelectedSkillSet
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           Skills                         (Parm, OutParm, ZeroConstructor)

void US3BattleStatsManager::GetSelectedSkillSet(TArray<struct FName>* Skills)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetSelectedSkillSet");

	US3BattleStatsManager_GetSelectedSkillSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Skills != nullptr)
		*Skills = params.Skills;
}


// Function Shenmue3.S3BattleStatsManager.GetPlayerLevelMan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3DerivedPlayerLevel*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3DerivedPlayerLevel* US3BattleStatsManager::GetPlayerLevelMan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetPlayerLevelMan");

	US3BattleStatsManager_GetPlayerLevelMan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetMaxHealthRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BattleStatsManager::GetMaxHealthRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetMaxHealthRatio");

	US3BattleStatsManager_GetMaxHealthRatio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BattleStatsManager::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetMaxHealth");

	US3BattleStatsManager_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetManualSkillSetCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BattleStatsManager::GetManualSkillSetCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetManualSkillSetCount");

	US3BattleStatsManager_GetManualSkillSetCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetKunFuExpMan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3PlayerExpCollection*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3PlayerExpCollection* US3BattleStatsManager::GetKunFuExpMan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetKunFuExpMan");

	US3BattleStatsManager_GetKunFuExpMan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetHealthRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BattleStatsManager::GetHealthRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetHealthRatio");

	US3BattleStatsManager_GetHealthRatio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BattleStatsManager::GetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetHealth");

	US3BattleStatsManager_GetHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3BattleStatsManager::GetGameInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetGameInstance");

	US3BattleStatsManager_GetGameInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetDojoRankIndex
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FName                   Dojo                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BattleStatsManager::GetDojoRankIndex(const struct FName& Dojo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetDojoRankIndex");

	US3BattleStatsManager_GetDojoRankIndex_Params params;
	params.Dojo = Dojo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetDojoRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   Dojo                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BattleStatsManager::GetDojoRank(const struct FName& Dojo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetDojoRank");

	US3BattleStatsManager_GetDojoRank_Params params;
	params.Dojo = Dojo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetDifficultySetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BattleStatsManager::GetDifficultySetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetDifficultySetting");

	US3BattleStatsManager_GetDifficultySetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetBattleCharacterAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)

void US3BattleStatsManager::GetBattleCharacterAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetBattleCharacterAsset");

	US3BattleStatsManager_GetBattleCharacterAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.GetBaseMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BattleStatsManager::GetBaseMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetBaseMaxHealth");

	US3BattleStatsManager_GetBaseMaxHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetAttackLevelMan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3DerivedPlayerLevel*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3DerivedPlayerLevel* US3BattleStatsManager::GetAttackLevelMan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetAttackLevelMan");

	US3BattleStatsManager_GetAttackLevelMan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.GetAttackBonus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BattleStatsManager::GetAttackBonus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.GetAttackBonus");

	US3BattleStatsManager_GetAttackBonus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BattleStatsManager.Debug_SetVitalityLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            TargetLevel                    (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::Debug_SetVitalityLevel(int TargetLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.Debug_SetVitalityLevel");

	US3BattleStatsManager_Debug_SetVitalityLevel_Params params;
	params.TargetLevel = TargetLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.Debug_SetPlayerLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            TargetLevel                    (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::Debug_SetPlayerLevel(int TargetLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.Debug_SetPlayerLevel");

	US3BattleStatsManager_Debug_SetPlayerLevel_Params params;
	params.TargetLevel = TargetLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BattleStatsManager.Debug_SetAttackLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            TargetLevel                    (Parm, ZeroConstructor, IsPlainOldData)

void US3BattleStatsManager::Debug_SetAttackLevel(int TargetLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BattleStatsManager.Debug_SetAttackLevel");

	US3BattleStatsManager_Debug_SetAttackLevel_Params params;
	params.TargetLevel = TargetLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BellTowerGimmick.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3BellTowerGimmick::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BellTowerGimmick.GetClothCharaName");

	AS3BellTowerGimmick_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BgmArea.OnActorEndOverlapImpl
// (Final, Native, Public)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmArea::OnActorEndOverlapImpl(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmArea.OnActorEndOverlapImpl");

	AS3BgmArea_OnActorEndOverlapImpl_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmArea.OnActorBeginOverlapImpl
// (Final, Native, Public)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmArea::OnActorBeginOverlapImpl(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmArea.OnActorBeginOverlapImpl");

	AS3BgmArea_OnActorBeginOverlapImpl_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmArea.GetSourceInfo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS3BgmAreaSourceInfo    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3BgmAreaSourceInfo AS3BgmArea::GetSourceInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmArea.GetSourceInfo");

	AS3BgmArea_GetSourceInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BgmManager.Stop
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3BgmManager::Stop(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.Stop");

	AS3BgmManager_Stop_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BgmManager.SetTalkVolume
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmManager::SetTalkVolume(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.SetTalkVolume");

	AS3BgmManager_SetTalkVolume_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.SetDisableFadePause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDisable                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmManager::SetDisableFadePause(bool bDisable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.SetDisableFadePause");

	AS3BgmManager_SetDisableFadePause_Params params;
	params.bDisable = bDisable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.Restart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3BgmManager::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.Restart");

	AS3BgmManager_Restart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.PlayFromPlayer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3BgmPlayer*            BgmPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmManager::PlayFromPlayer(class AS3BgmPlayer* BgmPlayer, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.PlayFromPlayer");

	AS3BgmManager_PlayFromPlayer_Params params;
	params.BgmPlayer = BgmPlayer;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.PlayFromCue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                 Cue                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// EBgmPriority                   Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AutoDestroy                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class AS3BgmPlayer*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3BgmPlayer* AS3BgmManager::PlayFromCue(class UObject* Cue, const struct FName& ID, EBgmPriority Priority, bool AutoDestroy, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.PlayFromCue");

	AS3BgmManager_PlayFromCue_Params params;
	params.Cue = Cue;
	params.ID = ID;
	params.Priority = Priority;
	params.AutoDestroy = AutoDestroy;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BgmManager.Pause
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3BgmManager::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.Pause");

	AS3BgmManager_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.OnEndTouchArea
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AS3BgmArea*              AreaActor                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmManager::OnEndTouchArea(class AS3BgmArea* AreaActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.OnEndTouchArea");

	AS3BgmManager_OnEndTouchArea_Params params;
	params.AreaActor = AreaActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.OnBeginTouchArea
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3BgmArea*              AreaActor                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmManager::OnBeginTouchArea(class AS3BgmArea* AreaActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.OnBeginTouchArea");

	AS3BgmManager_OnBeginTouchArea_Params params;
	params.AreaActor = AreaActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BgmManager.OnAreaBgmChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3BgmArea*              area                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3BgmManager::OnAreaBgmChanged(class AS3BgmArea* area)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BgmManager.OnAreaBgmChanged");

	AS3BgmManager_OnAreaBgmChanged_Params params;
	params.area = area;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_text
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FText>           arg                            (ConstParm, Parm, ZeroConstructor)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           opt                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FText>           resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_text(TArray<struct FText> arg, bool dsc, bool opt, TArray<struct FText>* resAr, TArray<int>* resId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_text");

	US3BlueprintFunctionLibrary_ZSortArr_text_Params params;
	params.arg = arg;
	params.dsc = dsc;
	params.opt = opt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_string
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FString>         arg                            (ConstParm, Parm, ZeroConstructor)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           opt                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FString>         resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_string(TArray<struct FString> arg, bool dsc, bool opt, TArray<struct FString>* resAr, TArray<int>* resId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_string");

	US3BlueprintFunctionLibrary_ZSortArr_string_Params params;
	params.arg = arg;
	params.dsc = dsc;
	params.opt = opt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_object
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UObject*>         arg                            (ConstParm, Parm, ZeroConstructor)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UObject*>         resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_object(TArray<class UObject*> arg, bool dsc, TArray<class UObject*>* resAr, TArray<int>* resId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_object");

	US3BlueprintFunctionLibrary_ZSortArr_object_Params params;
	params.arg = arg;
	params.dsc = dsc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_name
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FName>           arg                            (ConstParm, Parm, ZeroConstructor)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_name(TArray<struct FName> arg, bool dsc, TArray<struct FName>* resAr, TArray<int>* resId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_name");

	US3BlueprintFunctionLibrary_ZSortArr_name_Params params;
	params.arg = arg;
	params.dsc = dsc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_locate
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>         arg                            (ConstParm, Parm, ZeroConstructor)
// struct FVector                 Loc                            (ConstParm, Parm, IsPlainOldData)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)
// TArray<float>                  resDs                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_locate(TArray<struct FVector> arg, const struct FVector& Loc, bool dsc, TArray<struct FVector>* resAr, TArray<int>* resId, TArray<float>* resDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_locate");

	US3BlueprintFunctionLibrary_ZSortArr_locate_Params params;
	params.arg = arg;
	params.Loc = Loc;
	params.dsc = dsc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
	if (resDs != nullptr)
		*resDs = params.resDs;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_int
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    arg                            (ConstParm, Parm, ZeroConstructor)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_int(TArray<int> arg, bool dsc, TArray<int>* resAr, TArray<int>* resId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_int");

	US3BlueprintFunctionLibrary_ZSortArr_int_Params params;
	params.arg = arg;
	params.dsc = dsc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_float
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  arg                            (ConstParm, Parm, ZeroConstructor)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<float>                  resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_float(TArray<float> arg, bool dsc, TArray<float>* resAr, TArray<int>* resId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_float");

	US3BlueprintFunctionLibrary_ZSortArr_float_Params params;
	params.arg = arg;
	params.dsc = dsc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_actorLocate
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class AActor*>          arg                            (ConstParm, Parm, ZeroConstructor)
// class AActor*                  Loc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           dsc                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          resAr                          (Parm, OutParm, ZeroConstructor)
// TArray<int>                    resId                          (Parm, OutParm, ZeroConstructor)
// TArray<float>                  resDs                          (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_ZSortArr_actorLocate(TArray<class AActor*> arg, class AActor* Loc, bool dsc, TArray<class AActor*>* resAr, TArray<int>* resId, TArray<float>* resDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZSortArr_actorLocate");

	US3BlueprintFunctionLibrary_ZSortArr_actorLocate_Params params;
	params.arg = arg;
	params.Loc = Loc;
	params.dsc = dsc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resAr != nullptr)
		*resAr = params.resAr;
	if (resId != nullptr)
		*resId = params.resId;
	if (resDs != nullptr)
		*resDs = params.resDs;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ZArrayFindMaxValue_int
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    arr                            (ConstParm, Parm, ZeroConstructor)
// int                            Index                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_ZArrayFindMaxValue_int(TArray<int> arr, int* Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ZArrayFindMaxValue_int");

	US3BlueprintFunctionLibrary_ZArrayFindMaxValue_int_Params params;
	params.arr = arr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.UpdateTextureStreamingStatus
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_UpdateTextureStreamingStatus(class UPrimitiveComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.UpdateTextureStreamingStatus");

	US3BlueprintFunctionLibrary_UpdateTextureStreamingStatus_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.UpdateTextureStreaming
// (Final, Native, Static, Public, BlueprintCallable)

void US3BlueprintFunctionLibrary::STATIC_UpdateTextureStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.UpdateTextureStreaming");

	US3BlueprintFunctionLibrary_UpdateTextureStreaming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.UpdateCaptureSceneDeferred
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D* Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_UpdateCaptureSceneDeferred(class USceneCaptureComponent2D* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.UpdateCaptureSceneDeferred");

	US3BlueprintFunctionLibrary_UpdateCaptureSceneDeferred_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.TryReimport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Obj                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNotification                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_TryReimport(class UObject* Obj, bool bNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.TryReimport");

	US3BlueprintFunctionLibrary_TryReimport_Params params;
	params.Obj = Obj;
	params.bNotification = bNotification;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.TestComponentOverlapComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     PrimitiveA                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UPrimitiveComponent*     PrimitiveB                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_TestComponentOverlapComponent(class UPrimitiveComponent* PrimitiveA, class UPrimitiveComponent* PrimitiveB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.TestComponentOverlapComponent");

	US3BlueprintFunctionLibrary_TestComponentOverlapComponent_Params params;
	params.PrimitiveA = PrimitiveA;
	params.PrimitiveB = PrimitiveB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.StreamOutTextureData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            RequiredMemorySize             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_StreamOutTextureData(int RequiredMemorySize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.StreamOutTextureData");

	US3BlueprintFunctionLibrary_StreamOutTextureData_Params params;
	params.RequiredMemorySize = RequiredMemorySize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SplineConvertInputKeyToDistance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        spline                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          InputKey                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_SplineConvertInputKeyToDistance(class USplineComponent* spline, float InputKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SplineConvertInputKeyToDistance");

	US3BlueprintFunctionLibrary_SplineConvertInputKeyToDistance_Params params;
	params.spline = spline;
	params.InputKey = InputKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetTextureForceResidentFlag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bForceMiplevelsToBeResident    (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetTextureForceResidentFlag(class USkeletalMeshComponent* Component, bool bForceMiplevelsToBeResident)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetTextureForceResidentFlag");

	US3BlueprintFunctionLibrary_SetTextureForceResidentFlag_Params params;
	params.Component = Component;
	params.bForceMiplevelsToBeResident = bForceMiplevelsToBeResident;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetStaticMeshMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMesh*             Mesh                           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaterialIndex                  (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetStaticMeshMaterial(class UObject* WorldContextObject, class UStaticMesh* Mesh, class UMaterialInterface* Material, int MaterialIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetStaticMeshMaterial");

	US3BlueprintFunctionLibrary_SetStaticMeshMaterial_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Mesh = Mesh;
	params.Material = Material;
	params.MaterialIndex = MaterialIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetSequenceToMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimSequenceBase*       AnimSequence                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Section                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_SetSequenceToMontage(class UAnimMontage* AnimMontage, class UAnimSequenceBase* AnimSequence, const struct FName& Section, const struct FName& SlotName, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetSequenceToMontage");

	US3BlueprintFunctionLibrary_SetSequenceToMontage_Params params;
	params.AnimMontage = AnimMontage;
	params.AnimSequence = AnimSequence;
	params.Section = Section;
	params.SlotName = SlotName;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessShadowsGamma
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessShadowsGamma(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessShadowsGamma");

	US3BlueprintFunctionLibrary_SetPostProcessShadowsGamma_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessShadowsGain
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessShadowsGain(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessShadowsGain");

	US3BlueprintFunctionLibrary_SetPostProcessShadowsGain_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessShadowsContrast
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessShadowsContrast(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessShadowsContrast");

	US3BlueprintFunctionLibrary_SetPostProcessShadowsContrast_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalSaturation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessGlobalSaturation(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalSaturation");

	US3BlueprintFunctionLibrary_SetPostProcessGlobalSaturation_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalGamma
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessGlobalGamma(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalGamma");

	US3BlueprintFunctionLibrary_SetPostProcessGlobalGamma_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalGain
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessGlobalGain(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalGain");

	US3BlueprintFunctionLibrary_SetPostProcessGlobalGain_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalContrast
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPostProcessSettings    Settings                       (Parm)
// struct FVector4                Value                          (Parm, IsPlainOldData)
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings US3BlueprintFunctionLibrary::STATIC_SetPostProcessGlobalContrast(const struct FPostProcessSettings& Settings, const struct FVector4& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetPostProcessGlobalContrast");

	US3BlueprintFunctionLibrary_SetPostProcessGlobalContrast_Params params;
	params.Settings = Settings;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetMobility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            NewMobility                    (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetMobility(class UPrimitiveComponent* Component, int NewMobility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetMobility");

	US3BlueprintFunctionLibrary_SetMobility_Params params;
	params.Component = Component;
	params.NewMobility = NewMobility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetIntParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetIntParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, int NewValue, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetIntParameterValue");

	US3BlueprintFunctionLibrary_SetIntParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetInputPriority
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewPriority                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_SetInputPriority(class AActor* Actor, int NewPriority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetInputPriority");

	US3BlueprintFunctionLibrary_SetInputPriority_Params params;
	params.Actor = Actor;
	params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetForceMipStreaming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bNewStreaming                  (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetForceMipStreaming(class UPrimitiveComponent* Component, bool bNewStreaming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetForceMipStreaming");

	US3BlueprintFunctionLibrary_SetForceMipStreaming_Params params;
	params.Component = Component;
	params.bNewStreaming = bNewStreaming;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetFloatParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetFloatParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, float NewValue, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetFloatParameterValue");

	US3BlueprintFunctionLibrary_SetFloatParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetDisableWorldRendering
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDisabled                      (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetDisableWorldRendering(class UObject* WorldContextObject, bool bDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetDisableWorldRendering");

	US3BlueprintFunctionLibrary_SetDisableWorldRendering_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetDisableClothSimulation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bDisableClothSimulation        (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetDisableClothSimulation(class USkeletalMeshComponent* Mesh, bool bDisableClothSimulation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetDisableClothSimulation");

	US3BlueprintFunctionLibrary_SetDisableClothSimulation_Params params;
	params.Mesh = Mesh;
	params.bDisableClothSimulation = bDisableClothSimulation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetDisableAnsel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDisabled                      (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetDisableAnsel(class UObject* WorldContextObject, bool bDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetDisableAnsel");

	US3BlueprintFunctionLibrary_SetDisableAnsel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetDecalFadeScreenSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDecalComponent*         DecalComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          NewFadeScreenSize              (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetDecalFadeScreenSize(class UDecalComponent* DecalComponent, float NewFadeScreenSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetDecalFadeScreenSize");

	US3BlueprintFunctionLibrary_SetDecalFadeScreenSize_Params params;
	params.DecalComponent = DecalComponent;
	params.NewFadeScreenSize = NewFadeScreenSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetCanEverAffectNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bRelevant                      (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetCanEverAffectNavigation(class UActorComponent* Component, bool bRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetCanEverAffectNavigation");

	US3BlueprintFunctionLibrary_SetCanEverAffectNavigation_Params params;
	params.Component = Component;
	params.bRelevant = bRelevant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetByteParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewValue                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetByteParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, unsigned char NewValue, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetByteParameterValue");

	US3BlueprintFunctionLibrary_SetByteParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SetBoolParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_SetBoolParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, bool bNewValue, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SetBoolParameterValue");

	US3BlueprintFunctionLibrary_SetBoolParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.SaveStringToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 SaveText                       (Parm, ZeroConstructor)
// struct FString                 Filename                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_SaveStringToFile(const struct FString& SaveText, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.SaveStringToFile");

	US3BlueprintFunctionLibrary_SaveStringToFile_Params params;
	params.SaveText = SaveText;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.RunShaderTest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  RenderTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                InputTexture                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            HalfWidth                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Sigma                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_RunShaderTest(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture* InputTexture, int HalfWidth, float Sigma, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.RunShaderTest");

	US3BlueprintFunctionLibrary_RunShaderTest_Params params;
	params.WorldContextObject = WorldContextObject;
	params.RenderTarget = RenderTarget;
	params.InputTexture = InputTexture;
	params.HalfWidth = HalfWidth;
	params.Sigma = Sigma;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ResetMatineeTimeDilation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_ResetMatineeTimeDilation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ResetMatineeTimeDilation");

	US3BlueprintFunctionLibrary_ResetMatineeTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.RenderMaterialTile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  InRenderTarget                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFrontView                     (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_RenderMaterialTile(class UObject* WorldContext, class UMaterialInterface* InMaterial, class UTextureRenderTarget2D* InRenderTarget, bool bFrontView)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.RenderMaterialTile");

	US3BlueprintFunctionLibrary_RenderMaterialTile_Params params;
	params.WorldContext = WorldContext;
	params.InMaterial = InMaterial;
	params.InRenderTarget = InRenderTarget;
	params.bFrontView = bFrontView;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.PrintS3Warning
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_PrintS3Warning(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.PrintS3Warning");

	US3BlueprintFunctionLibrary_PrintS3Warning_Params params;
	params.inString = inString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.PrintS3Error
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_PrintS3Error(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.PrintS3Error");

	US3BlueprintFunctionLibrary_PrintS3Error_Params params;
	params.inString = inString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.PlaySound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class USoundAtomCue*           Sound                          (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_PlaySound(class UObject* WorldContextObject, class USoundAtomCue* Sound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.PlaySound");

	US3BlueprintFunctionLibrary_PlaySound_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.MakeInputActionKeyMapping
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ActionName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FKey                    Key                            (Parm)
// bool                           bShift                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCtrl                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlt                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCmd                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FInputActionKeyMapping  Action                         (Parm, OutParm)

void US3BlueprintFunctionLibrary::STATIC_MakeInputActionKeyMapping(const struct FName& ActionName, const struct FKey& Key, bool bShift, bool bCtrl, bool bAlt, bool bCmd, struct FInputActionKeyMapping* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.MakeInputActionKeyMapping");

	US3BlueprintFunctionLibrary_MakeInputActionKeyMapping_Params params;
	params.ActionName = ActionName;
	params.Key = Key;
	params.bShift = bShift;
	params.bCtrl = bCtrl;
	params.bAlt = bAlt;
	params.bCmd = bCmd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Action != nullptr)
		*Action = params.Action;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.MakeAssetId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Asset                          (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_MakeAssetId(class UObject* Asset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.MakeAssetId");

	US3BlueprintFunctionLibrary_MakeAssetId_Params params;
	params.Asset = Asset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.MakeAssetClassId
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  AssetClass                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_MakeAssetClassId(class UClass* AssetClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.MakeAssetClassId");

	US3BlueprintFunctionLibrary_MakeAssetClassId_Params params;
	params.AssetClass = AssetClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.LoadObject
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ObjectClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Path                           (Parm, ZeroConstructor)
// class UObject*                 OutObject                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_LoadObject(class UObject* Target, class UClass* ObjectClass, const struct FString& Path, class UObject** OutObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.LoadObject");

	US3BlueprintFunctionLibrary_LoadObject_Params params;
	params.Target = Target;
	params.ObjectClass = ObjectClass;
	params.Path = Path;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutObject != nullptr)
		*OutObject = params.OutObject;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.LoadAssetSync
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* US3BlueprintFunctionLibrary::STATIC_LoadAssetSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.LoadAssetSync");

	US3BlueprintFunctionLibrary_LoadAssetSync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.LoadAssetClassSync
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* US3BlueprintFunctionLibrary::STATIC_LoadAssetClassSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.LoadAssetClassSync");

	US3BlueprintFunctionLibrary_LoadAssetClassSync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.IsStreamingLevelAlwaysLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_IsStreamingLevelAlwaysLoaded(class UObject* WorldContextObject, const struct FName& LevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.IsStreamingLevelAlwaysLoaded");

	US3BlueprintFunctionLibrary_IsStreamingLevelAlwaysLoaded_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.IsInUseByLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_IsInUseByLevel(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.IsInUseByLevel");

	US3BlueprintFunctionLibrary_IsInUseByLevel_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.IsInRangeTimeEvent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3DayTimeEvent                CheckTime                      (Parm, ZeroConstructor, IsPlainOldData)
// ES3DayTimeEvent                StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// ES3DayTimeEvent                EndTime                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_IsInRangeTimeEvent(ES3DayTimeEvent CheckTime, ES3DayTimeEvent StartTime, ES3DayTimeEvent EndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.IsInRangeTimeEvent");

	US3BlueprintFunctionLibrary_IsInRangeTimeEvent_Params params;
	params.CheckTime = CheckTime;
	params.StartTime = StartTime;
	params.EndTime = EndTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.IsInRangeTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          CheckTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndTime                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_IsInRangeTime(float CheckTime, float StartTime, float EndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.IsInRangeTime");

	US3BlueprintFunctionLibrary_IsInRangeTime_Params params;
	params.CheckTime = CheckTime;
	params.StartTime = StartTime;
	params.EndTime = EndTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.IsCurrentAnimState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*           AnimInstance                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   MachineName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StateName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_IsCurrentAnimState(class UAnimInstance* AnimInstance, const struct FName& MachineName, const struct FName& StateName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.IsCurrentAnimState");

	US3BlueprintFunctionLibrary_IsCurrentAnimState_Params params;
	params.AnimInstance = AnimInstance;
	params.MachineName = MachineName;
	params.StateName = StateName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetWalkCycleInfo
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          StartMarkerA                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartMarkerB                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           OutPreviousMarkerIsA           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutTimeSincePreviousMarker     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutTimeToNextMarker            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetWalkCycleInfo(float StartMarkerA, float StartMarkerB, float Time, bool* OutPreviousMarkerIsA, float* OutTimeSincePreviousMarker, float* OutTimeToNextMarker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetWalkCycleInfo");

	US3BlueprintFunctionLibrary_GetWalkCycleInfo_Params params;
	params.StartMarkerA = StartMarkerA;
	params.StartMarkerB = StartMarkerB;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPreviousMarkerIsA != nullptr)
		*OutPreviousMarkerIsA = params.OutPreviousMarkerIsA;
	if (OutTimeSincePreviousMarker != nullptr)
		*OutTimeSincePreviousMarker = params.OutTimeSincePreviousMarker;
	if (OutTimeToNextMarker != nullptr)
		*OutTimeToNextMarker = params.OutTimeToNextMarker;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetVolumeMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAtomComponent*          Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetVolumeMultiplier(class UAtomComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetVolumeMultiplier");

	US3BlueprintFunctionLibrary_GetVolumeMultiplier_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetTimeForEvent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTimelineComponent*      Timeline                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FScriptDelegate         Event                          (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetTimeForEvent(class UTimelineComponent* Timeline, const struct FScriptDelegate& Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetTimeForEvent");

	US3BlueprintFunctionLibrary_GetTimeForEvent_Params params;
	params.Timeline = Timeline;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetStreamingVolumesForStreamingLevel
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class ALevelStreamingVolume*> StreamingVolumes               (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_GetStreamingVolumesForStreamingLevel(class UObject* WorldContextObject, const struct FName& LevelName, TArray<class ALevelStreamingVolume*>* StreamingVolumes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetStreamingVolumesForStreamingLevel");

	US3BlueprintFunctionLibrary_GetStreamingVolumesForStreamingLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StreamingVolumes != nullptr)
		*StreamingVolumes = params.StreamingVolumes;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetStaticSwitchParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bExist                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bValue                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetStaticSwitchParameterValue(class UObject* WorldContextObject, class UMaterialInterface* Material, const struct FName& ParameterName, bool* bExist, bool* bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetStaticSwitchParameterValue");

	US3BlueprintFunctionLibrary_GetStaticSwitchParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Material = Material;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bExist != nullptr)
		*bExist = params.bExist;
	if (bValue != nullptr)
		*bValue = params.bValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetSequenceFromMontage
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Section                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeInAnimation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UAnimSequenceBase*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequenceBase* US3BlueprintFunctionLibrary::STATIC_GetSequenceFromMontage(class UAnimMontage* AnimMontage, const struct FName& Section, const struct FName& SlotName, float Time, float* TimeInAnimation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetSequenceFromMontage");

	US3BlueprintFunctionLibrary_GetSequenceFromMontage_Params params;
	params.AnimMontage = AnimMontage;
	params.Section = Section;
	params.SlotName = SlotName;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TimeInAnimation != nullptr)
		*TimeInAnimation = params.TimeInAnimation;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetResourceSizeDetail
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            DedicatedSystemMemoryBytes     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            SharedSystemMemoryBytes        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            DedicatedVideoMemoryBytes      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            SharedVideoMemoryBytes         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            UnknownMemoryBytes             (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetResourceSizeDetail(class UObject* Object, int* DedicatedSystemMemoryBytes, int* SharedSystemMemoryBytes, int* DedicatedVideoMemoryBytes, int* SharedVideoMemoryBytes, int* UnknownMemoryBytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetResourceSizeDetail");

	US3BlueprintFunctionLibrary_GetResourceSizeDetail_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DedicatedSystemMemoryBytes != nullptr)
		*DedicatedSystemMemoryBytes = params.DedicatedSystemMemoryBytes;
	if (SharedSystemMemoryBytes != nullptr)
		*SharedSystemMemoryBytes = params.SharedSystemMemoryBytes;
	if (DedicatedVideoMemoryBytes != nullptr)
		*DedicatedVideoMemoryBytes = params.DedicatedVideoMemoryBytes;
	if (SharedVideoMemoryBytes != nullptr)
		*SharedVideoMemoryBytes = params.SharedVideoMemoryBytes;
	if (UnknownMemoryBytes != nullptr)
		*UnknownMemoryBytes = params.UnknownMemoryBytes;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetResourceSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BlueprintFunctionLibrary::STATIC_GetResourceSize(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetResourceSize");

	US3BlueprintFunctionLibrary_GetResourceSize_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetProjectVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3BlueprintFunctionLibrary::STATIC_GetProjectVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetProjectVersion");

	US3BlueprintFunctionLibrary_GetProjectVersion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetPlaceLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* US3BlueprintFunctionLibrary::STATIC_GetPlaceLevel(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetPlaceLevel");

	US3BlueprintFunctionLibrary_GetPlaceLevel_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetMontageWeight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*           AnimInstance                   (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetMontageWeight(class UAnimInstance* AnimInstance, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetMontageWeight");

	US3BlueprintFunctionLibrary_GetMontageWeight_Params params;
	params.AnimInstance = AnimInstance;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetMontageSectionRange
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Section                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartSectionPosition           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          EndSectionPosition             (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetMontageSectionRange(class UAnimMontage* Montage, const struct FName& Section, float* StartSectionPosition, float* EndSectionPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetMontageSectionRange");

	US3BlueprintFunctionLibrary_GetMontageSectionRange_Params params;
	params.Montage = Montage;
	params.Section = Section;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StartSectionPosition != nullptr)
		*StartSectionPosition = params.StartSectionPosition;
	if (EndSectionPosition != nullptr)
		*EndSectionPosition = params.EndSectionPosition;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetMontageAnimMetaData
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UAnimMetaData*>   OutAnimMetaData                (ConstParm, Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_GetMontageAnimMetaData(class UAnimMontage* Montage, TArray<class UAnimMetaData*> OutAnimMetaData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetMontageAnimMetaData");

	US3BlueprintFunctionLibrary_GetMontageAnimMetaData_Params params;
	params.Montage = Montage;
	params.OutAnimMetaData = OutAnimMetaData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetLevelSequenceSubtitleLabels
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelSequence*          InLevelSequence                (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   EventName                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CharacterName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           OutLabels                      (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_GetLevelSequenceSubtitleLabels(class ULevelSequence* InLevelSequence, const struct FName& EventName, const struct FName& CharacterName, TArray<struct FName>* OutLabels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetLevelSequenceSubtitleLabels");

	US3BlueprintFunctionLibrary_GetLevelSequenceSubtitleLabels_Params params;
	params.InLevelSequence = InLevelSequence;
	params.EventName = EventName;
	params.CharacterName = CharacterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLabels != nullptr)
		*OutLabels = params.OutLabels;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetItemNamesFromEnum
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FText>           EnumItems                      (Parm, OutParm, ZeroConstructor)
// struct FString                 EnumName                       (ConstParm, Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_GetItemNamesFromEnum(const struct FString& EnumName, TArray<struct FText>* EnumItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetItemNamesFromEnum");

	US3BlueprintFunctionLibrary_GetItemNamesFromEnum_Params params;
	params.EnumName = EnumName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EnumItems != nullptr)
		*EnumItems = params.EnumItems;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetIntParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BlueprintFunctionLibrary::STATIC_GetIntParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetIntParameterValue");

	US3BlueprintFunctionLibrary_GetIntParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetIntParameterMinMaxFromClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UClass*                  WatchedObjectClass             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMin                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMax                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetIntParameterMinMaxFromClass(class UClass* WatchedObjectClass, const struct FName& PropertyName, bool* bHasParameter, bool* bHasMin, int* Min, bool* bHasMax, int* Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetIntParameterMinMaxFromClass");

	US3BlueprintFunctionLibrary_GetIntParameterMinMaxFromClass_Params params;
	params.WatchedObjectClass = WatchedObjectClass;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
	if (bHasMin != nullptr)
		*bHasMin = params.bHasMin;
	if (Min != nullptr)
		*Min = params.Min;
	if (bHasMax != nullptr)
		*bHasMax = params.bHasMax;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetIntParameterMinMax
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMin                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMax                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetIntParameterMinMax(class UObject* WatchedObject, const struct FName& PropertyName, bool* bHasParameter, bool* bHasMin, int* Min, bool* bHasMax, int* Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetIntParameterMinMax");

	US3BlueprintFunctionLibrary_GetIntParameterMinMax_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
	if (bHasMin != nullptr)
		*bHasMin = params.bHasMin;
	if (Min != nullptr)
		*Min = params.Min;
	if (bHasMax != nullptr)
		*bHasMax = params.bHasMax;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetInputPriority
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BlueprintFunctionLibrary::STATIC_GetInputPriority(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetInputPriority");

	US3BlueprintFunctionLibrary_GetInputPriority_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetFloatParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetFloatParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetFloatParameterValue");

	US3BlueprintFunctionLibrary_GetFloatParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetFloatParameterMinMaxFromClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UClass*                  WatchedObjectClass             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMin                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMax                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetFloatParameterMinMaxFromClass(class UClass* WatchedObjectClass, const struct FName& PropertyName, bool* bHasParameter, bool* bHasMin, float* Min, bool* bHasMax, float* Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetFloatParameterMinMaxFromClass");

	US3BlueprintFunctionLibrary_GetFloatParameterMinMaxFromClass_Params params;
	params.WatchedObjectClass = WatchedObjectClass;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
	if (bHasMin != nullptr)
		*bHasMin = params.bHasMin;
	if (Min != nullptr)
		*Min = params.Min;
	if (bHasMax != nullptr)
		*bHasMax = params.bHasMax;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetFloatParameterMinMax
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMin                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHasMax                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_GetFloatParameterMinMax(class UObject* WatchedObject, const struct FName& PropertyName, bool* bHasParameter, bool* bHasMin, float* Min, bool* bHasMax, float* Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetFloatParameterMinMax");

	US3BlueprintFunctionLibrary_GetFloatParameterMinMax_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;
	if (bHasMin != nullptr)
		*bHasMin = params.bHasMin;
	if (Min != nullptr)
		*Min = params.Min;
	if (bHasMax != nullptr)
		*bHasMax = params.bHasMax;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.getDistance
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 v1                             (ConstParm, Parm, IsPlainOldData)
// struct FVector                 v2                             (ConstParm, Parm, IsPlainOldData)
// bool                           sw                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_getDistance(const struct FVector& v1, const struct FVector& v2, bool sw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.getDistance");

	US3BlueprintFunctionLibrary_getDistance_Params params;
	params.v1 = v1;
	params.v2 = v2;
	params.sw = sw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetCopyrightNotice
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3BlueprintFunctionLibrary::STATIC_GetCopyrightNotice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetCopyrightNotice");

	US3BlueprintFunctionLibrary_GetCopyrightNotice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetByteParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char US3BlueprintFunctionLibrary::STATIC_GetByteParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetByteParameterValue");

	US3BlueprintFunctionLibrary_GetByteParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetBoolParameterValue
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WatchedObject                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasParameter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_GetBoolParameterValue(class UObject* WatchedObject, const struct FName& PropertyName, bool* bHasParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetBoolParameterValue");

	US3BlueprintFunctionLibrary_GetBoolParameterValue_Params params;
	params.WatchedObject = WatchedObject;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bHasParameter != nullptr)
		*bHasParameter = params.bHasParameter;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneTransformFromSequence
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkelMesh                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       AnimSequence                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERelativeTransformSpace> Space                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bExtractRootMotion             (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              OutTransform                   (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_GetBoneTransformFromSequence(class USkeletalMeshComponent* SkelMesh, class UAnimSequenceBase* AnimSequence, const struct FName& BoneName, float Time, TEnumAsByte<ERelativeTransformSpace> Space, bool bExtractRootMotion, struct FTransform* OutTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneTransformFromSequence");

	US3BlueprintFunctionLibrary_GetBoneTransformFromSequence_Params params;
	params.SkelMesh = SkelMesh;
	params.AnimSequence = AnimSequence;
	params.BoneName = BoneName;
	params.Time = Time;
	params.Space = Space;
	params.bExtractRootMotion = bExtractRootMotion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTransform != nullptr)
		*OutTransform = params.OutTransform;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneTransformFromMontage
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkelMesh                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Section                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERelativeTransformSpace> Space                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              OutTransform                   (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_GetBoneTransformFromMontage(class USkeletalMeshComponent* SkelMesh, class UAnimMontage* AnimMontage, const struct FName& Section, const struct FName& SlotName, const struct FName& BoneName, float Time, TEnumAsByte<ERelativeTransformSpace> Space, struct FTransform* OutTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneTransformFromMontage");

	US3BlueprintFunctionLibrary_GetBoneTransformFromMontage_Params params;
	params.SkelMesh = SkelMesh;
	params.AnimMontage = AnimMontage;
	params.Section = Section;
	params.SlotName = SlotName;
	params.BoneName = BoneName;
	params.Time = Time;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTransform != nullptr)
		*OutTransform = params.OutTransform;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       Space                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator US3BlueprintFunctionLibrary::STATIC_GetBoneRotation(class USkeletalMeshComponent* Mesh, const struct FName& BoneName, TEnumAsByte<EBoneSpaces> Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneRotation");

	US3BlueprintFunctionLibrary_GetBoneRotation_Params params;
	params.Mesh = Mesh;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       Space                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3BlueprintFunctionLibrary::STATIC_GetBoneLocation(class USkeletalMeshComponent* Mesh, const struct FName& BoneName, TEnumAsByte<EBoneSpaces> Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetBoneLocation");

	US3BlueprintFunctionLibrary_GetBoneLocation_Params params;
	params.Mesh = Mesh;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAttachedActorsOfClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  AttachParent                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_GetAttachedActorsOfClass(class AActor* AttachParent, class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAttachedActorsOfClass");

	US3BlueprintFunctionLibrary_GetAttachedActorsOfClass_Params params;
	params.AttachParent = AttachParent;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAttachedActorOfClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  AttachParent                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* US3BlueprintFunctionLibrary::STATIC_GetAttachedActorOfClass(class AActor* AttachParent, class UClass* ActorClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAttachedActorOfClass");

	US3BlueprintFunctionLibrary_GetAttachedActorOfClass_Params params;
	params.AttachParent = AttachParent;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAssetUserDataCharaScale
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*           Mesh                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3BlueprintFunctionLibrary::STATIC_GetAssetUserDataCharaScale(class USkeletalMesh* Mesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAssetUserDataCharaScale");

	US3BlueprintFunctionLibrary_GetAssetUserDataCharaScale_Params params;
	params.Mesh = Mesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAnimTimeFraction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*           AnimInstance                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   MachineName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StateName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetAnimTimeFraction(class UAnimInstance* AnimInstance, const struct FName& MachineName, const struct FName& StateName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAnimTimeFraction");

	US3BlueprintFunctionLibrary_GetAnimTimeFraction_Params params;
	params.AnimInstance = AnimInstance;
	params.MachineName = MachineName;
	params.StateName = StateName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAnimTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*           AnimInstance                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   MachineName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StateName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetAnimTime(class UAnimInstance* AnimInstance, const struct FName& MachineName, const struct FName& StateName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAnimTime");

	US3BlueprintFunctionLibrary_GetAnimTime_Params params;
	params.AnimInstance = AnimInstance;
	params.MachineName = MachineName;
	params.StateName = StateName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAnimLength
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*           AnimInstance                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   MachineName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StateName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3BlueprintFunctionLibrary::STATIC_GetAnimLength(class UAnimInstance* AnimInstance, const struct FName& MachineName, const struct FName& StateName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAnimLength");

	US3BlueprintFunctionLibrary_GetAnimLength_Params params;
	params.AnimInstance = AnimInstance;
	params.MachineName = MachineName;
	params.StateName = StateName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetAllActorsByLevelName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_GetAllActorsByLevelName(class UObject* WorldContextObject, const struct FName& PackageName, class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetAllActorsByLevelName");

	US3BlueprintFunctionLibrary_GetAllActorsByLevelName_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetActorsOfClassFromArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          InActors                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void US3BlueprintFunctionLibrary::STATIC_GetActorsOfClassFromArray(TArray<class AActor*> InActors, class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetActorsOfClassFromArray");

	US3BlueprintFunctionLibrary_GetActorsOfClassFromArray_Params params;
	params.InActors = InActors;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.GetActorOfClassFromArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          InActors                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* US3BlueprintFunctionLibrary::STATIC_GetActorOfClassFromArray(TArray<class AActor*> InActors, class UClass* ActorClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.GetActorOfClassFromArray");

	US3BlueprintFunctionLibrary_GetActorOfClassFromArray_Params params;
	params.InActors = InActors;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateSkylightComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_ForceUpdateSkylightComponents(class UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateSkylightComponents");

	US3BlueprintFunctionLibrary_ForceUpdateSkylightComponents_Params params;
	params.WorldContext = WorldContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateOverlaps
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_ForceUpdateOverlaps(class USceneComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateOverlaps");

	US3BlueprintFunctionLibrary_ForceUpdateOverlaps_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateAnimDynamics
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            LoopCount                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          LoopDeltaTime                  (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_ForceUpdateAnimDynamics(class USkeletalMeshComponent* Mesh, bool bReset, int LoopCount, float LoopDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateAnimDynamics");

	US3BlueprintFunctionLibrary_ForceUpdateAnimDynamics_Params params;
	params.Mesh = Mesh;
	params.bReset = bReset;
	params.LoopCount = LoopCount;
	params.LoopDeltaTime = LoopDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_ForceUpdateAnimation(class USkeletalMeshComponent* Mesh, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ForceUpdateAnimation");

	US3BlueprintFunctionLibrary_ForceUpdateAnimation_Params params;
	params.Mesh = Mesh;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.FilterAnalogInputEvent
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent       Input                          (ConstParm, Parm)
// struct FKey                    Filter                         (ConstParm, Parm)
// float                          Value                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_FilterAnalogInputEvent(const struct FAnalogInputEvent& Input, const struct FKey& Filter, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.FilterAnalogInputEvent");

	US3BlueprintFunctionLibrary_FilterAnalogInputEvent_Params params;
	params.Input = Input;
	params.Filter = Filter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ExtractSequenceRootMotionFromTrackRange
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*           Sequence                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTrackPosition             (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndTrackPosition               (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3BlueprintFunctionLibrary::STATIC_ExtractSequenceRootMotionFromTrackRange(class UAnimSequence* Sequence, float StartTrackPosition, float EndTrackPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ExtractSequenceRootMotionFromTrackRange");

	US3BlueprintFunctionLibrary_ExtractSequenceRootMotionFromTrackRange_Params params;
	params.Sequence = Sequence;
	params.StartTrackPosition = StartTrackPosition;
	params.EndTrackPosition = EndTrackPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.ExtractMontageRootMotionFromTrackRange
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTrackPosition             (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndTrackPosition               (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3BlueprintFunctionLibrary::STATIC_ExtractMontageRootMotionFromTrackRange(class UAnimMontage* Montage, float StartTrackPosition, float EndTrackPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.ExtractMontageRootMotionFromTrackRange");

	US3BlueprintFunctionLibrary_ExtractMontageRootMotionFromTrackRange_Params params;
	params.Montage = Montage;
	params.StartTrackPosition = StartTrackPosition;
	params.EndTrackPosition = EndTrackPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.DrawBoxNonAsset
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPaintContext           Context                        (Parm, OutParm, ReferenceParm)
// struct FVector2D               Position                       (Parm, IsPlainOldData)
// struct FVector2D               Size                           (Parm, IsPlainOldData)
// struct FSlateBrush             Brush                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FLinearColor            Tint                           (Parm, IsPlainOldData)

void US3BlueprintFunctionLibrary::STATIC_DrawBoxNonAsset(const struct FVector2D& Position, const struct FVector2D& Size, const struct FSlateBrush& Brush, const struct FLinearColor& Tint, struct FPaintContext* Context)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.DrawBoxNonAsset");

	US3BlueprintFunctionLibrary_DrawBoxNonAsset_Params params;
	params.Position = Position;
	params.Size = Size;
	params.Brush = Brush;
	params.Tint = Tint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Context != nullptr)
		*Context = params.Context;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.DisableStaticSwitchOverride
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstance*       Material                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BlueprintFunctionLibrary::STATIC_DisableStaticSwitchOverride(class UObject* WorldContextObject, class UMaterialInstance* Material, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.DisableStaticSwitchOverride");

	US3BlueprintFunctionLibrary_DisableStaticSwitchOverride_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Material = Material;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.CalculateSequenceRootMotionAlignment
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequence*           Sequence                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              AlignmentTransform             (Parm, IsPlainOldData)
// float                          AlignmentAnimTime              (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              RelativeTransform              (Parm, IsPlainOldData)
// float                          CurrentAnimTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          RootMotionScale                (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3BlueprintFunctionLibrary::STATIC_CalculateSequenceRootMotionAlignment(class UAnimSequence* Sequence, const struct FTransform& AlignmentTransform, float AlignmentAnimTime, const struct FTransform& RelativeTransform, float CurrentAnimTime, float RootMotionScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.CalculateSequenceRootMotionAlignment");

	US3BlueprintFunctionLibrary_CalculateSequenceRootMotionAlignment_Params params;
	params.Sequence = Sequence;
	params.AlignmentTransform = AlignmentTransform;
	params.AlignmentAnimTime = AlignmentAnimTime;
	params.RelativeTransform = RelativeTransform;
	params.CurrentAnimTime = CurrentAnimTime;
	params.RootMotionScale = RootMotionScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BlueprintFunctionLibrary.CalculateMontageRootMotionAlignment
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              AlignmentTransform             (Parm, IsPlainOldData)
// float                          AlignmentAnimTime              (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              RelativeTransform              (Parm, IsPlainOldData)
// float                          CurrentAnimTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          RootMotionScale                (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3BlueprintFunctionLibrary::STATIC_CalculateMontageRootMotionAlignment(class UAnimMontage* Montage, const struct FTransform& AlignmentTransform, float AlignmentAnimTime, const struct FTransform& RelativeTransform, float CurrentAnimTime, float RootMotionScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BlueprintFunctionLibrary.CalculateMontageRootMotionAlignment");

	US3BlueprintFunctionLibrary_CalculateMontageRootMotionAlignment_Params params;
	params.Montage = Montage;
	params.AlignmentTransform = AlignmentTransform;
	params.AlignmentAnimTime = AlignmentAnimTime;
	params.RelativeTransform = RelativeTransform;
	params.CurrentAnimTime = CurrentAnimTime;
	params.RootMotionScale = RootMotionScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.StartPause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UClass*>          IgnoreClasses                  (Parm, ZeroConstructor)

void AS3GameMode::StartPause(TArray<class UClass*> IgnoreClasses)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.StartPause");

	AS3GameMode_StartPause_Params params;
	params.IgnoreClasses = IgnoreClasses;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.StartCheckLevelStreaming
// (Final, Native, Public, BlueprintCallable)

void AS3GameMode::StartCheckLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.StartCheckLevelStreaming");

	AS3GameMode_StartCheckLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.StartBattleLevelStreaming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BattleLevel                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           NeedLevels                     (Parm, ZeroConstructor)

void AS3GameMode::StartBattleLevelStreaming(class AActor* Executor, const struct FName& BattleLevel, TArray<struct FName> NeedLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.StartBattleLevelStreaming");

	AS3GameMode_StartBattleLevelStreaming_Params params;
	params.Executor = Executor;
	params.BattleLevel = BattleLevel;
	params.NeedLevels = NeedLevels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.SetSkyManager
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3SkyManager*           InSkyManager                   (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameMode::SetSkyManager(class AS3SkyManager* InSkyManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.SetSkyManager");

	AS3GameMode_SetSkyManager_Params params;
	params.InSkyManager = InSkyManager;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.SetS3Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPausePriority                 Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::SetS3Pause(EPausePriority Priority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.SetS3Pause");

	AS3GameMode_SetS3Pause_Params params;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.RecreatePlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       OldPlayerController            (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  NewPlayerControllerClass       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  SpawnPoint                     (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AS3GameMode::RecreatePlayerController(class APlayerController* OldPlayerController, class UClass* NewPlayerControllerClass, class AActor* SpawnPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.RecreatePlayerController");

	AS3GameMode_RecreatePlayerController_Params params;
	params.OldPlayerController = OldPlayerController;
	params.NewPlayerControllerClass = NewPlayerControllerClass;
	params.SpawnPoint = SpawnPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.IsS3SystemPause
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::IsS3SystemPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.IsS3SystemPause");

	AS3GameMode_IsS3SystemPause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.IsS3Paused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::IsS3Paused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.IsS3Paused");

	AS3GameMode_IsS3Paused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.IsNPCFadeInProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::IsNPCFadeInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.IsNPCFadeInProgress");

	AS3GameMode_IsNPCFadeInProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.IsLoadingLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::IsLoadingLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.IsLoadingLevel");

	AS3GameMode_IsLoadingLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.IsLevelStreaming
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::IsLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.IsLevelStreaming");

	AS3GameMode_IsLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.GetLevelStreamingDebugData
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FS3LevelDebugData> LevelStreamingData             (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::GetLevelStreamingDebugData(TArray<struct FS3LevelDebugData>* LevelStreamingData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.GetLevelStreamingDebugData");

	AS3GameMode_GetLevelStreamingDebugData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelStreamingData != nullptr)
		*LevelStreamingData = params.LevelStreamingData;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.GetBattleSpawner
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ABTL_BattleSpawner*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ABTL_BattleSpawner* AS3GameMode::GetBattleSpawner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.GetBattleSpawner");

	AS3GameMode_GetBattleSpawner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.GetBattleCommandLibrary
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBTL_CommandLibraryBase* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UBTL_CommandLibraryBase* AS3GameMode::GetBattleCommandLibrary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.GetBattleCommandLibrary");

	AS3GameMode_GetBattleCommandLibrary_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.GetAreaManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AS3AreaManager*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3AreaManager* AS3GameMode::GetAreaManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.GetAreaManager");

	AS3GameMode_GetAreaManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.GetActiveSearchArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AS3SearchArea*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3SearchArea* AS3GameMode::GetActiveSearchArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.GetActiveSearchArea");

	AS3GameMode_GetActiveSearchArea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameMode.EndPause
// (Final, Native, Public, BlueprintCallable)

void AS3GameMode::EndPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.EndPause");

	AS3GameMode_EndPause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.EndBattleLevelStreaming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameMode::EndBattleLevelStreaming(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.EndBattleLevelStreaming");

	AS3GameMode_EndBattleLevelStreaming_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.EnableAllLevelStreamingVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameMode::EnableAllLevelStreamingVolume(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.EnableAllLevelStreamingVolume");

	AS3GameMode_EnableAllLevelStreamingVolume_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.DisableAllLevelStreamingVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameMode::DisableAllLevelStreamingVolume(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.DisableAllLevelStreamingVolume");

	AS3GameMode_DisableAllLevelStreamingVolume_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameMode.ClearS3Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPausePriority                 Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameMode::ClearS3Pause(EPausePriority Priority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameMode.ClearS3Pause");

	AS3GameMode_ClearS3Pause_Params params;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BootGameMode.ShowDialog
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// TArray<struct FName>           Labels                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// unsigned char                  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3BootGameMode::ShowDialog(TArray<struct FName> Labels, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BootGameMode.ShowDialog");

	AS3BootGameMode_ShowDialog_Params params;
	params.Labels = Labels;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BootGameMode.LoginPlatform
// (Final, Native, Public, BlueprintCallable)

void AS3BootGameMode::LoginPlatform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BootGameMode.LoginPlatform");

	AS3BootGameMode_LoginPlatform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BRallyCourseCSPlayer.TryPlaceCSAlongSpline
// (Final, Native, Protected, HasOutParms, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class ACharacter*              Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// class USplineComponent*        spline                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FBTL_BRallyCourseCutsceneData CutsceneData                   (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutLocation                    (Parm, OutParm, IsPlainOldData)
// struct FRotator                OutRotator                     (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3BRallyCourseCSPlayer::TryPlaceCSAlongSpline(class ACharacter* Pawn, class USplineComponent* spline, const struct FBTL_BRallyCourseCutsceneData& CutsceneData, TEnumAsByte<ETraceTypeQuery> TraceChannel, struct FVector* OutLocation, struct FRotator* OutRotator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BRallyCourseCSPlayer.TryPlaceCSAlongSpline");

	AS3BRallyCourseCSPlayer_TryPlaceCSAlongSpline_Params params;
	params.Pawn = Pawn;
	params.spline = spline;
	params.CutsceneData = CutsceneData;
	params.TraceChannel = TraceChannel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotator != nullptr)
		*OutRotator = params.OutRotator;

	return params.ReturnValue;
}


// Function Shenmue3.S3BRallyCourseCSPlayer.EstimateGroundLocation
// (Final, Native, Protected, HasOutParms, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class ACharacter*              ContextPawn                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLocation                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3BRallyCourseCSPlayer::EstimateGroundLocation(class ACharacter* ContextPawn, const struct FVector& StartLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BRallyCourseCSPlayer.EstimateGroundLocation");

	AS3BRallyCourseCSPlayer_EstimateGroundLocation_Params params;
	params.ContextPawn = ContextPawn;
	params.StartLocation = StartLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BRallyTrophyData.TryUnlockAchievements
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3AchievementManager*   AchievementManager             (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 NewlyUnlocked                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UObject*>         AllUnlocked                    (Parm, ZeroConstructor)

void US3BRallyTrophyData::TryUnlockAchievements(class US3AchievementManager* AchievementManager, class UObject* NewlyUnlocked, TArray<class UObject*> AllUnlocked)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BRallyTrophyData.TryUnlockAchievements");

	US3BRallyTrophyData_TryUnlockAchievements_Params params;
	params.AchievementManager = AchievementManager;
	params.NewlyUnlocked = NewlyUnlocked;
	params.AllUnlocked = AllUnlocked;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.UnLoadTalkScript
// (Native, Public, BlueprintCallable)

void US3TalkComponentBase::UnLoadTalkScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.UnLoadTalkScript");

	US3TalkComponentBase_UnLoadTalkScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.SetSubQuestControlInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FS3SubQuestControl> Info                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void US3TalkComponentBase::SetSubQuestControlInfo(TArray<struct FS3SubQuestControl> Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.SetSubQuestControlInfo");

	US3TalkComponentBase_SetSubQuestControlInfo_Params params;
	params.Info = Info;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.SetEnableByScript
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           InEnable                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponentBase::SetEnableByScript(bool InEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.SetEnableByScript");

	US3TalkComponentBase_SetEnableByScript_Params params;
	params.InEnable = InEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponentBase.SetEnableBySchedule
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           InEnable                       (Parm, ZeroConstructor, IsPlainOldData)

void US3TalkComponentBase::SetEnableBySchedule(bool InEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.SetEnableBySchedule");

	US3TalkComponentBase_SetEnableBySchedule_Params params;
	params.InEnable = InEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.ParseTalkScriptData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class US3TalkDataListBase*     TalkDataList                   (Parm, ZeroConstructor, IsPlainOldData)

void US3TalkComponentBase::ParseTalkScriptData(class US3TalkDataListBase* TalkDataList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.ParseTalkScriptData");

	US3TalkComponentBase_ParseTalkScriptData_Params params;
	params.TalkDataList = TalkDataList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.LoadTalkScript
// (Native, Public, BlueprintCallable)

void US3TalkComponentBase::LoadTalkScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.LoadTalkScript");

	US3TalkComponentBase_LoadTalkScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.IsInRangeOfTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MinTime                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxTime                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponentBase::IsInRangeOfTime(int MinTime, int MaxTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.IsInRangeOfTime");

	US3TalkComponentBase_IsInRangeOfTime_Params params;
	params.MinTime = MinTime;
	params.MaxTime = MaxTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponentBase.IsInRangeOfStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            MinStep                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxStep                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponentBase::IsInRangeOfStep(int MinStep, int MaxStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.IsInRangeOfStep");

	US3TalkComponentBase_IsInRangeOfStep_Params params;
	params.MinStep = MinStep;
	params.MaxStep = MaxStep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponentBase.InitEnableBySchedule
// (Native, Public, BlueprintCallable)

void US3TalkComponentBase::InitEnableBySchedule()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.InitEnableBySchedule");

	US3TalkComponentBase_InitEnableBySchedule_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkComponentBase.GetEnableBySchedule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponentBase::GetEnableBySchedule()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.GetEnableBySchedule");

	US3TalkComponentBase_GetEnableBySchedule_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponentBase.GetEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponentBase::GetEnable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.GetEnable");

	US3TalkComponentBase_GetEnable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponentBase.GetCurrentTalkScript
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTalkScriptState        ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTalkScriptState US3TalkComponentBase::GetCurrentTalkScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.GetCurrentTalkScript");

	US3TalkComponentBase_GetCurrentTalkScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponentBase.CanTalk
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           Sight                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponentBase::CanTalk(bool Sight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponentBase.CanTalk");

	US3TalkComponentBase_CanTalk_Params params;
	params.Sight = Sight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BSComponent.SetEventCountByScript
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BSComponent::SetEventCountByScript(int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BSComponent.SetEventCountByScript");

	US3BSComponent_SetEventCountByScript_Params params;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BSComponent.SetEventCountBySchedule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)

void US3BSComponent::SetEventCountBySchedule(int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BSComponent.SetEventCountBySchedule");

	US3BSComponent_SetEventCountBySchedule_Params params;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BSComponent.InitEventCountBySchedule
// (Final, Native, Public, BlueprintCallable)

void US3BSComponent::InitEventCountBySchedule()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BSComponent.InitEventCountBySchedule");

	US3BSComponent_InitEventCountBySchedule_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BSComponent.GetEventCountBySchedule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BSComponent::GetEventCountBySchedule()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BSComponent.GetEventCountBySchedule");

	US3BSComponent_GetEventCountBySchedule_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BSComponent.GetEventCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3BSComponent::GetEventCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BSComponent.GetEventCount");

	US3BSComponent_GetEventCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BSComponent.ExistEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3BSComponent::ExistEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BSComponent.ExistEvent");

	US3BSComponent_ExistEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BuildingStaticMeshActor.OverlapPlayer
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bin                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3BuildingStaticMeshActor::OverlapPlayer(class AActor* Actor, class UPrimitiveComponent* Component, bool bin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BuildingStaticMeshActor.OverlapPlayer");

	AS3BuildingStaticMeshActor_OverlapPlayer_Params params;
	params.Actor = Actor;
	params.Component = Component;
	params.bin = bin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3BuildingStaticMeshActor.EncompassPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Point                          (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3BuildingStaticMeshActor::EncompassPoint(class UPrimitiveComponent* Component, const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BuildingStaticMeshActor.EncompassPoint");

	AS3BuildingStaticMeshActor_EncompassPoint_Params params;
	params.Component = Component;
	params.Point = Point;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3BuildingStaticMeshActor.EncompassAllVolume
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Point                          (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3BuildingStaticMeshActor::EncompassAllVolume(const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3BuildingStaticMeshActor.EncompassAllVolume");

	AS3BuildingStaticMeshActor_EncompassAllVolume_Params params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CameraFadeCollisionActor.FadeOutCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AS3Character*            Character                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3CameraFadeCollisionActor::FadeOutCharacter(class AS3Character* Character, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CameraFadeCollisionActor.FadeOutCharacter");

	AS3CameraFadeCollisionActor_FadeOutCharacter_Params params;
	params.Character = Character;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CameraFadeCollisionActor.FadeInCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AS3Character*            Character                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeInTime                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3CameraFadeCollisionActor::FadeInCharacter(class AS3Character* Character, float FadeInTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CameraFadeCollisionActor.FadeInCharacter");

	AS3CameraFadeCollisionActor_FadeInCharacter_Params params;
	params.Character = Character;
	params.FadeInTime = FadeInTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CameraFadeCollisionActor.FadeInAll
// (Final, Native, Protected, BlueprintCallable)

void AS3CameraFadeCollisionActor::FadeInAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CameraFadeCollisionActor.FadeInAll");

	AS3CameraFadeCollisionActor_FadeInAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Button.ForceClickAction
// (Final, Native, Public, BlueprintCallable)

void US3Button::ForceClickAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Button.ForceClickAction");

	US3Button_ForceClickAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterPawn.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3CharacterPawn::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPawn.GetClothCharaName");

	AS3CharacterPawn_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharacterPhasingComponent.StopIgnoring_ByReference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacter*              Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Requester                      (Parm, ZeroConstructor, IsPlainOldData)

void US3CharacterPhasingComponent::StopIgnoring_ByReference(class ACharacter* Target, class UObject* Requester)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPhasingComponent.StopIgnoring_ByReference");

	US3CharacterPhasingComponent_StopIgnoring_ByReference_Params params;
	params.Target = Target;
	params.Requester = Requester;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterPhasingComponent.StartIgnoring_ByTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacter*              Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void US3CharacterPhasingComponent::StartIgnoring_ByTime(class ACharacter* Target, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPhasingComponent.StartIgnoring_ByTime");

	US3CharacterPhasingComponent_StartIgnoring_ByTime_Params params;
	params.Target = Target;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterPhasingComponent.StartIgnoring_ByReference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacter*              Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Requester                      (Parm, ZeroConstructor, IsPlainOldData)

void US3CharacterPhasingComponent::StartIgnoring_ByReference(class ACharacter* Target, class UObject* Requester)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPhasingComponent.StartIgnoring_ByReference");

	US3CharacterPhasingComponent_StartIgnoring_ByReference_Params params;
	params.Target = Target;
	params.Requester = Requester;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterPhasingComponent.OnCharacterFadedOut
// (Final, Native, Private)
// Parameters:
// class ACharacter*              Character                      (Parm, ZeroConstructor, IsPlainOldData)

void US3CharacterPhasingComponent::OnCharacterFadedOut(class ACharacter* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPhasingComponent.OnCharacterFadedOut");

	US3CharacterPhasingComponent_OnCharacterFadedOut_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterPhasingComponent.OnCharacterFadedIn
// (Final, Native, Private)
// Parameters:
// class ACharacter*              Character                      (Parm, ZeroConstructor, IsPlainOldData)

void US3CharacterPhasingComponent::OnCharacterFadedIn(class ACharacter* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPhasingComponent.OnCharacterFadedIn");

	US3CharacterPhasingComponent_OnCharacterFadedIn_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterPhasingComponent.CancelTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacter*              Target                         (Parm, ZeroConstructor, IsPlainOldData)

void US3CharacterPhasingComponent::CancelTimer(class ACharacter* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterPhasingComponent.CancelTimer");

	US3CharacterPhasingComponent_CancelTimer_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterSensorComponentBase.UpdateSensors
// (Native, Protected, BlueprintCallable)

void US3CharacterSensorComponentBase::UpdateSensors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterSensorComponentBase.UpdateSensors");

	US3CharacterSensorComponentBase_UpdateSensors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterSensorComponentBase.ReleaseSensors
// (Native, Protected, BlueprintCallable)

void US3CharacterSensorComponentBase::ReleaseSensors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterSensorComponentBase.ReleaseSensors");

	US3CharacterSensorComponentBase_ReleaseSensors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterSensorComponentBase.InitializeSensors
// (Native, Protected, BlueprintCallable)

void US3CharacterSensorComponentBase::InitializeSensors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterSensorComponentBase.InitializeSensors");

	US3CharacterSensorComponentBase_InitializeSensors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterSensorComponentBase.CreateSensors
// (Native, Protected, BlueprintCallable)

void US3CharacterSensorComponentBase::CreateSensors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterSensorComponentBase.CreateSensors");

	US3CharacterSensorComponentBase_CreateSensors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharacterSensorComponentBase.ClearSensors
// (Native, Protected, BlueprintCallable)

void US3CharacterSensorComponentBase::ClearSensors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharacterSensorComponentBase.ClearSensors");

	US3CharacterSensorComponentBase_ClearSensors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.UpdateLightingParamater
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FS3CharaLightingContainer Container                      (ConstParm, Parm, OutParm, ReferenceParm)

void AS3CharaLightingActor::UpdateLightingParamater(const struct FS3CharaLightingContainer& Container)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.UpdateLightingParamater");

	AS3CharaLightingActor_UpdateLightingParamater_Params params;
	params.Container = Container;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.UpdateCastShadows
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CameraLocation                 (Parm, IsPlainOldData)

void AS3CharaLightingActor::UpdateCastShadows(const struct FVector& CameraLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.UpdateCastShadows");

	AS3CharaLightingActor_UpdateCastShadows_Params params;
	params.CameraLocation = CameraLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.SetupLighting
// (Native, Public, BlueprintCallable)

void AS3CharaLightingActor::SetupLighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.SetupLighting");

	AS3CharaLightingActor_SetupLighting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.SetLightVisibility
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3CharaLightingActor::SetLightVisibility(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.SetLightVisibility");

	AS3CharaLightingActor_SetLightVisibility_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.ResetCacheTargetLocationFlag
// (Native, Public, BlueprintCallable)

void AS3CharaLightingActor::ResetCacheTargetLocationFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.ResetCacheTargetLocationFlag");

	AS3CharaLightingActor_ResetCacheTargetLocationFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.OverrideCacheTargetLocation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              WorldTransform                 (Parm, IsPlainOldData)
// struct FVector                 ForwardVector                  (Parm, IsPlainOldData)
// struct FVector                 UpVector                       (Parm, IsPlainOldData)
// struct FVector                 RightVector                    (Parm, IsPlainOldData)

void AS3CharaLightingActor::OverrideCacheTargetLocation(const struct FTransform& WorldTransform, const struct FVector& ForwardVector, const struct FVector& UpVector, const struct FVector& RightVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.OverrideCacheTargetLocation");

	AS3CharaLightingActor_OverrideCacheTargetLocation_Params params;
	params.WorldTransform = WorldTransform;
	params.ForwardVector = ForwardVector;
	params.UpVector = UpVector;
	params.RightVector = RightVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingActor.GetTargetSceneComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* AS3CharaLightingActor::GetTargetSceneComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.GetTargetSceneComponent");

	AS3CharaLightingActor_GetTargetSceneComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingActor.GetTargetActorSocketTransform
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              OutTransform                   (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingActor::GetTargetActorSocketTransform(struct FTransform* OutTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.GetTargetActorSocketTransform");

	AS3CharaLightingActor_GetTargetActorSocketTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTransform != nullptr)
		*OutTransform = params.OutTransform;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingActor.GetCharaLightingManager
// (Native, Public, BlueprintCallable)
// Parameters:
// class AS3CharaLightingManager* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3CharaLightingManager* AS3CharaLightingActor::GetCharaLightingManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.GetCharaLightingManager");

	AS3CharaLightingActor_GetCharaLightingManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingActor.DrawLightingDebugLine
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3CharaLightingActor::DrawLightingDebugLine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingActor.DrawLightingDebugLine");

	AS3CharaLightingActor_DrawLightingDebugLine_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.UpdateManualTargetCharaLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3CharaLightingActor*   CharaLightingActor             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::UpdateManualTargetCharaLight(class AS3CharaLightingActor* CharaLightingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.UpdateManualTargetCharaLight");

	AS3CharaLightingManager_UpdateManualTargetCharaLight_Params params;
	params.CharaLightingActor = CharaLightingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.UpdateLightingColorInBuilding
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FS3CharaLightingCurveColorParamater CurveColorParamater            (Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FS3CharaLightingContainer InContainer                    (Parm, OutParm, ReferenceParm)

void AS3CharaLightingManager::UpdateLightingColorInBuilding(struct FS3CharaLightingCurveColorParamater* CurveColorParamater, struct FS3CharaLightingContainer* InContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.UpdateLightingColorInBuilding");

	AS3CharaLightingManager_UpdateLightingColorInBuilding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurveColorParamater != nullptr)
		*CurveColorParamater = params.CurveColorParamater;
	if (InContainer != nullptr)
		*InContainer = params.InContainer;
}


// Function Shenmue3.S3CharaLightingManager.UpdateLightingColorCurve
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FS3CharaLightingCurveColorParamater CurveColorParamater            (Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FS3CharaLightingContainer InContainer                    (Parm, OutParm, ReferenceParm)

void AS3CharaLightingManager::UpdateLightingColorCurve(struct FS3CharaLightingCurveColorParamater* CurveColorParamater, struct FS3CharaLightingContainer* InContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.UpdateLightingColorCurve");

	AS3CharaLightingManager_UpdateLightingColorCurve_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurveColorParamater != nullptr)
		*CurveColorParamater = params.CurveColorParamater;
	if (InContainer != nullptr)
		*InContainer = params.InContainer;
}


// Function Shenmue3.S3CharaLightingManager.UpdateAllLightupActors
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::UpdateAllLightupActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.UpdateAllLightupActors");

	AS3CharaLightingManager_UpdateAllLightupActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.SetupEnvironmentLightParamater
// (Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDummy                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AS3CharaLightingManager::SetupEnvironmentLightParamater(class AActor* TargetActor, bool* bDummy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.SetupEnvironmentLightParamater");

	AS3CharaLightingManager_SetupEnvironmentLightParamater_Params params;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bDummy != nullptr)
		*bDummy = params.bDummy;
}


// Function Shenmue3.S3CharaLightingManager.SetupCalculationMeshAndCameraVariable
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::SetupCalculationMeshAndCameraVariable(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.SetupCalculationMeshAndCameraVariable");

	AS3CharaLightingManager_SetupCalculationMeshAndCameraVariable_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.SetCurrentLightingColorCurve
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FS3CharaLightingCurveColorParamater CurveColorParamater            (Parm, OutParm, ReferenceParm, IsPlainOldData)

void AS3CharaLightingManager::SetCurrentLightingColorCurve(struct FS3CharaLightingCurveColorParamater* CurveColorParamater)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.SetCurrentLightingColorCurve");

	AS3CharaLightingManager_SetCurrentLightingColorCurve_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurveColorParamater != nullptr)
		*CurveColorParamater = params.CurveColorParamater;
}


// Function Shenmue3.S3CharaLightingManager.ResetLightsInBuilding
// (Final, Native, Public, BlueprintCallable)

void AS3CharaLightingManager::ResetLightsInBuilding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.ResetLightsInBuilding");

	AS3CharaLightingManager_ResetLightsInBuilding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.RequestManualUpdateTargetCharaLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TargetTagCharaName             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LightParamaterTableName        (Parm, ZeroConstructor, IsPlainOldData)
// ES3CharaLightRequestType       RequestType                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3CharaLightingManager::RequestManualUpdateTargetCharaLight(const struct FName& TargetTagCharaName, const struct FName& LightParamaterTableName, ES3CharaLightRequestType RequestType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.RequestManualUpdateTargetCharaLight");

	AS3CharaLightingManager_RequestManualUpdateTargetCharaLight_Params params;
	params.TargetTagCharaName = TargetTagCharaName;
	params.LightParamaterTableName = LightParamaterTableName;
	params.RequestType = RequestType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.IsEnabledAllCharaLighting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::STATIC_IsEnabledAllCharaLighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.IsEnabledAllCharaLighting");

	AS3CharaLightingManager_IsEnabledAllCharaLighting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.IsConditionsCheck
// (Native, Event, Protected, HasOutParms, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS3CharaLightingContainer Container                      (Parm, OutParm, ReferenceParm)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class US3TagCharaComponent*    TagCharaComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::IsConditionsCheck(class AActor* Actor, class US3TagCharaComponent* TagCharaComponent, struct FS3CharaLightingContainer* Container)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.IsConditionsCheck");

	AS3CharaLightingManager_IsConditionsCheck_Params params;
	params.Actor = Actor;
	params.TagCharaComponent = TagCharaComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Container != nullptr)
		*Container = params.Container;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.InvertLightingDirection
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bCameraRightDirection          (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3CharaLightingContainer InContainer                    (Parm, OutParm, ReferenceParm)

void AS3CharaLightingManager::InvertLightingDirection(bool bCameraRightDirection, struct FS3CharaLightingContainer* InContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.InvertLightingDirection");

	AS3CharaLightingManager_InvertLightingDirection_Params params;
	params.bCameraRightDirection = bCameraRightDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InContainer != nullptr)
		*InContainer = params.InContainer;
}


// Function Shenmue3.S3CharaLightingManager.GetTalkTargetActorMesh
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* AS3CharaLightingManager::GetTalkTargetActorMesh(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetTalkTargetActorMesh");

	AS3CharaLightingManager_GetTalkTargetActorMesh_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.GetLightsInBuildingInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  TargetBuilding                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3CharaLightsInBuildingInfo OutInfo                        (Parm, OutParm)

void AS3CharaLightingManager::GetLightsInBuildingInfo(class AActor* TargetBuilding, struct FS3CharaLightsInBuildingInfo* OutInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetLightsInBuildingInfo");

	AS3CharaLightingManager_GetLightsInBuildingInfo_Params params;
	params.TargetBuilding = TargetBuilding;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutInfo != nullptr)
		*OutInfo = params.OutInfo;
}


// Function Shenmue3.S3CharaLightingManager.GetLightParamAfterApplyingLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FS3CharaLightingParamater Param                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FTransform              WorldTrans                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Forward                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Up                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Right                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 OutWorldLocation               (Parm, OutParm, IsPlainOldData)
// struct FRotator                OutWorldRotation               (Parm, OutParm, IsPlainOldData)

void AS3CharaLightingManager::GetLightParamAfterApplyingLocationAndRotation(const struct FS3CharaLightingParamater& Param, const struct FTransform& WorldTrans, const struct FVector& Forward, const struct FVector& Up, const struct FVector& Right, struct FVector* OutWorldLocation, struct FRotator* OutWorldRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetLightParamAfterApplyingLocationAndRotation");

	AS3CharaLightingManager_GetLightParamAfterApplyingLocationAndRotation_Params params;
	params.Param = Param;
	params.WorldTrans = WorldTrans;
	params.Forward = Forward;
	params.Up = Up;
	params.Right = Right;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutWorldLocation != nullptr)
		*OutWorldLocation = params.OutWorldLocation;
	if (OutWorldRotation != nullptr)
		*OutWorldRotation = params.OutWorldRotation;
}


// Function Shenmue3.S3CharaLightingManager.GetLightingColorParameter
// (Event, Protected, HasOutParms, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS3CharaLightingCurveColorParamater Paramater                      (Parm, OutParm, IsPlainOldData)

void AS3CharaLightingManager::GetLightingColorParameter(struct FS3CharaLightingCurveColorParamater* Paramater)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetLightingColorParameter");

	AS3CharaLightingManager_GetLightingColorParameter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Paramater != nullptr)
		*Paramater = params.Paramater;
}


// Function Shenmue3.S3CharaLightingManager.GetEditorPreviewTagName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3CharaLightingManager::STATIC_GetEditorPreviewTagName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetEditorPreviewTagName");

	AS3CharaLightingManager_GetEditorPreviewTagName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.GetEditorCurrentLevelName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AS3CharaLightingManager::GetEditorCurrentLevelName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetEditorCurrentLevelName");

	AS3CharaLightingManager_GetEditorCurrentLevelName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.GetCharaLightingContainerByLightGroupId
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   LightGroupId                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FS3CharaLightingContainer> OutContainers                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::GetCharaLightingContainerByLightGroupId(const struct FName& LightGroupId, TArray<struct FS3CharaLightingContainer>* OutContainers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetCharaLightingContainerByLightGroupId");

	AS3CharaLightingManager_GetCharaLightingContainerByLightGroupId_Params params;
	params.LightGroupId = LightGroupId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutContainers != nullptr)
		*OutContainers = params.OutContainers;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.GetCameraLocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 OutWorldLocation               (Parm, OutParm, IsPlainOldData)
// struct FRotator                OutWorldRotation               (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CharaLightingManager::GetCameraLocationAndRotation(struct FVector* OutWorldLocation, struct FRotator* OutWorldRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetCameraLocationAndRotation");

	AS3CharaLightingManager_GetCameraLocationAndRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutWorldLocation != nullptr)
		*OutWorldLocation = params.OutWorldLocation;
	if (OutWorldRotation != nullptr)
		*OutWorldRotation = params.OutWorldRotation;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.GetAllEditorActorsOfClass
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void AS3CharaLightingManager::GetAllEditorActorsOfClass(class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.GetAllEditorActorsOfClass");

	AS3CharaLightingManager_GetAllEditorActorsOfClass_Params params;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Shenmue3.S3CharaLightingManager.Evaluation
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  TargetLightupActor             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LightGroupId                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3CharaLightingContainer ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3CharaLightingContainer AS3CharaLightingManager::Evaluation(class AActor* TargetLightupActor, const struct FName& LightGroupId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.Evaluation");

	AS3CharaLightingManager_Evaluation_Params params;
	params.TargetLightupActor = TargetLightupActor;
	params.LightGroupId = LightGroupId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CharaLightingManager.EnabledAllCharaLighting
// (Final, Native, Static, Public, BlueprintCallable)

void AS3CharaLightingManager::STATIC_EnabledAllCharaLighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.EnabledAllCharaLighting");

	AS3CharaLightingManager_EnabledAllCharaLighting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.Editor_UpdateAllCutsceneLightingActors
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACameraActor*            Camera                         (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 LevelSequence                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3CharaLightingManager::Editor_UpdateAllCutsceneLightingActors(class ACameraActor* Camera, class UObject* LevelSequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.Editor_UpdateAllCutsceneLightingActors");

	AS3CharaLightingManager_Editor_UpdateAllCutsceneLightingActors_Params params;
	params.Camera = Camera;
	params.LevelSequence = LevelSequence;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.Editor_ResetVariable
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AS3CharaLightingManager::Editor_ResetVariable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.Editor_ResetVariable");

	AS3CharaLightingManager_Editor_ResetVariable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.DisabledAllCharaLighting
// (Final, Native, Static, Public, BlueprintCallable)

void AS3CharaLightingManager::STATIC_DisabledAllCharaLighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.DisabledAllCharaLighting");

	AS3CharaLightingManager_DisabledAllCharaLighting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.ClearRequestManualCharaLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAllReset                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3CharaLightingManager::ClearRequestManualCharaLight(bool bAllReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.ClearRequestManualCharaLight");

	AS3CharaLightingManager_ClearRequestManualCharaLight_Params params;
	params.bAllReset = bAllReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CharaLightingManager.AddLightsInBuilding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetBuilding                 (Parm, ZeroConstructor, IsPlainOldData)
// class AS3PointLight*           Point                          (Parm, ZeroConstructor, IsPlainOldData)
// class AS3SpotLight*            Spot                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3CharaLightingManager::AddLightsInBuilding(class AActor* TargetBuilding, class AS3PointLight* Point, class AS3SpotLight* Spot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CharaLightingManager.AddLightsInBuilding");

	AS3CharaLightingManager_AddLightsInBuilding_Params params;
	params.TargetBuilding = TargetBuilding;
	params.Point = Point;
	params.Spot = Spot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.UpdateSample
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::UpdateSample(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.UpdateSample");

	AS3Clipper_UpdateSample_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.SetTalkClipperVoice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 TalkClipperString              (Parm, ZeroConstructor)
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)
// class AS3SoundPlayer*          VoicePlayer                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3Clipper::SetTalkClipperVoice(const struct FString& TalkClipperString, const struct FName& CharaName, class AS3SoundPlayer* VoicePlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetTalkClipperVoice");

	AS3Clipper_SetTalkClipperVoice_Params params;
	params.TalkClipperString = TalkClipperString;
	params.CharaName = CharaName;
	params.VoicePlayer = VoicePlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.SetTalkClipperInternal
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// struct FString                 TalkClipperString              (Parm, ZeroConstructor)
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVoice                         (Parm, ZeroConstructor, IsPlainOldData)
// class AS3SoundPlayer*          VoicePlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::SetTalkClipperInternal(const struct FString& TalkClipperString, const struct FName& CharaName, bool bVoice, class AS3SoundPlayer* VoicePlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetTalkClipperInternal");

	AS3Clipper_SetTalkClipperInternal_Params params;
	params.TalkClipperString = TalkClipperString;
	params.CharaName = CharaName;
	params.bVoice = bVoice;
	params.VoicePlayer = VoicePlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.SetTalkClipper
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 TalkClipperString              (Parm, ZeroConstructor)
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVoice                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3Clipper::SetTalkClipper(const struct FString& TalkClipperString, const struct FName& CharaName, bool bVoice)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetTalkClipper");

	AS3Clipper_SetTalkClipper_Params params;
	params.TalkClipperString = TalkClipperString;
	params.CharaName = CharaName;
	params.bVoice = bVoice;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.SetSoundPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3SoundPlayer*          InSoundPlayer                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3Clipper::SetSoundPlayer(class AS3SoundPlayer* InSoundPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetSoundPlayer");

	AS3Clipper_SetSoundPlayer_Params params;
	params.InSoundPlayer = InSoundPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.SetPlayRate
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          NewRate                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3Clipper::SetPlayRate(float NewRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetPlayRate");

	AS3Clipper_SetPlayRate_Params params;
	params.NewRate = NewRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.SetFaceId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 InFaceId                       (Parm, ZeroConstructor)
// struct FName                   InCharaName                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3Clipper::SetFaceId(const struct FString& InFaceId, const struct FName& InCharaName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetFaceId");

	AS3Clipper_SetFaceId_Params params;
	params.InFaceId = InFaceId;
	params.InCharaName = InCharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.SetCharaName
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// struct FName                   NewName                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::SetCharaName(const struct FName& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.SetCharaName");

	AS3Clipper_SetCharaName_Params params;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.IsStopped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::IsStopped()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.IsStopped");

	AS3Clipper_IsStopped_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.IsFaceDisabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FName                   InCharaName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::IsFaceDisabled(const struct FName& InCharaName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.IsFaceDisabled");

	AS3Clipper_IsFaceDisabled_Params params;
	params.InCharaName = InCharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetSmoothShapeVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ShapeId                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Clipper::GetSmoothShapeVolume(int ShapeId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetSmoothShapeVolume");

	AS3Clipper_GetSmoothShapeVolume_Params params;
	params.ShapeId = ShapeId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetFaceId
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 OutFaceId                      (Parm, OutParm, ZeroConstructor)
// struct FName                   InCharaName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::GetFaceId(const struct FName& InCharaName, struct FString* OutFaceId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetFaceId");

	AS3Clipper_GetFaceId_Params params;
	params.InCharaName = InCharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFaceId != nullptr)
		*OutFaceId = params.OutFaceId;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetElapsedTimeAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Clipper::GetElapsedTimeAlpha()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetElapsedTimeAlpha");

	AS3Clipper_GetElapsedTimeAlpha_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Clipper::GetElapsedTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetElapsedTime");

	AS3Clipper_GetElapsedTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Clipper::GetDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetDuration");

	AS3Clipper_GetDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetCurrentFrameVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3Clipper::GetCurrentFrameVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetCurrentFrameVolume");

	AS3Clipper_GetCurrentFrameVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetCurrentFrameShapeId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3Clipper::GetCurrentFrameShapeId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetCurrentFrameShapeId");

	AS3Clipper_GetCurrentFrameShapeId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetCurrentFrameRawVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3Clipper::GetCurrentFrameRawVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetCurrentFrameRawVolume");

	AS3Clipper_GetCurrentFrameRawVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetClipperReader
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3ClipperReader*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3ClipperReader* AS3Clipper::GetClipperReader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetClipperReader");

	AS3Clipper_GetClipperReader_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.GetClipperMultiSampler
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3ClipperMultiSampler*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3ClipperMultiSampler* AS3Clipper::GetClipperMultiSampler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.GetClipperMultiSampler");

	AS3Clipper_GetClipperMultiSampler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3Clipper.ClearTalkClipper
// (Final, Native, Protected, BlueprintCallable)

void AS3Clipper::ClearTalkClipper()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.ClearTalkClipper");

	AS3Clipper_ClearTalkClipper_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.ClearSyncContext
// (Final, Native, Protected, BlueprintCallable)

void AS3Clipper::ClearSyncContext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.ClearSyncContext");

	AS3Clipper_ClearSyncContext_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.ClearFaceId
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3Clipper::ClearFaceId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.ClearFaceId");

	AS3Clipper_ClearFaceId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3Clipper.CheckChara
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Match                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3Clipper::CheckChara(const struct FName& Match)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3Clipper.CheckChara");

	AS3Clipper_CheckChara_Params params;
	params.Match = Match;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperLibrary.ConvertClipperVolume
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Volume                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3ClipperLibrary::STATIC_ConvertClipperVolume(int Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperLibrary.ConvertClipperVolume");

	US3ClipperLibrary_ConvertClipperVolume_Params params;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperMultiSampler.UpdateSamples
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3ClipperReader*        ClipperReader                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void US3ClipperMultiSampler::UpdateSamples(class US3ClipperReader* ClipperReader, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperMultiSampler.UpdateSamples");

	US3ClipperMultiSampler_UpdateSamples_Params params;
	params.ClipperReader = ClipperReader;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClipperMultiSampler.SetWindowInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3ClipperMultiSampler::SetWindowInterval(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperMultiSampler.SetWindowInterval");

	US3ClipperMultiSampler_SetWindowInterval_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClipperMultiSampler.GetVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3ClipperMultiSampler::GetVolume(int ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperMultiSampler.GetVolume");

	US3ClipperMultiSampler_GetVolume_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperMultiSampler.GetLoudestSample
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3ClipperMultiSampler::GetLoudestSample()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperMultiSampler.GetLoudestSample");

	US3ClipperMultiSampler_GetLoudestSample_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperMultiSampler.GetLoudestId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ClipperMultiSampler::GetLoudestId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperMultiSampler.GetLoudestId");

	US3ClipperMultiSampler_GetLoudestId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperMultiSampler.Clear
// (Final, Native, Public, BlueprintCallable)

void US3ClipperMultiSampler::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperMultiSampler.Clear");

	US3ClipperMultiSampler_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.UnlockAchievement
// (Final, Exec, Native, Public)
// Parameters:
// int                            AchievementID                  (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::UnlockAchievement(int AchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.UnlockAchievement");

	US3CheatManager_UnlockAchievement_Params params;
	params.AchievementID = AchievementID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.UnloadStreamLevel
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::UnloadStreamLevel(const struct FName& LevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.UnloadStreamLevel");

	US3CheatManager_UnloadStreamLevel_Params params;
	params.LevelName = LevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ToggleWidget
// (Exec, Native, Public)

void US3CheatManager::ToggleWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ToggleWidget");

	US3CheatManager_ToggleWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ToggleMemoryUsage
// (Final, Exec, Native, Public)

void US3CheatManager::ToggleMemoryUsage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ToggleMemoryUsage");

	US3CheatManager_ToggleMemoryUsage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ToggleDebugCameraYu
// (Exec, Native, Public)
// Parameters:
// bool                           bCollision                     (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::ToggleDebugCameraYu(bool bCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ToggleDebugCameraYu");

	US3CheatManager_ToggleDebugCameraYu_Params params;
	params.bCollision = bCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ToggleDebugCameraEx
// (Exec, Native, Public)
// Parameters:
// bool                           bCollision                     (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::ToggleDebugCameraEx(bool bCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ToggleDebugCameraEx");

	US3CheatManager_ToggleDebugCameraEx_Params params;
	params.bCollision = bCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.TeleportToNPC
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::TeleportToNPC(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.TeleportToNPC");

	US3CheatManager_TeleportToNPC_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.StreamOutTextureData
// (Final, Exec, Native, Public)
// Parameters:
// int                            RequiredMemorySize             (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::StreamOutTextureData(int RequiredMemorySize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.StreamOutTextureData");

	US3CheatManager_StreamOutTextureData_Params params;
	params.RequiredMemorySize = RequiredMemorySize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SkyLightSwapAndRecapture
// (Final, Exec, Native, Public)

void US3CheatManager::SkyLightSwapAndRecapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SkyLightSwapAndRecapture");

	US3CheatManager_SkyLightSwapAndRecapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SkyLightRecapture
// (Final, Exec, Native, Public)

void US3CheatManager::SkyLightRecapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SkyLightRecapture");

	US3CheatManager_SkyLightRecapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SkyLightBlendFraction
// (Final, Exec, Native, Public)
// Parameters:
// float                          BlendFraction                  (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SkyLightBlendFraction(float BlendFraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SkyLightBlendFraction");

	US3CheatManager_SkyLightBlendFraction_Params params;
	params.BlendFraction = BlendFraction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ShowNPCStreamingInfo
// (Exec, Event, Public, BlueprintEvent)

void US3CheatManager::ShowNPCStreamingInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ShowNPCStreamingInfo");

	US3CheatManager_ShowNPCStreamingInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ShowLightInfo
// (Final, Exec, Native, Public)

void US3CheatManager::ShowLightInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ShowLightInfo");

	US3CheatManager_ShowLightInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ShowLightCount
// (Exec, Event, Public, BlueprintEvent)

void US3CheatManager::ShowLightCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ShowLightCount");

	US3CheatManager_ShowLightCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ShowItemSpawnerHints
// (Exec, Event, Public, BlueprintEvent)

void US3CheatManager::ShowItemSpawnerHints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ShowItemSpawnerHints");

	US3CheatManager_ShowItemSpawnerHints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetMoney
// (Final, Exec, Native, Public)
// Parameters:
// int                            Money                          (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetMoney(int Money)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetMoney");

	US3CheatManager_SetMoney_Params params;
	params.Money = Money;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetGraphicQuality
// (Final, Exec, Native, Public)
// Parameters:
// int                            Quality                        (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetGraphicQuality(int Quality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetGraphicQuality");

	US3CheatManager_SetGraphicQuality_Params params;
	params.Quality = Quality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetEventStep
// (Final, Exec, Native, Public)
// Parameters:
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetEventStep(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetEventStep");

	US3CheatManager_SetEventStep_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetEventFlag
// (Final, Exec, Native, Public)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            flag                           (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetEventFlag(int Index, int flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetEventFlag");

	US3CheatManager_SetEventFlag_Params params;
	params.Index = Index;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetDemoType
// (Final, Exec, Native, Public)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetDemoType(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetDemoType");

	US3CheatManager_SetDemoType_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetBetMoney
// (Final, Exec, Native, Public)
// Parameters:
// int                            Money                          (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetBetMoney(int Money)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetBetMoney");

	US3CheatManager_SetBetMoney_Params params;
	params.Money = Money;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.SetAllItem
// (Final, Exec, Native, Public)
// Parameters:
// int                            Num                            (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::SetAllItem(int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.SetAllItem");

	US3CheatManager_SetAllItem_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ResetAchievements
// (Final, Exec, Native, Public)

void US3CheatManager::ResetAchievements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ResetAchievements");

	US3CheatManager_ResetAchievements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.RemoveAllWidgets
// (Final, Exec, Native, Public)

void US3CheatManager::RemoveAllWidgets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.RemoveAllWidgets");

	US3CheatManager_RemoveAllWidgets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.PreloadBattle
// (Final, Exec, Native, Public)

void US3CheatManager::PreloadBattle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.PreloadBattle");

	US3CheatManager_PreloadBattle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.OnShowLightInfoEvent
// (Event, Public, BlueprintEvent)

void US3CheatManager::OnShowLightInfoEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.OnShowLightInfoEvent");

	US3CheatManager_OnShowLightInfoEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.OnMiniGameWinEvent
// (Event, Public, BlueprintEvent)

void US3CheatManager::OnMiniGameWinEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.OnMiniGameWinEvent");

	US3CheatManager_OnMiniGameWinEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.OnMiniGameLoseEvent
// (Event, Public, BlueprintEvent)

void US3CheatManager::OnMiniGameLoseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.OnMiniGameLoseEvent");

	US3CheatManager_OnMiniGameLoseEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.NpcDebugMode
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   Mode                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Target                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::NpcDebugMode(const struct FName& Mode, const struct FName& Target, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.NpcDebugMode");

	US3CheatManager_NpcDebugMode_Params params;
	params.Mode = Mode;
	params.Target = Target;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.MocapUI
// (Final, Exec, Native, Public)

void US3CheatManager::MocapUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.MocapUI");

	US3CheatManager_MocapUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.MocapCalibration
// (Final, Exec, Native, Public)
// Parameters:
// int                            UserId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNPose                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSymmetry                      (Parm, ZeroConstructor, IsPlainOldData)

void US3CheatManager::MocapCalibration(int UserId, bool bNPose, bool bSymmetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.MocapCalibration");

	US3CheatManager_MocapCalibration_Params params;
	params.UserId = UserId;
	params.bNPose = bNPose;
	params.bSymmetry = bSymmetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.MiniGameSuccess
// (Final, Exec, Native, Public)

void US3CheatManager::MiniGameSuccess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.MiniGameSuccess");

	US3CheatManager_MiniGameSuccess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.MiniGameFail
// (Final, Exec, Native, Public)

void US3CheatManager::MiniGameFail()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.MiniGameFail");

	US3CheatManager_MiniGameFail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.LoadAutoSave
// (Final, Exec, Native, Public)

void US3CheatManager::LoadAutoSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.LoadAutoSave");

	US3CheatManager_LoadAutoSave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.LaunchDebugBattle
// (Exec, Event, Public, BlueprintEvent)

void US3CheatManager::LaunchDebugBattle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.LaunchDebugBattle");

	US3CheatManager_LaunchDebugBattle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.KillAllNPC
// (Final, Exec, Native, Public)

void US3CheatManager::KillAllNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.KillAllNPC");

	US3CheatManager_KillAllNPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.GetVisibleLightCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3CheatManager::GetVisibleLightCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.GetVisibleLightCount");

	US3CheatManager_GetVisibleLightCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CheatManager.GetOuterPlayerController
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AS3PlayerController*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3PlayerController* US3CheatManager::GetOuterPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.GetOuterPlayerController");

	US3CheatManager_GetOuterPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CheatManager.EnableNPCTriggerOverlaps
// (Exec, Event, Public, BlueprintEvent)

void US3CheatManager::EnableNPCTriggerOverlaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.EnableNPCTriggerOverlaps");

	US3CheatManager_EnableNPCTriggerOverlaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.DisableWalkOnlyTrigger
// (Final, Exec, Native, Public)

void US3CheatManager::DisableWalkOnlyTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.DisableWalkOnlyTrigger");

	US3CheatManager_DisableWalkOnlyTrigger_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.DisableNPCTriggerOverlaps
// (Exec, Event, Public, BlueprintEvent)

void US3CheatManager::DisableNPCTriggerOverlaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.DisableNPCTriggerOverlaps");

	US3CheatManager_DisableNPCTriggerOverlaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.ClearPeakMemoryUsage
// (Final, Exec, Native, Public)

void US3CheatManager::ClearPeakMemoryUsage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.ClearPeakMemoryUsage");

	US3CheatManager_ClearPeakMemoryUsage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CheatManager.CleanupGCArrayPool
// (Final, Exec, Native, Public)

void US3CheatManager::CleanupGCArrayPool()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CheatManager.CleanupGCArrayPool");

	US3CheatManager_CleanupGCArrayPool_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClipperReader.SetVolumeInterpretor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3ClipperVolumeInterpretor* InObject                       (Parm, ZeroConstructor, IsPlainOldData)

void US3ClipperReader::SetVolumeInterpretor(class US3ClipperVolumeInterpretor* InObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.SetVolumeInterpretor");

	US3ClipperReader_SetVolumeInterpretor_Params params;
	params.InObject = InObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClipperReader.SetFrameRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InFrameRate                    (Parm, ZeroConstructor, IsPlainOldData)

void US3ClipperReader::SetFrameRate(float InFrameRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.SetFrameRate");

	US3ClipperReader_SetFrameRate_Params params;
	params.InFrameRate = InFrameRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClipperReader.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 InData                         (Parm, ZeroConstructor)

void US3ClipperReader::SetData(const struct FString& InData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.SetData");

	US3ClipperReader_SetData_Params params;
	params.InData = InData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClipperReader.IsTimeInRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ClipperReader::IsTimeInRange(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.IsTimeInRange");

	US3ClipperReader_IsTimeInRange_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.IsFrameInRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ClipperReader::IsFrameInRange(int Frame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.IsFrameInRange");

	US3ClipperReader_IsFrameInRange_Params params;
	params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetVolumeInterpretor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3ClipperVolumeInterpretor* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3ClipperVolumeInterpretor* US3ClipperReader::GetVolumeInterpretor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetVolumeInterpretor");

	US3ClipperReader_GetVolumeInterpretor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3ClipperReader::GetTime(int Frame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetTime");

	US3ClipperReader_GetTime_Params params;
	params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetSourceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EClipperSourceType             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EClipperSourceType US3ClipperReader::GetSourceType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetSourceType");

	US3ClipperReader_GetSourceType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetSample
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int                            Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3ClipperSample        ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FS3ClipperSample US3ClipperReader::GetSample(int Frame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetSample");

	US3ClipperReader_GetSample_Params params;
	params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetFrameRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3ClipperReader::GetFrameRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetFrameRate");

	US3ClipperReader_GetFrameRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetFrameNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ClipperReader::GetFrameNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetFrameNum");

	US3ClipperReader_GetFrameNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetFrameAsFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3ClipperReader::GetFrameAsFloat(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetFrameAsFloat");

	US3ClipperReader_GetFrameAsFloat_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClipperReader.GetFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ClipperReader::GetFrame(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClipperReader.GetFrame");

	US3ClipperReader_GetFrame_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothInterface.GetClothMeshComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*          ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMeshComponent* US3ClothInterface::GetClothMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothInterface.GetClothMeshComponent");

	US3ClothInterface_GetClothMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.UpdateClothParts
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::UpdateClothParts(bool bRyo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.UpdateClothParts");

	AS3ClothManager_UpdateClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.UnlockMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::UnlockMesh(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.UnlockMesh");

	AS3ClothManager_UnlockMesh_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.UnlockClothParts
// (Native, Public, BlueprintCallable)
// Parameters:
// EClothPartsType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::UnlockClothParts(EClothPartsType Type, const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.UnlockClothParts");

	AS3ClothManager_UnlockClothParts_Params params;
	params.Type = Type;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.SetSheMeshType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3CharaMeshType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWithChange                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::SetSheMeshType(ES3CharaMeshType Type, bool bWithChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.SetSheMeshType");

	AS3ClothManager_SetSheMeshType_Params params;
	params.Type = Type;
	params.bWithChange = bWithChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.SetRyoMeshType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3CharaMeshType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWithChange                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::SetRyoMeshType(ES3CharaMeshType Type, bool bWithChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.SetRyoMeshType");

	AS3ClothManager_SetRyoMeshType_Params params;
	params.Type = Type;
	params.bWithChange = bWithChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.SetEditMeshId
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::SetEditMeshId(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.SetEditMeshId");

	AS3ClothManager_SetEditMeshId_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.IsUnlockedClothParts
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3ClothManager::IsUnlockedClothParts(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.IsUnlockedClothParts");

	AS3ClothManager_IsUnlockedClothParts_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.IsTemporaryMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3CharaMeshType               MeshType                       (Parm, ZeroConstructor, IsPlainOldData)
// EClothPartsType                PartsType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3ClothManager::IsTemporaryMesh(ES3CharaMeshType MeshType, EClothPartsType PartsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.IsTemporaryMesh");

	AS3ClothManager_IsTemporaryMesh_Params params;
	params.MeshType = MeshType;
	params.PartsType = PartsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.IsFitting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3ClothManager::IsFitting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.IsFitting");

	AS3ClothManager_IsFitting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.IsCompleteStreaming
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3ClothManager::IsCompleteStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.IsCompleteStreaming");

	AS3ClothManager_IsCompleteStreaming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.GetWearClothPartsCustom
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<EClothPartsType, struct FName> WearParts                      (Parm, OutParm, ZeroConstructor)
// ES3CharaMeshType               MeshType                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::GetWearClothPartsCustom(ES3CharaMeshType MeshType, bool bRyo, TMap<EClothPartsType, struct FName>* WearParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetWearClothPartsCustom");

	AS3ClothManager_GetWearClothPartsCustom_Params params;
	params.MeshType = MeshType;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WearParts != nullptr)
		*WearParts = params.WearParts;
}


// Function Shenmue3.S3ClothManager.GetWearClothParts
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<EClothPartsType, struct FName> WearParts                      (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::GetWearClothParts(bool bRyo, TMap<EClothPartsType, struct FName>* WearParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetWearClothParts");

	AS3ClothManager_GetWearClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WearParts != nullptr)
		*WearParts = params.WearParts;
}


// Function Shenmue3.S3ClothManager.GetUnlockedMeshes
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FName>           UnlockedMeshes                 (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::GetUnlockedMeshes(bool bRyo, TArray<struct FName>* UnlockedMeshes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetUnlockedMeshes");

	AS3ClothManager_GetUnlockedMeshes_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (UnlockedMeshes != nullptr)
		*UnlockedMeshes = params.UnlockedMeshes;
}


// Function Shenmue3.S3ClothManager.GetUnlockedClothParts
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FName>           UnlockedParts                  (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::GetUnlockedClothParts(bool bRyo, TArray<struct FName>* UnlockedParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetUnlockedClothParts");

	AS3ClothManager_GetUnlockedClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (UnlockedParts != nullptr)
		*UnlockedParts = params.UnlockedParts;
}


// Function Shenmue3.S3ClothManager.GetTagCharaName
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TScriptInterface<class US3ClothInterface> Interface                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3ClothManager::GetTagCharaName(const TScriptInterface<class US3ClothInterface>& Interface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetTagCharaName");

	AS3ClothManager_GetTagCharaName_Params params;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.GetMeshAndParts
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)
// ES3CharaMeshType               MeshType                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3ClothesChangeInfo    Info                           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3ClothManager::GetMeshAndParts(const struct FName& CharaName, ES3CharaMeshType MeshType, struct FS3ClothesChangeInfo* Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetMeshAndParts");

	AS3ClothManager_GetMeshAndParts_Params params;
	params.CharaName = CharaName;
	params.MeshType = MeshType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Info != nullptr)
		*Info = params.Info;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.GetCurrentMeshID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3ClothManager::GetCurrentMeshID(bool bRyo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetCurrentMeshID");

	AS3ClothManager_GetCurrentMeshID_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.GetCacheInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           TargetRyo                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FS3ClothesCacheInfo> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FS3ClothesCacheInfo> AS3ClothManager::GetCacheInfo(bool TargetRyo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.GetCacheInfo");

	AS3ClothManager_GetCacheInfo_Params params;
	params.TargetRyo = TargetRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.FindCache
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FS3ClothesCacheInfo> Cache                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* AS3ClothManager::FindCache(TArray<struct FS3ClothesCacheInfo> Cache, const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.FindCache");

	AS3ClothManager_FindCache_Params params;
	params.Cache = Cache;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.CreateMeshCacheID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   MeshID                         (Parm, ZeroConstructor, IsPlainOldData)
// ES3CharaMeshType               MeshType                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3ClothManager::CreateMeshCacheID(const struct FName& MeshID, ES3CharaMeshType MeshType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.CreateMeshCacheID");

	AS3ClothManager_CreateMeshCacheID_Params params;
	params.MeshID = MeshID;
	params.MeshType = MeshType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ClothManager.ChangeClothes
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class US3ClothInterface> Interface                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// ES3CharaMeshType               Type                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::ChangeClothes(const TScriptInterface<class US3ClothInterface>& Interface, ES3CharaMeshType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.ChangeClothes");

	AS3ClothManager_ChangeClothes_Params params;
	params.Interface = Interface;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothManager.CacheObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   PartsID                        (Parm, ZeroConstructor, IsPlainOldData)
// EClothPartsType                PartsType                      (Parm, ZeroConstructor, IsPlainOldData)
// ES3CharaMeshType               MeshType                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3ClothManager::CacheObject(const struct FName& PartsID, EClothPartsType PartsType, ES3CharaMeshType MeshType, class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothManager.CacheObject");

	AS3ClothManager_CacheObject_Params params;
	params.PartsID = PartsID;
	params.PartsType = PartsType;
	params.MeshType = MeshType;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ClothPartsDataAsset.SetMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*       InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)

void US3ClothPartsDataAsset::SetMaterial(class UMaterialInstance* InMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ClothPartsDataAsset.SetMaterial");

	US3ClothPartsDataAsset_SetMaterial_Params params;
	params.InMaterial = InMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneLibrary.FindCutscenePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// class AS3CutscenePlayer*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3CutscenePlayer* US3CutsceneLibrary::STATIC_FindCutscenePlayer(class UObject* WorldContextObject, const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneLibrary.FindCutscenePlayer");

	US3CutsceneLibrary_FindCutscenePlayer_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.UnloadCutsceneLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::UnloadCutsceneLevel(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.UnloadCutsceneLevel");

	AS3CutsceneManager_UnloadCutsceneLevel_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.StartCutscene
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UseFadeOut                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::StartCutscene(const struct FName& CutsceneId, bool UseFadeOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.StartCutscene");

	AS3CutsceneManager_StartCutscene_Params params;
	params.CutsceneId = CutsceneId;
	params.UseFadeOut = UseFadeOut;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.RequestUnloadLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3CutsceneManager::RequestUnloadLevel(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.RequestUnloadLevel");

	AS3CutsceneManager_RequestUnloadLevel_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneManager.RequestLoadLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3CutsceneManager::RequestLoadLevel(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.RequestLoadLevel");

	AS3CutsceneManager_RequestLoadLevel_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneManager.OnFinishedUnloadCutsceneLevel
// (Final, Native, Protected)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3CutsceneManager::OnFinishedUnloadCutsceneLevel(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.OnFinishedUnloadCutsceneLevel");

	AS3CutsceneManager_OnFinishedUnloadCutsceneLevel_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneManager.OnFinishedLoadCutsceneLevel
// (Final, Native, Protected)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void AS3CutsceneManager::OnFinishedLoadCutsceneLevel(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.OnFinishedLoadCutsceneLevel");

	AS3CutsceneManager_OnFinishedLoadCutsceneLevel_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneManager.LoadCutsceneLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::LoadCutsceneLevel(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.LoadCutsceneLevel");

	AS3CutsceneManager_LoadCutsceneLevel_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.IsUsingForceWeather
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::IsUsingForceWeather()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.IsUsingForceWeather");

	AS3CutsceneManager_IsUsingForceWeather_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.IsUsingForceTimeOfDay
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::IsUsingForceTimeOfDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.IsUsingForceTimeOfDay");

	AS3CutsceneManager_IsUsingForceTimeOfDay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.IsUnloadingLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::IsUnloadingLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.IsUnloadingLevel");

	AS3CutsceneManager_IsUnloadingLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.IsPlaying");

	AS3CutsceneManager_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.IsLoadingLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::IsLoadingLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.IsLoadingLevel");

	AS3CutsceneManager_IsLoadingLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.IsExistLevelData
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::IsExistLevelData(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.IsExistLevelData");

	AS3CutsceneManager_IsExistLevelData_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.GetRequiredUnloadLevelList
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> AS3CutsceneManager::GetRequiredUnloadLevelList(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.GetRequiredUnloadLevelList");

	AS3CutsceneManager_GetRequiredUnloadLevelList_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.GetRequiredLoadLevelList
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> AS3CutsceneManager::GetRequiredLoadLevelList(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.GetRequiredLoadLevelList");

	AS3CutsceneManager_GetRequiredLoadLevelList_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.GetLastCutsceneQTEResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3CutsceneManager::GetLastCutsceneQTEResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.GetLastCutsceneQTEResult");

	AS3CutsceneManager_GetLastCutsceneQTEResult_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneManager.GetForceTimeOfDayValue
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3CutsceneManager::GetForceTimeOfDayValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneManager.GetForceTimeOfDayValue");

	AS3CutsceneManager_GetForceTimeOfDayValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutscenePlayer.StartCutscene
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3CutscenePlayer::StartCutscene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutscenePlayer.StartCutscene");

	AS3CutscenePlayer_StartCutscene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutscenePlayer.EndCutscene
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3CutscenePlayer::EndCutscene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutscenePlayer.EndCutscene");

	AS3CutscenePlayer_EndCutscene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneSkeletalMeshActor.SetupMesh
// (Final, Native, Public, BlueprintCallable)

void AS3CutsceneSkeletalMeshActor::SetupMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneSkeletalMeshActor.SetupMesh");

	AS3CutsceneSkeletalMeshActor_SetupMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3CutsceneSkeletalMeshActor.GetTagCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3CutsceneSkeletalMeshActor::GetTagCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneSkeletalMeshActor.GetTagCharaName");

	AS3CutsceneSkeletalMeshActor_GetTagCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneSkeletalMeshActor.GetConvertedCharaName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3CutsceneSkeletalMeshActor::GetConvertedCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneSkeletalMeshActor.GetConvertedCharaName");

	AS3CutsceneSkeletalMeshActor_GetConvertedCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3CutsceneSkeletalMeshActor.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3CutsceneSkeletalMeshActor::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3CutsceneSkeletalMeshActor.GetClothCharaName");

	AS3CutsceneSkeletalMeshActor_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DebugCameraController.SetFOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewFOV                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3DebugCameraController::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DebugCameraController.SetFOV");

	AS3DebugCameraController_SetFOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DebugCameraController.SetCameraSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewSpeed                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3DebugCameraController::SetCameraSpeed(float NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DebugCameraController.SetCameraSpeed");

	AS3DebugCameraController_SetCameraSpeed_Params params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DebugCameraController.GetOriginalPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPlayer*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPlayer* AS3DebugCameraController::GetOriginalPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DebugCameraController.GetOriginalPlayer");

	AS3DebugCameraController_GetOriginalPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DebugMenu.CloseDebugMenu
// (Event, Public, BlueprintCallable, BlueprintEvent)

void US3DebugMenu::CloseDebugMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DebugMenu.CloseDebugMenu");

	US3DebugMenu_CloseDebugMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetMaxLevelDelta
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3DerivedPlayerLevel::GetMaxLevelDelta()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetMaxLevelDelta");

	US3DerivedPlayerLevel_GetMaxLevelDelta_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetMaxLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3DerivedPlayerLevel::GetMaxLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetMaxLevel");

	US3DerivedPlayerLevel_GetMaxLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetLevelRange
// (Final, Native, Public, HasOutParms, BlueprintCallable, Const)
// Parameters:
// int                            Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3DerivedPlayerLevel::GetLevelRange(int* Min, int* Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetLevelRange");

	US3DerivedPlayerLevel_GetLevelRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Min != nullptr)
		*Min = params.Min;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetLevelNormalizedTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3DerivedPlayerLevel::GetLevelNormalizedTo(int Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetLevelNormalizedTo");

	US3DerivedPlayerLevel_GetLevelNormalizedTo_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetLevelNormalized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3DerivedPlayerLevel::GetLevelNormalized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetLevelNormalized");

	US3DerivedPlayerLevel_GetLevelNormalized_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetLevelDelta
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3DerivedPlayerLevel::GetLevelDelta()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetLevelDelta");

	US3DerivedPlayerLevel_GetLevelDelta_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetLevelAndProgress
// (Final, Native, Public, HasOutParms, BlueprintCallable, Const)
// Parameters:
// int                            Level                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NextLevelProgress              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3DerivedPlayerLevel::GetLevelAndProgress(int* Level, float* NextLevelProgress)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetLevelAndProgress");

	US3DerivedPlayerLevel_GetLevelAndProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Level != nullptr)
		*Level = params.Level;
	if (NextLevelProgress != nullptr)
		*NextLevelProgress = params.NextLevelProgress;
}


// Function Shenmue3.S3DerivedPlayerLevel.GetLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3DerivedPlayerLevel::GetLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.GetLevel");

	US3DerivedPlayerLevel_GetLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DerivedPlayerLevel.Configure
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InInputCountPerLevel           (Parm, ZeroConstructor, IsPlainOldData)
// int                            InStartLevel                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            InEarnableLevels               (Parm, ZeroConstructor, IsPlainOldData)

void US3DerivedPlayerLevel::Configure(int InInputCountPerLevel, int InStartLevel, int InEarnableLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DerivedPlayerLevel.Configure");

	US3DerivedPlayerLevel_Configure_Params params;
	params.InInputCountPerLevel = InInputCountPerLevel;
	params.InStartLevel = InStartLevel;
	params.InEarnableLevels = InEarnableLevels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.UpdateOverlapActors
// (Final, Native, Public, BlueprintCallable)

void AS3DetectAction::UpdateOverlapActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.UpdateOverlapActors");

	AS3DetectAction_UpdateOverlapActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.UpdateButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3DetectAction::UpdateButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.UpdateButton");

	AS3DetectAction_UpdateButton_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.UpdateBSActors
// (Final, Native, Public, BlueprintCallable)

void AS3DetectAction::UpdateBSActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.UpdateBSActors");

	AS3DetectAction_UpdateBSActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.UnregisterOverlapActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::UnregisterOverlapActor(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.UnregisterOverlapActor");

	AS3DetectAction_UnregisterOverlapActor_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.UnregisterDetectActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::UnregisterDetectActor(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.UnregisterDetectActor");

	AS3DetectAction_UnregisterDetectActor_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.RegisterOverlapActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::RegisterOverlapActor(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.RegisterOverlapActor");

	AS3DetectAction_RegisterOverlapActor_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.RegisterDetectActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::RegisterDetectActor(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.RegisterDetectActor");

	AS3DetectAction_RegisterDetectActor_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.PermitIconAll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::PermitIconAll(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.PermitIconAll");

	AS3DetectAction_PermitIconAll_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.PermitIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<ES3ActionIconType>      Icons                          (Parm, ZeroConstructor)
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::PermitIcon(TArray<ES3ActionIconType> Icons, class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.PermitIcon");

	AS3DetectAction_PermitIcon_Params params;
	params.Icons = Icons;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.PermitActionSensor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::PermitActionSensor(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.PermitActionSensor");

	AS3DetectAction_PermitActionSensor_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.OnStartBS
// (Event, Public, BlueprintEvent)
// Parameters:
// class AS3Character*            TalkableActor                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::OnStartBS(class AS3Character* TalkableActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.OnStartBS");

	AS3DetectAction_OnStartBS_Params params;
	params.TalkableActor = TalkableActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.OnEndPlay_ForbidActor
// (Final, Native, Public)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::OnEndPlay_ForbidActor(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.OnEndPlay_ForbidActor");

	AS3DetectAction_OnEndPlay_ForbidActor_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.OnEndPlay_DetectActor
// (Final, Native, Public)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::OnEndPlay_DetectActor(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.OnEndPlay_DetectActor");

	AS3DetectAction_OnEndPlay_DetectActor_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.IsRegisterDetectActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3DetectAction::IsRegisterDetectActor(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.IsRegisterDetectActor");

	AS3DetectAction_IsRegisterDetectActor_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.IsDetectTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlayerDistance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3DetectAction::IsDetectTarget(class AActor* Actor, float PlayerDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.IsDetectTarget");

	AS3DetectAction_IsDetectTarget_Params params;
	params.Actor = Actor;
	params.PlayerDistance = PlayerDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.IsActionSensorEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3DetectAction::IsActionSensorEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.IsActionSensorEnabled");

	AS3DetectAction_IsActionSensorEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.IsActionGlobalForbidden
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3DetectAction::IsActionGlobalForbidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.IsActionGlobalForbidden");

	AS3DetectAction_IsActionGlobalForbidden_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.IsActionForbidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3ActionIconType              Icon                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IgnoreGlobal                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3DetectAction::IsActionForbidden(ES3ActionIconType Icon, bool IgnoreGlobal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.IsActionForbidden");

	AS3DetectAction_IsActionForbidden_Params params;
	params.Icon = Icon;
	params.IgnoreGlobal = IgnoreGlobal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.GetDefaultButtonIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3ActionIconType              Type                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3DetectAction::GetDefaultButtonIndex(ES3ActionIconType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.GetDefaultButtonIndex");

	AS3DetectAction_GetDefaultButtonIndex_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.ForbidIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<ES3ActionIconType>      Icons                          (Parm, ZeroConstructor)
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::ForbidIcon(TArray<ES3ActionIconType> Icons, class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.ForbidIcon");

	AS3DetectAction_ForbidIcon_Params params;
	params.Icons = Icons;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.ForbidActionSensor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3DetectAction::ForbidActionSensor(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.ForbidActionSensor");

	AS3DetectAction_ForbidActionSensor_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DetectAction.FindStackIndex
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3DetectActionParam    InParam                        (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3DetectAction::FindStackIndex(const struct FS3DetectActionParam& InParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.FindStackIndex");

	AS3DetectAction_FindStackIndex_Params params;
	params.InParam = InParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectAction.CanStartBS
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AS3Character*            Character                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3DetectAction::CanStartBS(class AS3Character* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectAction.CanStartBS");

	AS3DetectAction_CanStartBS_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectActionInterface.GetPriority
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3DetectActionInterface::GetPriority()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectActionInterface.GetPriority");

	US3DetectActionInterface_GetPriority_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectActionInterface.GetDetectAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS3DetectActionParam> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FS3DetectActionParam> US3DetectActionInterface::GetDetectAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectActionInterface.GetDetectAction");

	US3DetectActionInterface_GetDetectAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DetectActionInterface.DecideDetectAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3ActionIconType              Type                           (Parm, ZeroConstructor, IsPlainOldData)

void US3DetectActionInterface::DecideDetectAction(ES3ActionIconType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DetectActionInterface.DecideDetectAction");

	US3DetectActionInterface_DecideDetectAction_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.TeleportToNPC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   NPCName                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_TeleportToNPC(class UObject* WorldContextObject, const struct FName& NPCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.TeleportToNPC");

	US3DevelopBlueprintFunctionLibrary_TeleportToNPC_Params params;
	params.WorldContextObject = WorldContextObject;
	params.NPCName = NPCName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.SetVirtualPlatform
// (Final, Native, Static, Public)
// Parameters:
// ES3Platform                    Platform                       (Parm, ZeroConstructor, IsPlainOldData)

void US3DevelopBlueprintFunctionLibrary::STATIC_SetVirtualPlatform(ES3Platform Platform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.SetVirtualPlatform");

	US3DevelopBlueprintFunctionLibrary_SetVirtualPlatform_Params params;
	params.Platform = Platform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.SetPostProcessAnimBlueprint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*           Mesh                           (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  AnimBlueprint                  (Parm, ZeroConstructor, IsPlainOldData)

void US3DevelopBlueprintFunctionLibrary::STATIC_SetPostProcessAnimBlueprint(class USkeletalMesh* Mesh, class UClass* AnimBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.SetPostProcessAnimBlueprint");

	US3DevelopBlueprintFunctionLibrary_SetPostProcessAnimBlueprint_Params params;
	params.Mesh = Mesh;
	params.AnimBlueprint = AnimBlueprint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.SetPhysicsAsset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*           Mesh                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPhysicsAsset*           NewPhysicsAsset                (Parm, ZeroConstructor, IsPlainOldData)

void US3DevelopBlueprintFunctionLibrary::STATIC_SetPhysicsAsset(class USkeletalMesh* Mesh, class UPhysicsAsset* NewPhysicsAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.SetPhysicsAsset");

	US3DevelopBlueprintFunctionLibrary_SetPhysicsAsset_Params params;
	params.Mesh = Mesh;
	params.NewPhysicsAsset = NewPhysicsAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.MarkPackageDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)

void US3DevelopBlueprintFunctionLibrary::STATIC_MarkPackageDirty(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.MarkPackageDirty");

	US3DevelopBlueprintFunctionLibrary_MarkPackageDirty_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsWeGame
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsWeGame(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsWeGame");

	US3DevelopBlueprintFunctionLibrary_IsWeGame_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsVirtualPS4
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsVirtualPS4()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsVirtualPS4");

	US3DevelopBlueprintFunctionLibrary_IsVirtualPS4_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsVirtualPlatformOverriden
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsVirtualPlatformOverriden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsVirtualPlatformOverriden");

	US3DevelopBlueprintFunctionLibrary_IsVirtualPlatformOverriden_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsTestBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsTestBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsTestBuild");

	US3DevelopBlueprintFunctionLibrary_IsTestBuild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsSimulateInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsSimulateInEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsSimulateInEditor");

	US3DevelopBlueprintFunctionLibrary_IsSimulateInEditor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsShippingBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsShippingBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsShippingBuild");

	US3DevelopBlueprintFunctionLibrary_IsShippingBuild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsPS4
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsPS4()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsPS4");

	US3DevelopBlueprintFunctionLibrary_IsPS4_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsPlayInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsPlayInEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsPlayInEditor");

	US3DevelopBlueprintFunctionLibrary_IsPlayInEditor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsMouseSupported
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsMouseSupported()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsMouseSupported");

	US3DevelopBlueprintFunctionLibrary_IsMouseSupported_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsEditor");

	US3DevelopBlueprintFunctionLibrary_IsEditor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsDLCProjectVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsDLCProjectVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsDLCProjectVersion");

	US3DevelopBlueprintFunctionLibrary_IsDLCProjectVersion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsDebugMouseSupported
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsDebugMouseSupported()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsDebugMouseSupported");

	US3DevelopBlueprintFunctionLibrary_IsDebugMouseSupported_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsDebugBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsDebugBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsDebugBuild");

	US3DevelopBlueprintFunctionLibrary_IsDebugBuild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsAlpha2
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsAlpha2()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsAlpha2");

	US3DevelopBlueprintFunctionLibrary_IsAlpha2_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsAlpha1
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DevelopBlueprintFunctionLibrary::STATIC_IsAlpha1()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.IsAlpha1");

	US3DevelopBlueprintFunctionLibrary_IsAlpha1_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetWorldStreamingLevels
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class ULevelStreaming*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class ULevelStreaming*> US3DevelopBlueprintFunctionLibrary::STATIC_GetWorldStreamingLevels(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetWorldStreamingLevels");

	US3DevelopBlueprintFunctionLibrary_GetWorldStreamingLevels_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetVirtualPlatformEnum
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3Platform                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3Platform US3DevelopBlueprintFunctionLibrary::STATIC_GetVirtualPlatformEnum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetVirtualPlatformEnum");

	US3DevelopBlueprintFunctionLibrary_GetVirtualPlatformEnum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetPlatformEnum
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3Platform                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3Platform US3DevelopBlueprintFunctionLibrary::STATIC_GetPlatformEnum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetPlatformEnum");

	US3DevelopBlueprintFunctionLibrary_GetPlatformEnum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetOnlineServiceName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3DevelopBlueprintFunctionLibrary::STATIC_GetOnlineServiceName(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.GetOnlineServiceName");

	US3DevelopBlueprintFunctionLibrary_GetOnlineServiceName_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DevelopBlueprintFunctionLibrary.DisableVirtualPlatformOverride
// (Final, Native, Static, Public)

void US3DevelopBlueprintFunctionLibrary::STATIC_DisableVirtualPlatformOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DevelopBlueprintFunctionLibrary.DisableVirtualPlatformOverride");

	US3DevelopBlueprintFunctionLibrary_DisableVirtualPlatformOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DoorFunctionLibrary.GetDoorData2
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class US3DoorData*             DoorData                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Time                           (Parm, ZeroConstructor, IsPlainOldData)
// class US3DoorDataBase*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3DoorDataBase* US3DoorFunctionLibrary::STATIC_GetDoorData2(class US3DoorData* DoorData, int Step, int Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DoorFunctionLibrary.GetDoorData2");

	US3DoorFunctionLibrary_GetDoorData2_Params params;
	params.DoorData = DoorData;
	params.Step = Step;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DoorFunctionLibrary.GetDoorData
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 State                          (Parm, OutParm, ZeroConstructor)
// struct FName                   NPCName                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 Path                           (Parm, OutParm, ZeroConstructor)
// struct FString                 compulsionPath                 (Parm, OutParm, ZeroConstructor)
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Time                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// class US3DoorDataBase*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3DoorDataBase* US3DoorFunctionLibrary::STATIC_GetDoorData(int Step, int Time, const struct FString& RootAssetPath, struct FString* State, struct FName* NPCName, struct FString* Path, struct FString* compulsionPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DoorFunctionLibrary.GetDoorData");

	US3DoorFunctionLibrary_GetDoorData_Params params;
	params.Step = Step;
	params.Time = Time;
	params.RootAssetPath = RootAssetPath;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (State != nullptr)
		*State = params.State;
	if (NPCName != nullptr)
		*NPCName = params.NPCName;
	if (Path != nullptr)
		*Path = params.Path;
	if (compulsionPath != nullptr)
		*compulsionPath = params.compulsionPath;

	return params.ReturnValue;
}


// Function Shenmue3.S3DownloadableContentManager.MountDLCAsync
// (Final, Native, Public, BlueprintCallable)

void US3DownloadableContentManager::MountDLCAsync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DownloadableContentManager.MountDLCAsync");

	US3DownloadableContentManager_MountDLCAsync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3DownloadableContentManager.IsInstalled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3DownloadableContentId       ID                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3DownloadableContentManager::IsInstalled(ES3DownloadableContentId ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DownloadableContentManager.IsInstalled");

	US3DownloadableContentManager_IsInstalled_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3DownloadableContentManager.GetGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3DownloadableContentManager::GetGameInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3DownloadableContentManager.GetGameInstance");

	US3DownloadableContentManager_GetGameInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3EnergyManager.IsLowEnergy
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3EnergyManager::IsLowEnergy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3EnergyManager.IsLowEnergy");

	AS3EnergyManager_IsLowEnergy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3EnergyManager.DrainRunEnergy
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AS3EnergyManager::DrainRunEnergy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3EnergyManager.DrainRunEnergy");

	AS3EnergyManager_DrainRunEnergy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3UserWidget.UpdateFontFacetype
// (Final, Native, Public, BlueprintCallable)

void US3UserWidget::UpdateFontFacetype()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3UserWidget.UpdateFontFacetype");

	US3UserWidget_UpdateFontFacetype_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3UserWidget.GetOwningComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* US3UserWidget::GetOwningComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3UserWidget.GetOwningComponent");

	US3UserWidget_GetOwningComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3UserWidget.GetOwningActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* US3UserWidget::GetOwningActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3UserWidget.GetOwningActor");

	US3UserWidget_GetOwningActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3UserWidget.GetHUD
// (Final, Native, Private)
// Parameters:
// class AS3HUD*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3HUD* US3UserWidget::GetHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3UserWidget.GetHUD");

	US3UserWidget_GetHUD_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3UserWidget.FindText
// (Final, Native, Private)
// Parameters:
// class UPanelWidget*            PanelWidget                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3UserWidget::FindText(class UPanelWidget* PanelWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3UserWidget.FindText");

	US3UserWidget_FindText_Params params;
	params.PanelWidget = PanelWidget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3UserWidget.ChooseFontFacetype
// (Final, Native, Private)
// Parameters:
// struct FSlateFontInfo          InFont                         (Parm)
// struct FSlateFontInfo          ReturnValue                    (Parm, OutParm, ReturnParm)

struct FSlateFontInfo US3UserWidget::ChooseFontFacetype(const struct FSlateFontInfo& InFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3UserWidget.ChooseFontFacetype");

	US3UserWidget_ChooseFontFacetype_Params params;
	params.InFont = InFont;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3EyecatchWidget.ShowEyecatchTexture
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                LogoImage                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseFade                       (Parm, ZeroConstructor, IsPlainOldData)

void US3EyecatchWidget::ShowEyecatchTexture(class UTexture* LogoImage, bool bUseFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3EyecatchWidget.ShowEyecatchTexture");

	US3EyecatchWidget_ShowEyecatchTexture_Params params;
	params.LogoImage = LogoImage;
	params.bUseFade = bUseFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3EyecatchWidget.ShowEyecatchText2
// (Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FText                   MainTitle1                     (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   SubTitle1                      (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   MainTitle2                     (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   SubTitle2                      (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bUseFade                       (Parm, ZeroConstructor, IsPlainOldData)

void US3EyecatchWidget::ShowEyecatchText2(const struct FText& MainTitle1, const struct FText& SubTitle1, const struct FText& MainTitle2, const struct FText& SubTitle2, bool bUseFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3EyecatchWidget.ShowEyecatchText2");

	US3EyecatchWidget_ShowEyecatchText2_Params params;
	params.MainTitle1 = MainTitle1;
	params.SubTitle1 = SubTitle1;
	params.MainTitle2 = MainTitle2;
	params.SubTitle2 = SubTitle2;
	params.bUseFade = bUseFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3EyecatchWidget.ShowEyecatch
// (Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FText                   MainTitle                      (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   Subtitle                       (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bUseFade                       (Parm, ZeroConstructor, IsPlainOldData)

void US3EyecatchWidget::ShowEyecatch(const struct FText& MainTitle, const struct FText& Subtitle, bool bUseFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3EyecatchWidget.ShowEyecatch");

	US3EyecatchWidget_ShowEyecatch_Params params;
	params.MainTitle = MainTitle;
	params.Subtitle = Subtitle;
	params.bUseFade = bUseFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3EyecatchWidget.HideEyecatch
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bUseFade                       (Parm, ZeroConstructor, IsPlainOldData)

void US3EyecatchWidget::HideEyecatch(bool bUseFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3EyecatchWidget.HideEyecatch");

	US3EyecatchWidget_HideEyecatch_Params params;
	params.bUseFade = bUseFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.UpdateCharacterName
// (Final, Native, Public, BlueprintCallable)

void US3FaceAnimInstance::UpdateCharacterName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.UpdateCharacterName");

	US3FaceAnimInstance_UpdateCharacterName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.SetHeadScale
// (Final, Native, Public, BlueprintCallable)

void US3FaceAnimInstance::SetHeadScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.SetHeadScale");

	US3FaceAnimInstance_SetHeadScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.SetClipperByGameMode
// (Final, Native, Protected, BlueprintCallable)

void US3FaceAnimInstance::SetClipperByGameMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.SetClipperByGameMode");

	US3FaceAnimInstance_SetClipperByGameMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.ResetFluctuationEmotion
// (Final, Native, Protected, BlueprintCallable)

void US3FaceAnimInstance::ResetFluctuationEmotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.ResetFluctuationEmotion");

	US3FaceAnimInstance_ResetFluctuationEmotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.ResetClipperMorph
// (Final, Native, Protected, BlueprintCallable)

void US3FaceAnimInstance::ResetClipperMorph()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.ResetClipperMorph");

	US3FaceAnimInstance_ResetClipperMorph_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.PlayEmotionMorph
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void US3FaceAnimInstance::PlayEmotionMorph()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.PlayEmotionMorph");

	US3FaceAnimInstance_PlayEmotionMorph_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.PlayClipperMorph
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void US3FaceAnimInstance::PlayClipperMorph()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.PlayClipperMorph");

	US3FaceAnimInstance_PlayClipperMorph_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.IsUseFluctuationEmotion
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3FaceAnimInstance::IsUseFluctuationEmotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.IsUseFluctuationEmotion");

	US3FaceAnimInstance_IsUseFluctuationEmotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FaceAnimInstance.IsEnableLookAt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3FaceAnimInstance::IsEnableLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.IsEnableLookAt");

	US3FaceAnimInstance_IsEnableLookAt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FaceAnimInstance.FindEmotionMorphMapKey
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   InEmotionId                    (Parm, ZeroConstructor, IsPlainOldData)
// ECharacterEmotion              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ECharacterEmotion US3FaceAnimInstance::FindEmotionMorphMapKey(const struct FName& InEmotionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.FindEmotionMorphMapKey");

	US3FaceAnimInstance_FindEmotionMorphMapKey_Params params;
	params.InEmotionId = InEmotionId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FaceAnimInstance.FindClipperMorphMapKey
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   InClipperId                    (Parm, ZeroConstructor, IsPlainOldData)
// EMouseShape                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMouseShape US3FaceAnimInstance::FindClipperMorphMapKey(const struct FName& InClipperId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.FindClipperMorphMapKey");

	US3FaceAnimInstance_FindClipperMorphMapKey_Params params;
	params.InClipperId = InClipperId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FaceAnimInstance.ConvertEmotionId
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 InEmotionId                    (Parm, ZeroConstructor)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3FaceAnimInstance::ConvertEmotionId(const struct FString& InEmotionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.ConvertEmotionId");

	US3FaceAnimInstance_ConvertEmotionId_Params params;
	params.InEmotionId = InEmotionId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FaceAnimInstance.CheckTalking
// (Final, Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void US3FaceAnimInstance::CheckTalking(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CheckTalking");

	US3FaceAnimInstance_CheckTalking_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcLookAt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3FaceAnimInstance::CalcLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcLookAt");

	US3FaceAnimInstance_CalcLookAt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcFluctuationEmotion
// (Final, Native, Protected, BlueprintCallable)

void US3FaceAnimInstance::CalcFluctuationEmotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcFluctuationEmotion");

	US3FaceAnimInstance_CalcFluctuationEmotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcEyeBlink
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void US3FaceAnimInstance::CalcEyeBlink()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcEyeBlink");

	US3FaceAnimInstance_CalcEyeBlink_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcEmotionBlend
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void US3FaceAnimInstance::CalcEmotionBlend(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcEmotionBlend");

	US3FaceAnimInstance_CalcEmotionBlend_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcEmotion
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void US3FaceAnimInstance::CalcEmotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcEmotion");

	US3FaceAnimInstance_CalcEmotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcClipperBlend
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void US3FaceAnimInstance::CalcClipperBlend(float Max, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcClipperBlend");

	US3FaceAnimInstance_CalcClipperBlend_Params params;
	params.Max = Max;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceAnimInstance.CalcClipper
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void US3FaceAnimInstance::CalcClipper()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceAnimInstance.CalcClipper");

	US3FaceAnimInstance_CalcClipper_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceLegacyAnimInstance.UpdateClipperFlag
// (Final, Native, Public, BlueprintCallable)

void US3FaceLegacyAnimInstance::UpdateClipperFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceLegacyAnimInstance.UpdateClipperFlag");

	US3FaceLegacyAnimInstance_UpdateClipperFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FaceLegacyAnimInstance.GetClipperRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bConditionOpenFlag             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTimeX                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3FaceLegacyAnimInstance::GetClipperRate(bool bConditionOpenFlag, float Rate, float DeltaTimeX)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FaceLegacyAnimInstance.GetClipperRate");

	US3FaceLegacyAnimInstance_GetClipperRate_Params params;
	params.bConditionOpenFlag = bConditionOpenFlag;
	params.Rate = Rate;
	params.DeltaTimeX = DeltaTimeX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FadeCharacterCapsule.SetUseWhitelist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewSetting                    (Parm, ZeroConstructor, IsPlainOldData)

void US3FadeCharacterCapsule::SetUseWhitelist(bool bNewSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FadeCharacterCapsule.SetUseWhitelist");

	US3FadeCharacterCapsule_SetUseWhitelist_Params params;
	params.bNewSetting = bNewSetting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FadeCharacterCapsule.RemoveFromWhitelist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacter*              Character                      (Parm, ZeroConstructor, IsPlainOldData)

void US3FadeCharacterCapsule::RemoveFromWhitelist(class ACharacter* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FadeCharacterCapsule.RemoveFromWhitelist");

	US3FadeCharacterCapsule_RemoveFromWhitelist_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FadeCharacterCapsule.OnOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void US3FadeCharacterCapsule::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FadeCharacterCapsule.OnOverlapEnd");

	US3FadeCharacterCapsule_OnOverlapEnd_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FadeCharacterCapsule.OnOverlapBegin
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void US3FadeCharacterCapsule::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FadeCharacterCapsule.OnOverlapBegin");

	US3FadeCharacterCapsule_OnOverlapBegin_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FadeCharacterCapsule.AddToWhitelist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacter*              Character                      (Parm, ZeroConstructor, IsPlainOldData)

void US3FadeCharacterCapsule::AddToWhitelist(class ACharacter* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FadeCharacterCapsule.AddToWhitelist");

	US3FadeCharacterCapsule_AddToWhitelist_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3FadeMaterialDataAsset.MakeFadeMaterial
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* US3FadeMaterialDataAsset::MakeFadeMaterial(class UObject* WorldContextObject, class UMaterialInterface* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FadeMaterialDataAsset.MakeFadeMaterial");

	US3FadeMaterialDataAsset_MakeFadeMaterial_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FindSecretRoom.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3FindSecretRoom::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FindSecretRoom.GetClothCharaName");

	AS3FindSecretRoom_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3TextDataManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3TextDataManagerBase*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3TextDataManagerBase* US3FrameworkLibrary::STATIC_GetS3TextDataManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3TextDataManagerNative");

	US3FrameworkLibrary_GetS3TextDataManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3TalkScriptManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3TalkScriptManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3TalkScriptManager* US3FrameworkLibrary::STATIC_GetS3TalkScriptManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3TalkScriptManagerNative");

	US3FrameworkLibrary_GetS3TalkScriptManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3TalkEventManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3TalkEventManagerBase* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3TalkEventManagerBase* US3FrameworkLibrary::STATIC_GetS3TalkEventManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3TalkEventManagerNative");

	US3FrameworkLibrary_GetS3TalkEventManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3SoundManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3SoundManager*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3SoundManager* US3FrameworkLibrary::STATIC_GetS3SoundManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3SoundManagerNative");

	US3FrameworkLibrary_GetS3SoundManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3SkyManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3SkyManager*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3SkyManager* US3FrameworkLibrary::STATIC_GetS3SkyManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3SkyManagerNative");

	US3FrameworkLibrary_GetS3SkyManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3SaveLoadManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3SaveLoadManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3SaveLoadManager* US3FrameworkLibrary::STATIC_GetS3SaveLoadManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3SaveLoadManagerNative");

	US3FrameworkLibrary_GetS3SaveLoadManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3RewardManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3RewardManager*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3RewardManager* US3FrameworkLibrary::STATIC_GetS3RewardManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3RewardManagerNative");

	US3FrameworkLibrary_GetS3RewardManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3NPCLeadManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3NPCLeadManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3NPCLeadManager* US3FrameworkLibrary::STATIC_GetS3NPCLeadManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3NPCLeadManagerNative");

	US3FrameworkLibrary_GetS3NPCLeadManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3MiniGameManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3MiniGameManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3MiniGameManager* US3FrameworkLibrary::STATIC_GetS3MiniGameManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3MiniGameManagerNative");

	US3FrameworkLibrary_GetS3MiniGameManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3LiveStreamingManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3LiveStreamingManager* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3LiveStreamingManager* US3FrameworkLibrary::STATIC_GetS3LiveStreamingManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3LiveStreamingManagerNative");

	US3FrameworkLibrary_GetS3LiveStreamingManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3InputDeviceManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3InputDeviceManager*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3InputDeviceManager* US3FrameworkLibrary::STATIC_GetS3InputDeviceManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3InputDeviceManagerNative");

	US3FrameworkLibrary_GetS3InputDeviceManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3HUDNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3HUD*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3HUD* US3FrameworkLibrary::STATIC_GetS3HUDNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3HUDNative");

	US3FrameworkLibrary_GetS3HUDNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3HintTalkManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3HintTalkManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3HintTalkManager* US3FrameworkLibrary::STATIC_GetS3HintTalkManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3HintTalkManagerNative");

	US3FrameworkLibrary_GetS3HintTalkManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3GimmickManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3GimmickManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GimmickManager* US3FrameworkLibrary::STATIC_GetS3GimmickManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3GimmickManagerNative");

	US3FrameworkLibrary_GetS3GimmickManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3GameTimeManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3GameTimeManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GameTimeManager* US3FrameworkLibrary::STATIC_GetS3GameTimeManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3GameTimeManagerNative");

	US3FrameworkLibrary_GetS3GameTimeManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3GameModeNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3GameMode*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GameMode* US3FrameworkLibrary::STATIC_GetS3GameModeNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3GameModeNative");

	US3FrameworkLibrary_GetS3GameModeNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3GameInstanceNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3FrameworkLibrary::STATIC_GetS3GameInstanceNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3GameInstanceNative");

	US3FrameworkLibrary_GetS3GameInstanceNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3DownloadableContentManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3DownloadableContentManager* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3DownloadableContentManager* US3FrameworkLibrary::STATIC_GetS3DownloadableContentManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3DownloadableContentManagerNative");

	US3FrameworkLibrary_GetS3DownloadableContentManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3DetectActionNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3DetectAction*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3DetectAction* US3FrameworkLibrary::STATIC_GetS3DetectActionNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3DetectActionNative");

	US3FrameworkLibrary_GetS3DetectActionNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3DebugMenuNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3DebugMenu*            ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3DebugMenu* US3FrameworkLibrary::STATIC_GetS3DebugMenuNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3DebugMenuNative");

	US3FrameworkLibrary_GetS3DebugMenuNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3CutsceneManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3CutsceneManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3CutsceneManager* US3FrameworkLibrary::STATIC_GetS3CutsceneManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3CutsceneManagerNative");

	US3FrameworkLibrary_GetS3CutsceneManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3ClothManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3ClothManager*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3ClothManager* US3FrameworkLibrary::STATIC_GetS3ClothManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3ClothManagerNative");

	US3FrameworkLibrary_GetS3ClothManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3ClipperManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3Clipper*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Clipper* US3FrameworkLibrary::STATIC_GetS3ClipperManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3ClipperManagerNative");

	US3FrameworkLibrary_GetS3ClipperManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3CheatManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3CheatManager*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3CheatManager* US3FrameworkLibrary::STATIC_GetS3CheatManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3CheatManagerNative");

	US3FrameworkLibrary_GetS3CheatManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3CharaLightingManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3CharaLightingManager* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3CharaLightingManager* US3FrameworkLibrary::STATIC_GetS3CharaLightingManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3CharaLightingManagerNative");

	US3FrameworkLibrary_GetS3CharaLightingManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3BgmManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3BgmManager*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3BgmManager* US3FrameworkLibrary::STATIC_GetS3BgmManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3BgmManagerNative");

	US3FrameworkLibrary_GetS3BgmManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3BattleSpawnerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class ABTL_BattleSpawner*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ABTL_BattleSpawner* US3FrameworkLibrary::STATIC_GetS3BattleSpawnerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3BattleSpawnerNative");

	US3FrameworkLibrary_GetS3BattleSpawnerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3AssetChunkManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3AssetChunkManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3AssetChunkManager* US3FrameworkLibrary::STATIC_GetS3AssetChunkManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3AssetChunkManagerNative");

	US3FrameworkLibrary_GetS3AssetChunkManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3AreaManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3AreaManager*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3AreaManager* US3FrameworkLibrary::STATIC_GetS3AreaManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3AreaManagerNative");

	US3FrameworkLibrary_GetS3AreaManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3AdventurePlayerControllerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3AdventurePlayerController* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3AdventurePlayerController* US3FrameworkLibrary::STATIC_GetS3AdventurePlayerControllerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3AdventurePlayerControllerNative");

	US3FrameworkLibrary_GetS3AdventurePlayerControllerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3FrameworkLibrary.GetS3AchievementManagerNative
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class US3AchievementManager*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3AchievementManager* US3FrameworkLibrary::STATIC_GetS3AchievementManagerNative(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3FrameworkLibrary.GetS3AchievementManagerNative");

	US3FrameworkLibrary_GetS3AchievementManagerNative_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameTimeManager.UpdateTlGametime
// (Final, Native, Public)

void AS3GameTimeManager::UpdateTlGametime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.UpdateTlGametime");

	AS3GameTimeManager_UpdateTlGametime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.UpdateNextDay
// (Final, Native, Public, BlueprintCallable)

void AS3GameTimeManager::UpdateNextDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.UpdateNextDay");

	AS3GameTimeManager_UpdateNextDay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.UpdateCurrentGameTimeShop
// (Final, Native, Public, BlueprintCallable)

void AS3GameTimeManager::UpdateCurrentGameTimeShop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.UpdateCurrentGameTimeShop");

	AS3GameTimeManager_UpdateCurrentGameTimeShop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.UpdateCurrentGameTimeDay
// (Final, Native, Public, BlueprintCallable)

void AS3GameTimeManager::UpdateCurrentGameTimeDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.UpdateCurrentGameTimeDay");

	AS3GameTimeManager_UpdateCurrentGameTimeDay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.UpdateCurrentGameTimeCustom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          OldGameTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::UpdateCurrentGameTimeCustom(float OldGameTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.UpdateCurrentGameTimeCustom");

	AS3GameTimeManager_UpdateCurrentGameTimeCustom_Params params;
	params.OldGameTime = OldGameTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.StopGameTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::StopGameTime(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.StopGameTime");

	AS3GameTimeManager_StopGameTime_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.StartGameTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::StartGameTime(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.StartGameTime");

	AS3GameTimeManager_StartGameTime_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.SetGameTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewGameTime                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateNextDay                 (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::SetGameTime(float NewGameTime, bool bUpdateNextDay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.SetGameTime");

	AS3GameTimeManager_SetGameTime_Params params;
	params.NewGameTime = NewGameTime;
	params.bUpdateNextDay = bUpdateNextDay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.SetGameDateTime
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FDateTime               NewDate                        (Parm)

void AS3GameTimeManager::SetGameDateTime(const struct FDateTime& NewDate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.SetGameDateTime");

	AS3GameTimeManager_SetGameDateTime_Params params;
	params.NewDate = NewDate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.SetDeltaTimeBias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InDeltaTimeBias                (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::SetDeltaTimeBias(float InDeltaTimeBias)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.SetDeltaTimeBias");

	AS3GameTimeManager_SetDeltaTimeBias_Params params;
	params.InDeltaTimeBias = InDeltaTimeBias;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.ReleaseForceStopTime
// (Final, Native, Public, BlueprintCallable)

void AS3GameTimeManager::ReleaseForceStopTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.ReleaseForceStopTime");

	AS3GameTimeManager_ReleaseForceStopTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameTimeManager.registCustomTimeEvent
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          Time                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            registIndex                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::registCustomTimeEvent(float Time, int* registIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.registCustomTimeEvent");

	AS3GameTimeManager_registCustomTimeEvent_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (registIndex != nullptr)
		*registIndex = params.registIndex;
}


// Function Shenmue3.S3GameTimeManager.IsStopGameTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameTimeManager::IsStopGameTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.IsStopGameTime");

	AS3GameTimeManager_IsStopGameTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameTimeManager.InitDataTime
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GameTimeManager::InitDataTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.InitDataTime");

	AS3GameTimeManager_InitDataTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameTimeManager.GetGameDateTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDateTime AS3GameTimeManager::GetGameDateTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.GetGameDateTime");

	AS3GameTimeManager_GetGameDateTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameTimeManager.GetEventTimeShop
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3ShopTimeEvent               InEventType                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3GameTimeManager::GetEventTimeShop(ES3ShopTimeEvent InEventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.GetEventTimeShop");

	AS3GameTimeManager_GetEventTimeShop_Params params;
	params.InEventType = InEventType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameTimeManager.GetEventTimeDay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3DayTimeEvent                InEventType                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3GameTimeManager::GetEventTimeDay(ES3DayTimeEvent InEventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.GetEventTimeDay");

	AS3GameTimeManager_GetEventTimeDay_Params params;
	params.InEventType = InEventType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GameTimeManager.DetectTimeEventPositon
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            cateId                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::DetectTimeEventPositon(int cateId, float Time, int* Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.DetectTimeEventPositon");

	AS3GameTimeManager_DetectTimeEventPositon_Params params;
	params.cateId = cateId;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
}


// Function Shenmue3.S3GameTimeManager.DetectCustomEventPositon
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          NewTime                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          OldTime                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    Indexes                        (Parm, OutParm, ZeroConstructor)

void AS3GameTimeManager::DetectCustomEventPositon(float NewTime, float OldTime, TArray<int>* Indexes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.DetectCustomEventPositon");

	AS3GameTimeManager_DetectCustomEventPositon_Params params;
	params.NewTime = NewTime;
	params.OldTime = OldTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Indexes != nullptr)
		*Indexes = params.Indexes;
}


// Function Shenmue3.S3GameTimeManager.AppendGameTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaGameTime                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateNextDay                 (Parm, ZeroConstructor, IsPlainOldData)

void AS3GameTimeManager::AppendGameTime(float DeltaGameTime, bool bUpdateNextDay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameTimeManager.AppendGameTime");

	AS3GameTimeManager_AppendGameTime_Params params;
	params.DeltaGameTime = DeltaGameTime;
	params.bUpdateNextDay = bUpdateNextDay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GameViewportClient.ShowTitleSafeAreaMinimum
// (Exec, Native, Public)

void US3GameViewportClient::ShowTitleSafeAreaMinimum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GameViewportClient.ShowTitleSafeAreaMinimum");

	US3GameViewportClient_ShowTitleSafeAreaMinimum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GimmickChair.OnChanged
// (Final, Native, Public, BlueprintCallable)

void AS3GimmickChair::OnChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.OnChanged");

	AS3GimmickChair_OnChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GimmickChair.ModeChangeRequest
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FS3ChairResultStruct    Result                         (Parm, OutParm)
// EChairOccupied                 Mode                           (Parm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            Character                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 pos                            (Parm, IsPlainOldData)
// int                            poiIdx                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            stIdx                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          moveDist                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickChair::ModeChangeRequest(EChairOccupied Mode, class AS3Character* Character, const struct FVector& pos, int poiIdx, int stIdx, float moveDist, struct FS3ChairResultStruct* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.ModeChangeRequest");

	AS3GimmickChair_ModeChangeRequest_Params params;
	params.Mode = Mode;
	params.Character = Character;
	params.pos = pos;
	params.poiIdx = poiIdx;
	params.stIdx = stIdx;
	params.moveDist = moveDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.LocationTagCheck
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FString>         LocationTags                   (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickChair::LocationTagCheck(TArray<struct FString>* LocationTags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.LocationTagCheck");

	AS3GimmickChair_LocationTagCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocationTags != nullptr)
		*LocationTags = params.LocationTags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.LeaveDirectionCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELeaveDirection                dir                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickChair::LeaveDirectionCheck(ELeaveDirection dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.LeaveDirectionCheck");

	AS3GimmickChair_LeaveDirectionCheck_Params params;
	params.dir = dir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.IsCharacterSitting
// (Event, Public, BlueprintEvent)
// Parameters:
// class AS3Character*            Character                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickChair::IsCharacterSitting(class AS3Character* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.IsCharacterSitting");

	AS3GimmickChair_IsCharacterSitting_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.HasVacantSeat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickChair::HasVacantSeat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.HasVacantSeat");

	AS3GimmickChair_HasVacantSeat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.GetNearStartPointDist
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// int                            poiIdx                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            stIdx                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FTransform              Point                          (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3GimmickChair::GetNearStartPointDist(const struct FTransform& Point, int* poiIdx, int* stIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.GetNearStartPointDist");

	AS3GimmickChair_GetNearStartPointDist_Params params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (poiIdx != nullptr)
		*poiIdx = params.poiIdx;
	if (stIdx != nullptr)
		*stIdx = params.stIdx;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.GetChairRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator AS3GimmickChair::GetChairRotator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.GetChairRotator");

	AS3GimmickChair_GetChairRotator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.GetChairForm
// (Event, Public, BlueprintEvent)
// Parameters:
// EChairForm                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EChairForm AS3GimmickChair::GetChairForm()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.GetChairForm");

	AS3GimmickChair_GetChairForm_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickChair.ExitManager
// (Final, Native, Protected, BlueprintCallable)

void AS3GimmickChair::ExitManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.ExitManager");

	AS3GimmickChair_ExitManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GimmickChair.EntryManager
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickChair::EntryManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickChair.EntryManager");

	AS3GimmickChair_EntryManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickManager.GetSpotLights
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class AS3TimeSwitchSpotLight*> OutSpotLights                  (Parm, OutParm, ZeroConstructor)

void AS3GimmickManager::GetSpotLights(TArray<class AS3TimeSwitchSpotLight*>* OutSpotLights)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickManager.GetSpotLights");

	AS3GimmickManager_GetSpotLights_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSpotLights != nullptr)
		*OutSpotLights = params.OutSpotLights;
}


// Function Shenmue3.S3GimmickManager.GetPointLights
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class AS3TimeSwitchPointLight*> OutPointLights                 (Parm, OutParm, ZeroConstructor)

void AS3GimmickManager::GetPointLights(TArray<class AS3TimeSwitchPointLight*>* OutPointLights)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickManager.GetPointLights");

	AS3GimmickManager_GetPointLights_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPointLights != nullptr)
		*OutPointLights = params.OutPointLights;
}


// Function Shenmue3.S3NavLinkProxy.OnNavlinkStateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// class US3PathFollowingComponent* PathingComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UNavLinkCustomComponent* NavComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3NavLinkProxy::OnNavlinkStateChange(class US3PathFollowingComponent* PathingComponent, class UNavLinkCustomComponent* NavComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NavLinkProxy.OnNavlinkStateChange");

	AS3NavLinkProxy_OnNavlinkStateChange_Params params;
	params.PathingComponent = PathingComponent;
	params.NavComp = NavComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GimmickOpenDoor.PlayAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3GimmickOpenDoor::PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickOpenDoor.PlayAnimation");

	AS3GimmickOpenDoor_PlayAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GimmickOpenDoor.IsNeedPositionRecovery
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharacter*              SelfCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// class ACharacter*              OpponentCharacter              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3GimmickOpenDoor::IsNeedPositionRecovery(class ACharacter* SelfCharacter, class ACharacter* OpponentCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickOpenDoor.IsNeedPositionRecovery");

	AS3GimmickOpenDoor_IsNeedPositionRecovery_Params params;
	params.SelfCharacter = SelfCharacter;
	params.OpponentCharacter = OpponentCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GimmickOpenDoor.GetRecoveryPoint
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharacter*              Character                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBack                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform AS3GimmickOpenDoor::GetRecoveryPoint(class ACharacter* Character, bool bBack)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GimmickOpenDoor.GetRecoveryPoint");

	AS3GimmickOpenDoor_GetRecoveryPoint_Params params;
	params.Character = Character;
	params.bBack = bBack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GlowTextBlock.SetOutlineColor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            InOutlineColor                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void US3GlowTextBlock::SetOutlineColor(const struct FLinearColor& InOutlineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GlowTextBlock.SetOutlineColor");

	US3GlowTextBlock_SetOutlineColor_Params params;
	params.InOutlineColor = InOutlineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GlowTextBlock.SetOutlineBlurRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InOutlineBlurRadius            (Parm, ZeroConstructor, IsPlainOldData)

void US3GlowTextBlock::SetOutlineBlurRadius(float InOutlineBlurRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GlowTextBlock.SetOutlineBlurRadius");

	US3GlowTextBlock_SetOutlineBlurRadius_Params params;
	params.InOutlineBlurRadius = InOutlineBlurRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GlowTextBlock.ForceUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GlowTextBlock::ForceUpdate(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GlowTextBlock.ForceUpdate");

	US3GlowTextBlock_ForceUpdate_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GlowTextBlock.DrawWidgetToRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void US3GlowTextBlock::DrawWidgetToRenderTarget(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GlowTextBlock.DrawWidgetToRenderTarget");

	US3GlowTextBlock_DrawWidgetToRenderTarget_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GraphicSettingsManager.Init
// (Final, Native, Public)

void US3GraphicSettingsManager::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GraphicSettingsManager.Init");

	US3GraphicSettingsManager_Init_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3GraphicSettingsManager.GetMaxShowNPC
// (Final, Native, Public, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GraphicSettingsManager::GetMaxShowNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GraphicSettingsManager.GetMaxShowNPC");

	US3GraphicSettingsManager_GetMaxShowNPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GraphicSettingsManager.GetMaxLoadedNPC
// (Final, Native, Public, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GraphicSettingsManager::GetMaxLoadedNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GraphicSettingsManager.GetMaxLoadedNPC");

	US3GraphicSettingsManager_GetMaxLoadedNPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3GraphicSettingsManager.GetMaxCastShadowLights
// (Final, Native, Public, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3GraphicSettingsManager::GetMaxCastShadowLights()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3GraphicSettingsManager.GetMaxCastShadowLights");

	US3GraphicSettingsManager_GetMaxCastShadowLights_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HakkachanAwardFunctionLibrary.UnlockHakkachanCountAwards
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class US3_BRallyAwardSystem*   AwardSystem                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)

void US3HakkachanAwardFunctionLibrary::STATIC_UnlockHakkachanCountAwards(class US3_BRallyAwardSystem* AwardSystem, class UDataTable* DataTable, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HakkachanAwardFunctionLibrary.UnlockHakkachanCountAwards");

	US3HakkachanAwardFunctionLibrary_UnlockHakkachanCountAwards_Params params;
	params.AwardSystem = AwardSystem;
	params.DataTable = DataTable;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HakkachanAwardFunctionLibrary.PreviewHakkachanCountAwardsV2
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Owned                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FS3HakkachanAwardPreviewData> OutAwards                      (Parm, OutParm, ZeroConstructor)

void US3HakkachanAwardFunctionLibrary::STATIC_PreviewHakkachanCountAwardsV2(class UDataTable* DataTable, int Owned, int Max, TArray<struct FS3HakkachanAwardPreviewData>* OutAwards)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HakkachanAwardFunctionLibrary.PreviewHakkachanCountAwardsV2");

	US3HakkachanAwardFunctionLibrary_PreviewHakkachanCountAwardsV2_Params params;
	params.DataTable = DataTable;
	params.Owned = Owned;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAwards != nullptr)
		*OutAwards = params.OutAwards;
}


// Function Shenmue3.S3HakkachanAwardFunctionLibrary.FindHakkachanCountForAward
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Award                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            MaxHave                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3HakkachanAwardFunctionLibrary::STATIC_FindHakkachanCountForAward(class UDataTable* DataTable, const struct FName& Award, int MaxHave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HakkachanAwardFunctionLibrary.FindHakkachanCountForAward");

	US3HakkachanAwardFunctionLibrary_FindHakkachanCountForAward_Params params;
	params.DataTable = DataTable;
	params.Award = Award;
	params.MaxHave = MaxHave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HelpInterface.UnregisterHelp
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3HelpRegisterTiming          Timing                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3HelpInterface::UnregisterHelp(ES3HelpRegisterTiming Timing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HelpInterface.UnregisterHelp");

	US3HelpInterface_UnregisterHelp_Params params;
	params.Timing = Timing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HelpInterface.RegisterHelp
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3HelpRegisterTiming          Timing                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3HelpInterface::RegisterHelp(ES3HelpRegisterTiming Timing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HelpInterface.RegisterHelp");

	US3HelpInterface_RegisterHelp_Params params;
	params.Timing = Timing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HelpInterface.IsActivateHelp
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3HelpInterface::IsActivateHelp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HelpInterface.IsActivateHelp");

	US3HelpInterface_IsActivateHelp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HelpInterface.GetHelpPriority
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3HelpPriority                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3HelpPriority US3HelpInterface::GetHelpPriority()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HelpInterface.GetHelpPriority");

	US3HelpInterface_GetHelpPriority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HelpInterface.GetHelpName
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3HelpInterface::GetHelpName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HelpInterface.GetHelpName");

	US3HelpInterface_GetHelpName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HintTalkManager.GetHintTalkScript
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FST_S3HintTalkData      Data                           (ConstParm, Parm, OutParm, ReferenceParm)
// class AS3Character*            TalkedNPC                      (Parm, ZeroConstructor, IsPlainOldData)
// class UTalkScript*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTalkScript* AS3HintTalkManager::GetHintTalkScript(const struct FST_S3HintTalkData& Data, class AS3Character* TalkedNPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HintTalkManager.GetHintTalkScript");

	AS3HintTalkManager_GetHintTalkScript_Params params;
	params.Data = Data;
	params.TalkedNPC = TalkedNPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HintTalkManager.GetHintTalkData
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   NPC_ID                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FST_S3HintTalkData      Data                           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HintTalkManager::GetHintTalkData(const struct FName& NPC_ID, struct FST_S3HintTalkData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HintTalkManager.GetHintTalkData");

	AS3HintTalkManager_GetHintTalkData_Params params;
	params.NPC_ID = NPC_ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Shenmue3.S3HintTalkManager.CreateKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHintTarget                    HintTalkKind                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsAnswer                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ES3CharacterGender> Gender                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Age                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AS3HintTalkManager::CreateKey(EHintTarget HintTalkKind, bool IsAnswer, TEnumAsByte<ES3CharacterGender> Gender, int Age)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HintTalkManager.CreateKey");

	AS3HintTalkManager_CreateKey_Params params;
	params.HintTalkKind = HintTalkKind;
	params.IsAnswer = IsAnswer;
	params.Gender = Gender;
	params.Age = Age;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HintTalkManager.AgeToIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Age                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3HintTalkManager::AgeToIndex(int Age)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HintTalkManager.AgeToIndex");

	AS3HintTalkManager_AgeToIndex_Params params;
	params.Age = Age;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.ToggleWidget
// (Final, Native, Public, BlueprintCallable)

void AS3HUD::ToggleWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ToggleWidget");

	AS3HUD_ToggleWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.ShowWidget
// (Final, Native, Public, BlueprintCallable)

void AS3HUD::ShowWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ShowWidget");

	AS3HUD_ShowWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.ShowRewardNotice
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3RewardCategory              Category                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::ShowRewardNotice(ES3RewardCategory Category)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ShowRewardNotice");

	AS3HUD_ShowRewardNotice_Params params;
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.ShowLoading
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::ShowLoading(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ShowLoading");

	AS3HUD_ShowLoading_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.ScreenFadeOut
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            FadeColor                      (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::ScreenFadeOut(float FadeTime, const struct FLinearColor& FadeColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ScreenFadeOut");

	AS3HUD_ScreenFadeOut_Params params;
	params.FadeTime = FadeTime;
	params.FadeColor = FadeColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.ScreenFadeInAutoColor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::ScreenFadeInAutoColor(float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ScreenFadeInAutoColor");

	AS3HUD_ScreenFadeInAutoColor_Params params;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.ScreenFadeIn
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            FadeColor                      (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::ScreenFadeIn(float FadeTime, const struct FLinearColor& FadeColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ScreenFadeIn");

	AS3HUD_ScreenFadeIn_Params params;
	params.FadeTime = FadeTime;
	params.FadeColor = FadeColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.PermitWindowUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::PermitWindowUI(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.PermitWindowUI");

	AS3HUD_PermitWindowUI_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.PermitDetectAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::PermitDetectAction(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.PermitDetectAction");

	AS3HUD_PermitDetectAction_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.OpenCommonDialog
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           Labels                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// ES3DialogType                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextJustify>      Justify                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::OpenCommonDialog(class AActor* Executor, TArray<struct FName> Labels, ES3DialogType Type, TEnumAsByte<ETextJustify> Justify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.OpenCommonDialog");

	AS3HUD_OpenCommonDialog_Params params;
	params.Executor = Executor;
	params.Labels = Labels;
	params.Type = Type;
	params.Justify = Justify;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.IsVisibleDialog
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::IsVisibleDialog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.IsVisibleDialog");

	AS3HUD_IsVisibleDialog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.IsLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::IsLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.IsLoading");

	AS3HUD_IsLoading_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.HideWidget
// (Final, Native, Public, BlueprintCallable)

void AS3HUD::HideWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.HideWidget");

	AS3HUD_HideWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.HideLoading
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3HUD::HideLoading(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.HideLoading");

	AS3HUD_HideLoading_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.GetWidgets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class US3UserWidget*>   ReturnValue                    (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class US3UserWidget*> AS3HUD::GetWidgets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.GetWidgets");

	AS3HUD_GetWidgets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3HUD.ForbidWindowUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::ForbidWindowUI(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ForbidWindowUI");

	AS3HUD_ForbidWindowUI_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.ForbidDetectAction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::ForbidDetectAction(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.ForbidDetectAction");

	AS3HUD_ForbidDetectAction_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.CloseDialog
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3HUD::CloseDialog(class AActor* Executor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.CloseDialog");

	AS3HUD_CloseDialog_Params params;
	params.Executor = Executor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3HUD.AddUserWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3UserWidget*           Widget                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3HUD::AddUserWidget(class US3UserWidget* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3HUD.AddUserWidget");

	AS3HUD_AddUserWidget_Params params;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.UnPause
// (Final, Native, Public, BlueprintCallable)

void US3InputBufferComponent::UnPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.UnPause");

	US3InputBufferComponent_UnPause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.RecordInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)

void US3InputBufferComponent::RecordInput(const struct FName& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.RecordInput");

	US3InputBufferComponent_RecordInput_Params params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.PopNextInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBufferedInputData      ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBufferedInputData US3InputBufferComponent::PopNextInputAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.PopNextInputAction");

	US3InputBufferComponent_PopNextInputAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InputBufferComponent.Pause
// (Final, Native, Public, BlueprintCallable)

void US3InputBufferComponent::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.Pause");

	US3InputBufferComponent_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.Num
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3InputBufferComponent::Num()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.Num");

	US3InputBufferComponent_Num_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InputBufferComponent.IsRecordingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3InputBufferComponent::IsRecordingEnabled(const struct FName& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.IsRecordingEnabled");

	US3InputBufferComponent_IsRecordingEnabled_Params params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InputBufferComponent.IsPaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3InputBufferComponent::IsPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.IsPaused");

	US3InputBufferComponent_IsPaused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InputBufferComponent.EnableRecordingIdentifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)

void US3InputBufferComponent::EnableRecordingIdentifier(const struct FName& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.EnableRecordingIdentifier");

	US3InputBufferComponent_EnableRecordingIdentifier_Params params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.EnableAllIdentifiers
// (Final, Native, Public, BlueprintCallable)

void US3InputBufferComponent::EnableAllIdentifiers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.EnableAllIdentifiers");

	US3InputBufferComponent_EnableAllIdentifiers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.DisableRecordingIdentifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)

void US3InputBufferComponent::DisableRecordingIdentifier(const struct FName& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.DisableRecordingIdentifier");

	US3InputBufferComponent_DisableRecordingIdentifier_Params params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.DisableAllIdentifiers
// (Final, Native, Public, BlueprintCallable)

void US3InputBufferComponent::DisableAllIdentifiers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.DisableAllIdentifiers");

	US3InputBufferComponent_DisableAllIdentifiers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.ContainsRecent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxTimePast                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3InputBufferComponent::ContainsRecent(const struct FName& Identifier, float MaxTimePast)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.ContainsRecent");

	US3InputBufferComponent_ContainsRecent_Params params;
	params.Identifier = Identifier;
	params.MaxTimePast = MaxTimePast;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InputBufferComponent.Contains
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3InputBufferComponent::Contains(const struct FName& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.Contains");

	US3InputBufferComponent_Contains_Params params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InputBufferComponent.ClearRecords
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Identifier                     (Parm, ZeroConstructor, IsPlainOldData)

void US3InputBufferComponent::ClearRecords(const struct FName& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.ClearRecords");

	US3InputBufferComponent_ClearRecords_Params params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputBufferComponent.ClearAllRecords
// (Final, Native, Public, BlueprintCallable)

void US3InputBufferComponent::ClearAllRecords()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputBufferComponent.ClearAllRecords");

	US3InputBufferComponent_ClearAllRecords_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InputDeviceManager.IsGamepadAttached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3InputDeviceManager::IsGamepadAttached()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InputDeviceManager.IsGamepadAttached");

	US3InputDeviceManager_IsGamepadAttached_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.ShouldShowListItemDetails
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            InId                           (Parm, ZeroConstructor, IsPlainOldData)
// ES3ItemListMenuType            MenuType                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemFunctionLibrary::STATIC_ShouldShowListItemDetails(int InId, ES3ItemListMenuType MenuType, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.ShouldShowListItemDetails");

	US3ItemFunctionLibrary_ShouldShowListItemDetails_Params params;
	params.InId = InId;
	params.MenuType = MenuType;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.IsItemListAdd
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3ItemListMenuType            MenuType                       (Parm, ZeroConstructor, IsPlainOldData)
// ES3ItemDataGroup               Group                          (Parm, ZeroConstructor, IsPlainOldData)
// ES3ItemDataRarity              Rarity                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemFunctionLibrary::STATIC_IsItemListAdd(ES3ItemListMenuType MenuType, ES3ItemDataGroup Group, ES3ItemDataRarity Rarity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.IsItemListAdd");

	US3ItemFunctionLibrary_IsItemListAdd_Params params;
	params.MenuType = MenuType;
	params.Group = Group;
	params.Rarity = Rarity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableRowNamesByGroup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ES3ItemDataGroup               Group                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> US3ItemFunctionLibrary::STATIC_GetItemTableRowNamesByGroup(ES3ItemDataGroup Group, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableRowNamesByGroup");

	US3ItemFunctionLibrary_GetItemTableRowNamesByGroup_Params params;
	params.Group = Group;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableRowNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> US3ItemFunctionLibrary::STATIC_GetItemTableRowNames(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableRowNames");

	US3ItemFunctionLibrary_GetItemTableRowNames_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3ItemFunctionLibrary::STATIC_GetItemTableName(const struct FName& Label, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableName");

	US3ItemFunctionLibrary_GetItemTableName_Params params;
	params.Label = Label;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableMeshReference
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3ItemFunctionLibrary::STATIC_GetItemTableMeshReference(const struct FName& Label, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableMeshReference");

	US3ItemFunctionLibrary_GetItemTableMeshReference_Params params;
	params.Label = Label;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMesh*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UStaticMesh* US3ItemFunctionLibrary::STATIC_GetItemTableMesh(const struct FName& Label, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableMesh");

	US3ItemFunctionLibrary_GetItemTableMesh_Params params;
	params.Label = Label;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableLength
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ItemFunctionLibrary::STATIC_GetItemTableLength(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableLength");

	US3ItemFunctionLibrary_GetItemTableLength_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableDescription
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3ItemFunctionLibrary::STATIC_GetItemTableDescription(const struct FName& Label, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableDescription");

	US3ItemFunctionLibrary_GetItemTableDescription_Params params;
	params.Label = Label;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableDataNoText
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3ItemDataTable        OutItemData                    (Parm, OutParm)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemFunctionLibrary::STATIC_GetItemTableDataNoText(const struct FName& Label, class UObject* WorldContextObject, struct FS3ItemDataTable* OutItemData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableDataNoText");

	US3ItemFunctionLibrary_GetItemTableDataNoText_Params params;
	params.Label = Label;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutItemData != nullptr)
		*OutItemData = params.OutItemData;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableDataFromNumber
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3ItemDataTable        OutItemData                    (Parm, OutParm)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemFunctionLibrary::STATIC_GetItemTableDataFromNumber(int ID, class UObject* WorldContextObject, struct FS3ItemDataTable* OutItemData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableDataFromNumber");

	US3ItemFunctionLibrary_GetItemTableDataFromNumber_Params params;
	params.ID = ID;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutItemData != nullptr)
		*OutItemData = params.OutItemData;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemTableData
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3ItemDataTable        OutItemData                    (Parm, OutParm)
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemFunctionLibrary::STATIC_GetItemTableData(const struct FName& Label, class UObject* WorldContextObject, struct FS3ItemDataTable* OutItemData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemTableData");

	US3ItemFunctionLibrary_GetItemTableData_Params params;
	params.Label = Label;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutItemData != nullptr)
		*OutItemData = params.OutItemData;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ID                             (Parm, ZeroConstructor)
// bool                           bStrict                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ItemFunctionLibrary::STATIC_GetItemIndex(const struct FString& ID, bool bStrict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemIndex");

	US3ItemFunctionLibrary_GetItemIndex_Params params;
	params.ID = ID;
	params.bStrict = bStrict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.GetItemDataTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UDataTable*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UDataTable* US3ItemFunctionLibrary::STATIC_GetItemDataTable(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.GetItemDataTable");

	US3ItemFunctionLibrary_GetItemDataTable_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.FormatItemId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 InId                           (Parm, ZeroConstructor)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3ItemFunctionLibrary::STATIC_FormatItemId(const struct FString& InId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.FormatItemId");

	US3ItemFunctionLibrary_FormatItemId_Params params;
	params.InId = InId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemFunctionLibrary.EnableItemCacheData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3ItemFunctionLibrary::STATIC_EnableItemCacheData(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.EnableItemCacheData");

	US3ItemFunctionLibrary_EnableItemCacheData_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemFunctionLibrary.DisableItemCacheData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3ItemFunctionLibrary::STATIC_DisableItemCacheData(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemFunctionLibrary.DisableItemCacheData");

	US3ItemFunctionLibrary_DisableItemCacheData_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemManager.GetItemNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ID                             (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ItemManager::GetItemNum(const struct FString& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemManager.GetItemNum");

	US3ItemManager_GetItemNum_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemManager.GetItemLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3ItemManager::GetItemLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemManager.GetItemLength");

	US3ItemManager_GetItemLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemManager.GetItemFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ID                             (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemManager::GetItemFlag(const struct FString& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemManager.GetItemFlag");

	US3ItemManager_GetItemFlag_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemManager.GetItemCheckFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ItemManager::GetItemCheckFlag(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemManager.GetItemCheckFlag");

	US3ItemManager_GetItemCheckFlag_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemSpawner.GetUniqueName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3ItemSpawner::GetUniqueName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawner.GetUniqueName");

	AS3ItemSpawner_GetUniqueName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ItemSpawner.DelayedInitialize
// (Event, Public, BlueprintEvent)

void AS3ItemSpawner::DelayedInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawner.DelayedInitialize");

	AS3ItemSpawner_DelayedInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemSpawnerManager.UpdateDelayedInitialize
// (Native, Event, Public, BlueprintEvent)

void AS3ItemSpawnerManager::UpdateDelayedInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawnerManager.UpdateDelayedInitialize");

	AS3ItemSpawnerManager_UpdateDelayedInitialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemSpawnerManager.RemoveItemSpawner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3ItemSpawner*          ItemSpawner                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3ItemSpawnerManager::RemoveItemSpawner(class AS3ItemSpawner* ItemSpawner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawnerManager.RemoveItemSpawner");

	AS3ItemSpawnerManager_RemoveItemSpawner_Params params;
	params.ItemSpawner = ItemSpawner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemSpawnerManager.RemoveDelayedInitializeSpawner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3ItemSpawner*          ItemSpawner                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3ItemSpawnerManager::RemoveDelayedInitializeSpawner(class AS3ItemSpawner* ItemSpawner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawnerManager.RemoveDelayedInitializeSpawner");

	AS3ItemSpawnerManager_RemoveDelayedInitializeSpawner_Params params;
	params.ItemSpawner = ItemSpawner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemSpawnerManager.AddItemSpawner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3ItemSpawner*          ItemSpawner                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3ItemSpawnerManager::AddItemSpawner(class AS3ItemSpawner* ItemSpawner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawnerManager.AddItemSpawner");

	AS3ItemSpawnerManager_AddItemSpawner_Params params;
	params.ItemSpawner = ItemSpawner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ItemSpawnerManager.AddDelayedInitializeSpawner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AS3ItemSpawner*          ItemSpawner                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3ItemSpawnerManager::AddDelayedInitializeSpawner(class AS3ItemSpawner* ItemSpawner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ItemSpawnerManager.AddDelayedInitializeSpawner");

	AS3ItemSpawnerManager_AddDelayedInitializeSpawner_Params params;
	params.ItemSpawner = ItemSpawner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3KartPawnBase.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3KartPawnBase::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KartPawnBase.GetClothCharaName");

	AS3KartPawnBase_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KeyConfigFunctionLibrary.RemoveActionMapping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   ActionName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FKey                    Key                            (Parm)
// class UPlayerInput*            PlayerInput                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FInputActionKeyMapping> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FInputActionKeyMapping> US3KeyConfigFunctionLibrary::STATIC_RemoveActionMapping(const struct FName& ActionName, const struct FKey& Key, class UPlayerInput* PlayerInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KeyConfigFunctionLibrary.RemoveActionMapping");

	US3KeyConfigFunctionLibrary_RemoveActionMapping_Params params;
	params.ActionName = ActionName;
	params.Key = Key;
	params.PlayerInput = PlayerInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KeyConfigFunctionLibrary.IsKeyGamepadInput
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FKey                    Key                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3KeyConfigFunctionLibrary::STATIC_IsKeyGamepadInput(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KeyConfigFunctionLibrary.IsKeyGamepadInput");

	US3KeyConfigFunctionLibrary_IsKeyGamepadInput_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KeyConfigFunctionLibrary.GetUIInputDevice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContext                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ES3InputDeviceModel            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3InputDeviceModel US3KeyConfigFunctionLibrary::STATIC_GetUIInputDevice(class UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KeyConfigFunctionLibrary.GetUIInputDevice");

	US3KeyConfigFunctionLibrary_GetUIInputDevice_Params params;
	params.WorldContext = WorldContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KeyConfigFunctionLibrary.AddActionMapping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   ActionName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FKey                    Key                            (Parm)
// class UPlayerInput*            PlayerInput                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FInputActionKeyMapping> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FInputActionKeyMapping> US3KeyConfigFunctionLibrary::STATIC_AddActionMapping(const struct FName& ActionName, const struct FKey& Key, class UPlayerInput* PlayerInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KeyConfigFunctionLibrary.AddActionMapping");

	US3KeyConfigFunctionLibrary_AddActionMapping_Params params;
	params.ActionName = ActionName;
	params.Key = Key;
	params.PlayerInput = PlayerInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InteractionComponent.SetBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InBoxExtent                    (Parm, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void US3InteractionComponent::SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InteractionComponent.SetBoxExtent");

	US3InteractionComponent_SetBoxExtent_Params params;
	params.InBoxExtent = InBoxExtent;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3InteractionComponent.GetUnscaledBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3InteractionComponent::GetUnscaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InteractionComponent.GetUnscaledBoxExtent");

	US3InteractionComponent_GetUnscaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InteractionComponent.GetScaledBoxExtent
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3InteractionComponent::GetScaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InteractionComponent.GetScaledBoxExtent");

	US3InteractionComponent_GetScaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3InteractionComponent.CaptureMovement
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AS3PlayerController*     PlayerController               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCaptureMovement               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3InteractionComponent::CaptureMovement(class AS3PlayerController* PlayerController, bool bCaptureMovement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3InteractionComponent.CaptureMovement");

	US3InteractionComponent_CaptureMovement_Params params;
	params.PlayerController = PlayerController;
	params.bCaptureMovement = bCaptureMovement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3KismetPlayerLibrary.GetAxisZ
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector US3KismetPlayerLibrary::GetAxisZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetPlayerLibrary.GetAxisZ");

	US3KismetPlayerLibrary_GetAxisZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetPlayerLibrary.GetAxisY
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector US3KismetPlayerLibrary::GetAxisY()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetPlayerLibrary.GetAxisY");

	US3KismetPlayerLibrary_GetAxisY_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetPlayerLibrary.GetAxisX
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector US3KismetPlayerLibrary::GetAxisX()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetPlayerLibrary.GetAxisX");

	US3KismetPlayerLibrary_GetAxisX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.Vector2DLengthSquared
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 v1                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 v2                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_Vector2DLengthSquared(const struct FVector& v1, const struct FVector& v2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.Vector2DLengthSquared");

	US3KismetMathLibrary_Vector2DLengthSquared_Params params;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.S3SegmentIntersection2D
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 SegmentStartA                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 SegmentEndA                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 SegmentStartB                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 SegmentEndB                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 OutIntersectionPoint           (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3KismetMathLibrary::STATIC_S3SegmentIntersection2D(const struct FVector& SegmentStartA, const struct FVector& SegmentEndA, const struct FVector& SegmentStartB, const struct FVector& SegmentEndB, struct FVector* OutIntersectionPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.S3SegmentIntersection2D");

	US3KismetMathLibrary_S3SegmentIntersection2D_Params params;
	params.SegmentStartA = SegmentStartA;
	params.SegmentEndA = SegmentEndA;
	params.SegmentStartB = SegmentStartB;
	params.SegmentEndB = SegmentEndB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = params.OutIntersectionPoint;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.RotateVectorXY
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Center                         (Parm, IsPlainOldData)
// struct FVector                 pos                            (Parm, IsPlainOldData)
// float                          RotDeg                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3KismetMathLibrary::STATIC_RotateVectorXY(const struct FVector& Center, const struct FVector& pos, float RotDeg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.RotateVectorXY");

	US3KismetMathLibrary_RotateVectorXY_Params params;
	params.Center = Center;
	params.pos = pos;
	params.RotDeg = RotDeg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.NormalizeAngle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          RotDeg                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_NormalizeAngle(float RotDeg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.NormalizeAngle");

	US3KismetMathLibrary_NormalizeAngle_Params params;
	params.RotDeg = RotDeg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.LerpAngleSigned
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          AlphaWithSign                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_LerpAngleSigned(float A, float B, float AlphaWithSign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.LerpAngleSigned");

	US3KismetMathLibrary_LerpAngleSigned_Params params;
	params.A = A;
	params.B = B;
	params.AlphaWithSign = AlphaWithSign;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.LerpAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_LerpAngle(float A, float B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.LerpAngle");

	US3KismetMathLibrary_LerpAngle_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.InverseLerpLegacy
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_InverseLerpLegacy(float A, float B, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.InverseLerpLegacy");

	US3KismetMathLibrary_InverseLerpLegacy_Params params;
	params.A = A;
	params.B = B;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.InterpolateAngleConstantSigned
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DirectionSignedDegrees         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_InterpolateAngleConstantSigned(float Source, float Target, float DirectionSignedDegrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.InterpolateAngleConstantSigned");

	US3KismetMathLibrary_InterpolateAngleConstantSigned_Params params;
	params.Source = Source;
	params.Target = Target;
	params.DirectionSignedDegrees = DirectionSignedDegrees;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.InterpolateAngleConstantNear
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Delta                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_InterpolateAngleConstantNear(float Source, float Target, float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.InterpolateAngleConstantNear");

	US3KismetMathLibrary_InterpolateAngleConstantNear_Params params;
	params.Source = Source;
	params.Target = Target;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.GetTriangleNormal
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 V0                             (Parm, IsPlainOldData)
// struct FVector                 v1                             (Parm, IsPlainOldData)
// struct FVector                 v2                             (Parm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3KismetMathLibrary::STATIC_GetTriangleNormal(const struct FVector& V0, const struct FVector& v1, const struct FVector& v2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.GetTriangleNormal");

	US3KismetMathLibrary_GetTriangleNormal_Params params;
	params.V0 = V0;
	params.v1 = v1;
	params.v2 = v2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.GetSplineAreaAtPointVector3D
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FVector>         PointVector                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Offset                         (Parm, IsPlainOldData)
// struct FBox                    ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FBox US3KismetMathLibrary::STATIC_GetSplineAreaAtPointVector3D(TArray<struct FVector> PointVector, const struct FVector& Offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.GetSplineAreaAtPointVector3D");

	US3KismetMathLibrary_GetSplineAreaAtPointVector3D_Params params;
	params.PointVector = PointVector;
	params.Offset = Offset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.DifferenceAngle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          RotDeg1                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          RotDeg2                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_DifferenceAngle(float RotDeg1, float RotDeg2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.DifferenceAngle");

	US3KismetMathLibrary_DifferenceAngle_Params params;
	params.RotDeg1 = RotDeg1;
	params.RotDeg2 = RotDeg2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.ConvertAngleToSignDegrees
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Sign                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_ConvertAngleToSignDegrees(float AngleDegrees, float Sign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.ConvertAngleToSignDegrees");

	US3KismetMathLibrary_ConvertAngleToSignDegrees_Params params;
	params.AngleDegrees = AngleDegrees;
	params.Sign = Sign;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.AngleVector2DSignedDegrees
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Source                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_AngleVector2DSignedDegrees(const struct FVector& Target, const struct FVector& Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.AngleVector2DSignedDegrees");

	US3KismetMathLibrary_AngleVector2DSignedDegrees_Params params;
	params.Target = Target;
	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.AngleDifferenceSignedDegrees
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3KismetMathLibrary::STATIC_AngleDifferenceSignedDegrees(float Target, float Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.AngleDifferenceSignedDegrees");

	US3KismetMathLibrary_AngleDifferenceSignedDegrees_Params params;
	params.Target = Target;
	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3KismetMathLibrary.Add_RotatorRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                A                              (Parm, IsPlainOldData)
// struct FRotator                B                              (Parm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator US3KismetMathLibrary::STATIC_Add_RotatorRotator(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3KismetMathLibrary.Add_RotatorRotator");

	US3KismetMathLibrary_Add_RotatorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LiveStreamingManager.SetEnableStreaming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void US3LiveStreamingManager::SetEnableStreaming(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LiveStreamingManager.SetEnableStreaming");

	US3LiveStreamingManager_SetEnableStreaming_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LiveStreamingManager.OnLevelChanged
// (Final, Native, Public)

void US3LiveStreamingManager::OnLevelChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LiveStreamingManager.OnLevelChanged");

	US3LiveStreamingManager_OnLevelChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LiveStreamingManager.OnGameStepChanged
// (Final, Native, Public)
// Parameters:
// int                            SetSteps                       (Parm, ZeroConstructor, IsPlainOldData)

void US3LiveStreamingManager::OnGameStepChanged(int SetSteps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LiveStreamingManager.OnGameStepChanged");

	US3LiveStreamingManager_OnGameStepChanged_Params params;
	params.SetSteps = SetSteps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LiveStreamingManager.GetGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3LiveStreamingManager::GetGameInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LiveStreamingManager.GetGameInstance");

	US3LiveStreamingManager_GetGameInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LoadingFlipBookImage.SetFlipBookAnimFlg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Flg                            (Parm, ZeroConstructor, IsPlainOldData)

void US3LoadingFlipBookImage::SetFlipBookAnimFlg(bool Flg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LoadingFlipBookImage.SetFlipBookAnimFlg");

	US3LoadingFlipBookImage_SetFlipBookAnimFlg_Params params;
	params.Flg = Flg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LoadingWidget.SetLoadingType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3LoadingType                 Type                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3LoadingWidget::SetLoadingType(ES3LoadingType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LoadingWidget.SetLoadingType");

	US3LoadingWidget_SetLoadingType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LoadingWidget.GetProgressBarImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class US3LoadingProgressImage* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3LoadingProgressImage* US3LoadingWidget::GetProgressBarImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LoadingWidget.GetProgressBarImage");

	US3LoadingWidget_GetProgressBarImage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LoadingWidget.GetCharaImageIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3LoadingWidget::GetCharaImageIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LoadingWidget.GetCharaImageIndex");

	US3LoadingWidget_GetCharaImageIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LoadingWidget.GetBackImageIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3LoadingWidget::GetBackImageIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LoadingWidget.GetBackImageIndex");

	US3LoadingWidget_GetBackImageIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LookAtFSMComponent.SetTargetOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void US3LookAtFSMComponent::SetTargetOffset(float Yaw, float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.SetTargetOffset");

	US3LookAtFSMComponent_SetTargetOffset_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.SetTargetActorDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          DelayTime                      (Parm, ZeroConstructor, IsPlainOldData)

void US3LookAtFSMComponent::SetTargetActorDelay(class AActor* TargetActor, float DelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.SetTargetActorDelay");

	US3LookAtFSMComponent_SetTargetActorDelay_Params params;
	params.TargetActor = TargetActor;
	params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)

void US3LookAtFSMComponent::SetTargetActor(class AActor* TargetActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.SetTargetActor");

	US3LookAtFSMComponent_SetTargetActor_Params params;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.SetFaceAnimDataAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3FaceAnimDataAsset*    Original                       (Parm, ZeroConstructor, IsPlainOldData)
// class US3FaceAnimDataAsset*    Default                        (Parm, ZeroConstructor, IsPlainOldData)

void US3LookAtFSMComponent::SetFaceAnimDataAsset(class US3FaceAnimDataAsset* Original, class US3FaceAnimDataAsset* Default)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.SetFaceAnimDataAsset");

	US3LookAtFSMComponent_SetFaceAnimDataAsset_Params params;
	params.Original = Original;
	params.Default = Default;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.SetEnableLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void US3LookAtFSMComponent::SetEnableLookAt(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.SetEnableLookAt");

	US3LookAtFSMComponent_SetEnableLookAt_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.ResetTargetOffset
// (Final, Native, Public, BlueprintCallable)

void US3LookAtFSMComponent::ResetTargetOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.ResetTargetOffset");

	US3LookAtFSMComponent_ResetTargetOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.ResetRotationInterpSpeed
// (Final, Native, Public, BlueprintCallable)

void US3LookAtFSMComponent::ResetRotationInterpSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.ResetRotationInterpSpeed");

	US3LookAtFSMComponent_ResetRotationInterpSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.ResetLookAtIKCorrectionWeight
// (Final, Native, Public, BlueprintCallable)

void US3LookAtFSMComponent::ResetLookAtIKCorrectionWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.ResetLookAtIKCorrectionWeight");

	US3LookAtFSMComponent_ResetLookAtIKCorrectionWeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.ResetLookAtBlendedWeight
// (Final, Native, Public, BlueprintCallable)

void US3LookAtFSMComponent::ResetLookAtBlendedWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.ResetLookAtBlendedWeight");

	US3LookAtFSMComponent_ResetLookAtBlendedWeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.ModifyLookAtRangeParamaterCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3LookAtFSMComponent::ModifyLookAtRangeParamaterCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.ModifyLookAtRangeParamaterCheck");

	US3LookAtFSMComponent_ModifyLookAtRangeParamaterCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LookAtFSMComponent.IsProcessingLookAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3LookAtFSMComponent::IsProcessingLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.IsProcessingLookAt");

	US3LookAtFSMComponent_IsProcessingLookAt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LookAtFSMComponent.GetOwnerTagCharaName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3LookAtFSMComponent::GetOwnerTagCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.GetOwnerTagCharaName");

	US3LookAtFSMComponent_GetOwnerTagCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LookAtFSMComponent.GetOwnerCharaTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FGameplayTag US3LookAtFSMComponent::GetOwnerCharaTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.GetOwnerCharaTag");

	US3LookAtFSMComponent_GetOwnerCharaTag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3LookAtFSMComponent.GetLookAtTargetLocation
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 OutTargetLocation              (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3LookAtFSMComponent::GetLookAtTargetLocation(struct FVector* OutTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.GetLookAtTargetLocation");

	US3LookAtFSMComponent_GetLookAtTargetLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTargetLocation != nullptr)
		*OutTargetLocation = params.OutTargetLocation;

	return params.ReturnValue;
}


// Function Shenmue3.S3LookAtFSMComponent.GetLookAtIKCorrectionWeightInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3CharacterLookAtIKCorrectionWeight OutInfo                        (Parm, OutParm, IsPlainOldData)

void US3LookAtFSMComponent::GetLookAtIKCorrectionWeightInfo(struct FS3CharacterLookAtIKCorrectionWeight* OutInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.GetLookAtIKCorrectionWeightInfo");

	US3LookAtFSMComponent_GetLookAtIKCorrectionWeightInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutInfo != nullptr)
		*OutInfo = params.OutInfo;
}


// Function Shenmue3.S3LookAtFSMComponent.GetLookAtClampInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3CharacterLookAtWholeBodyParamater OutInfo                        (Parm, OutParm)

void US3LookAtFSMComponent::GetLookAtClampInfo(struct FS3CharacterLookAtWholeBodyParamater* OutInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.GetLookAtClampInfo");

	US3LookAtFSMComponent_GetLookAtClampInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutInfo != nullptr)
		*OutInfo = params.OutInfo;
}


// Function Shenmue3.S3LookAtFSMComponent.GetLookAtBlendedWeightInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3CharacterLookAtBlendedWeight OutInfo                        (Parm, OutParm, IsPlainOldData)

void US3LookAtFSMComponent::GetLookAtBlendedWeightInfo(struct FS3CharacterLookAtBlendedWeight* OutInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.GetLookAtBlendedWeightInfo");

	US3LookAtFSMComponent_GetLookAtBlendedWeightInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutInfo != nullptr)
		*OutInfo = params.OutInfo;
}


// Function Shenmue3.S3LookAtFSMComponent.CopyPreModifyLookAtRangeParamater
// (Final, Native, Public, BlueprintCallable)

void US3LookAtFSMComponent::CopyPreModifyLookAtRangeParamater()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.CopyPreModifyLookAtRangeParamater");

	US3LookAtFSMComponent_CopyPreModifyLookAtRangeParamater_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3LookAtFSMComponent.ClearTargetActorDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DelayTime                      (Parm, ZeroConstructor, IsPlainOldData)

void US3LookAtFSMComponent::ClearTargetActorDelay(float DelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3LookAtFSMComponent.ClearTargetActorDelay");

	US3LookAtFSMComponent_ClearTargetActorDelay_Params params;
	params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetTabFlagUnread
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<bool>                   TabUnreadArray                 (Parm, ZeroConstructor)

void US3MemoFlagManager::SetTabFlagUnread(TArray<bool> TabUnreadArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetTabFlagUnread");

	US3MemoFlagManager_SetTabFlagUnread_Params params;
	params.TabUnreadArray = TabUnreadArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoTabIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            memoTabNum                     (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoTabIndex(int memoTabNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoTabIndex");

	US3MemoFlagManager_SetMemoTabIndex_Params params;
	params.memoTabNum = memoTabNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoMapMask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsVisible                      (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoMapMask(int Index, bool IsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoMapMask");

	US3MemoFlagManager_SetMemoMapMask_Params params;
	params.Index = Index;
	params.IsVisible = IsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoLatestMotivationIndex_Tab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            TabIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoLatestMotivationIndex_Tab(int Index, int TabIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoLatestMotivationIndex_Tab");

	US3MemoFlagManager_SetMemoLatestMotivationIndex_Tab_Params params;
	params.Index = Index;
	params.TabIndex = TabIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoLatestMotivationIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoLatestMotivationIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoLatestMotivationIndex");

	US3MemoFlagManager_SetMemoLatestMotivationIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoLatestIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoLatestIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoLatestIndex");

	US3MemoFlagManager_SetMemoLatestIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoDataArrayUnderline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsUnderline                    (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoDataArrayUnderline(int Index, bool IsUnderline)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoDataArrayUnderline");

	US3MemoFlagManager_SetMemoDataArrayUnderline_Params params;
	params.Index = Index;
	params.IsUnderline = IsUnderline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoDataArrayPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            page                           (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoDataArrayPage(int Index, int page)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoDataArrayPage");

	US3MemoFlagManager_SetMemoDataArrayPage_Params params;
	params.Index = Index;
	params.page = page;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.SetMemoDataArrayIdentifer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            identifer                      (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::SetMemoDataArrayIdentifer(int Index, int identifer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.SetMemoDataArrayIdentifer");

	US3MemoFlagManager_SetMemoDataArrayIdentifer_Params params;
	params.Index = Index;
	params.identifer = identifer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.RemoveMemoSubEventOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::RemoveMemoSubEventOrder(int MemoId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.RemoveMemoSubEventOrder");

	US3MemoFlagManager_RemoveMemoSubEventOrder_Params params;
	params.MemoId = MemoId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.IsMemoUnread
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MemoFlagManager::IsMemoUnread()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.IsMemoUnread");

	US3MemoFlagManager_IsMemoUnread_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.InitMemo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ArrayLength                    (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::InitMemo(int ArrayLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.InitMemo");

	US3MemoFlagManager_InitMemo_Params params;
	params.ArrayLength = ArrayLength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemoFlagManager.GetTabFlagUnread
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<bool>                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<bool> US3MemoFlagManager::GetTabFlagUnread()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetTabFlagUnread");

	US3MemoFlagManager_GetTabFlagUnread_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoUnreadNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MemoFlagManager::GetMemoUnreadNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoUnreadNum");

	US3MemoFlagManager_GetMemoUnreadNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoSubEventOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> US3MemoFlagManager::GetMemoSubEventOrder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoSubEventOrder");

	US3MemoFlagManager_GetMemoSubEventOrder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoMapMask
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<bool>                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<bool> US3MemoFlagManager::GetMemoMapMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoMapMask");

	US3MemoFlagManager_GetMemoMapMask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoLatestMotivationIndexs
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<int>                    MotivationIndexs               (Parm, OutParm, ZeroConstructor)

void US3MemoFlagManager::GetMemoLatestMotivationIndexs(TArray<int>* MotivationIndexs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoLatestMotivationIndexs");

	US3MemoFlagManager_GetMemoLatestMotivationIndexs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MotivationIndexs != nullptr)
		*MotivationIndexs = params.MotivationIndexs;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoLatestMotivationIndex_Tab
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            TabIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::GetMemoLatestMotivationIndex_Tab(int TabIndex, int* Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoLatestMotivationIndex_Tab");

	US3MemoFlagManager_GetMemoLatestMotivationIndex_Tab_Params params;
	params.TabIndex = TabIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoLatestMotivationIndex
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::GetMemoLatestMotivationIndex(int* Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoLatestMotivationIndex");

	US3MemoFlagManager_GetMemoLatestMotivationIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoLatestIndex
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::GetMemoLatestIndex(int* Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoLatestIndex");

	US3MemoFlagManager_GetMemoLatestIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoFlagLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MemoFlagManager::GetMemoFlagLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoFlagLength");

	US3MemoFlagManager_GetMemoFlagLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoFlagLastindex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MemoFlagManager::GetMemoFlagLastindex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoFlagLastindex");

	US3MemoFlagManager_GetMemoFlagLastindex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoFlag
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           flag                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Already                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::GetMemoFlag(int Index, bool* flag, bool* Already)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoFlag");

	US3MemoFlagManager_GetMemoFlag_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (flag != nullptr)
		*flag = params.flag;
	if (Already != nullptr)
		*Already = params.Already;
}


// Function Shenmue3.S3MemoFlagManager.GetMemoDataArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FMemoData>       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FMemoData> US3MemoFlagManager::GetMemoDataArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.GetMemoDataArray");

	US3MemoFlagManager_GetMemoDataArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoFlagManager.AddMemoSubEventOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MemoId                         (Parm, ZeroConstructor, IsPlainOldData)

void US3MemoFlagManager::AddMemoSubEventOrder(int MemoId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoFlagManager.AddMemoSubEventOrder");

	US3MemoFlagManager_AddMemoSubEventOrder_Params params;
	params.MemoId = MemoId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemopadPageWidget.SetSlotHiddenFlag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)

void US3MemopadPageWidget::SetSlotHiddenFlag(int Index, bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemopadPageWidget.SetSlotHiddenFlag");

	US3MemopadPageWidget_SetSlotHiddenFlag_Params params;
	params.Index = Index;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemopadPageWidget.SetSlotContent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class US3MemopadTextWidget*    Widget                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3MemopadPageWidget::SetSlotContent(int Index, class US3MemopadTextWidget* Widget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemopadPageWidget.SetSlotContent");

	US3MemopadPageWidget_SetSlotContent_Params params;
	params.Index = Index;
	params.Widget = Widget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MemopadPageWidget.AddPhoto
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, IsPlainOldData)
// class UCanvasPanelSlot*        ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UCanvasPanelSlot* US3MemopadPageWidget::AddPhoto(class UTexture2D* Texture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemopadPageWidget.AddPhoto");

	US3MemopadPageWidget_AddPhoto_Params params;
	params.Texture = Texture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MemoTextureDataManagerBase.GetMemoTextureDataObjectByLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// class US3MemoTextureDataBase*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3MemoTextureDataBase* AS3MemoTextureDataManagerBase::GetMemoTextureDataObjectByLabel(const struct FName& Label)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MemoTextureDataManagerBase.GetMemoTextureDataObjectByLabel");

	AS3MemoTextureDataManagerBase_GetMemoTextureDataObjectByLabel_Params params;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameBase.SetTalkScriptLoadTimer
// (Native, Public, BlueprintCallable)

void AS3MiniGameBase::SetTalkScriptLoadTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.SetTalkScriptLoadTimer");

	AS3MiniGameBase_SetTalkScriptLoadTimer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameBase.GetTagCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3MiniGameBase::GetTagCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.GetTagCharaName");

	AS3MiniGameBase_GetTagCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameBase.GetTagCharaComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3TagCharaComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3TagCharaComponent* AS3MiniGameBase::GetTagCharaComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.GetTagCharaComponent");

	AS3MiniGameBase_GetTagCharaComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameBase.GetSightCheckLocation
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3MiniGameBase::GetSightCheckLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.GetSightCheckLocation");

	AS3MiniGameBase_GetSightCheckLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameBase.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3MiniGameBase::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.GetClothCharaName");

	AS3MiniGameBase_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameBase.DelayedInitialize
// (Event, Public, BlueprintEvent)

void AS3MiniGameBase::DelayedInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.DelayedInitialize");

	AS3MiniGameBase_DelayedInitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameBase.ClearTalkScriptLoadTimer
// (Native, Public, BlueprintCallable)

void AS3MiniGameBase::ClearTalkScriptLoadTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameBase.ClearTalkScriptLoadTimer");

	AS3MiniGameBase_ClearTalkScriptLoadTimer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.RemoveDelayFromWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*             pUserWidget                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3MiniGameFunctionLibrary::STATIC_RemoveDelayFromWidget(class UUserWidget* pUserWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.RemoveDelayFromWidget");

	US3MiniGameFunctionLibrary_RemoveDelayFromWidget_Params params;
	params.pUserWidget = pUserWidget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.RemoveDelayFromComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3MiniGameFunctionLibrary::STATIC_RemoveDelayFromComponent(class USceneComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.RemoveDelayFromComponent");

	US3MiniGameFunctionLibrary_RemoveDelayFromComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.RemoveDelayFromActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void US3MiniGameFunctionLibrary::STATIC_RemoveDelayFromActor(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.RemoveDelayFromActor");

	US3MiniGameFunctionLibrary_RemoveDelayFromActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.OutputPunchResult
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// Enum_QTETitlePlayList          PlaylistItem                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<Enum_QTETitlePlayList>  InPlayList                     (Parm, ZeroConstructor)
// TArray<Enum_QTETitlePlayList>  OutPlaylist                    (Parm, OutParm, ZeroConstructor)
// TArray<struct FQTECommandCheckStruct> InCommandStructArray           (Parm, ZeroConstructor)
// TArray<struct FQTECommandCheckStruct> OutCommandStructArray          (Parm, OutParm, ZeroConstructor)
// bool                           bNeedPlaySequencer             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHitSuccessfully               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3MiniGameFunctionLibrary::STATIC_OutputPunchResult(Enum_QTETitlePlayList PlaylistItem, TArray<Enum_QTETitlePlayList> InPlayList, TArray<struct FQTECommandCheckStruct> InCommandStructArray, TArray<Enum_QTETitlePlayList>* OutPlaylist, TArray<struct FQTECommandCheckStruct>* OutCommandStructArray, bool* bNeedPlaySequencer, bool* bHitSuccessfully)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.OutputPunchResult");

	US3MiniGameFunctionLibrary_OutputPunchResult_Params params;
	params.PlaylistItem = PlaylistItem;
	params.InPlayList = InPlayList;
	params.InCommandStructArray = InCommandStructArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPlaylist != nullptr)
		*OutPlaylist = params.OutPlaylist;
	if (OutCommandStructArray != nullptr)
		*OutCommandStructArray = params.OutCommandStructArray;
	if (bNeedPlaySequencer != nullptr)
		*bNeedPlaySequencer = params.bNeedPlaySequencer;
	if (bHitSuccessfully != nullptr)
		*bHitSuccessfully = params.bHitSuccessfully;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.OutputCSVData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Filename                       (Parm, ZeroConstructor)
// struct FString                 outputFolderName               (Parm, ZeroConstructor)
// struct FString                 outStr                         (Parm, ZeroConstructor)

void US3MiniGameFunctionLibrary::STATIC_OutputCSVData(const struct FString& Filename, const struct FString& outputFolderName, const struct FString& outStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.OutputCSVData");

	US3MiniGameFunctionLibrary_OutputCSVData_Params params;
	params.Filename = Filename;
	params.outputFolderName = outputFolderName;
	params.outStr = outStr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameQTECommandsTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   pName                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FQTETitleCommandTableRowBase ReturnValue                    (Parm, OutParm, ReturnParm)

struct FQTETitleCommandTableRowBase US3MiniGameFunctionLibrary::STATIC_GetRowByNameQTECommandsTable(class UDataTable* DataTable, const struct FName& pName, bool* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameQTECommandsTable");

	US3MiniGameFunctionLibrary_GetRowByNameQTECommandsTable_Params params;
	params.DataTable = DataTable;
	params.pName = pName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameODGiftTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   pName                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FODGiftDataTableRowBase ReturnValue                    (Parm, OutParm, ReturnParm)

struct FODGiftDataTableRowBase US3MiniGameFunctionLibrary::STATIC_GetRowByNameODGiftTable(class UDataTable* DataTable, const struct FName& pName, bool* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameODGiftTable");

	US3MiniGameFunctionLibrary_GetRowByNameODGiftTable_Params params;
	params.DataTable = DataTable;
	params.pName = pName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameMiniGameNPCLinkData
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FGameplayTag            NPC                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bOutResult                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FS3MiniGameNPCLinkData  OutData                        (Parm, OutParm)

void US3MiniGameFunctionLibrary::STATIC_GetRowByNameMiniGameNPCLinkData(class UDataTable* DataTable, const struct FGameplayTag& NPC, bool* bOutResult, struct FS3MiniGameNPCLinkData* OutData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameMiniGameNPCLinkData");

	US3MiniGameFunctionLibrary_GetRowByNameMiniGameNPCLinkData_Params params;
	params.DataTable = DataTable;
	params.NPC = NPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bOutResult != nullptr)
		*bOutResult = params.bOutResult;
	if (OutData != nullptr)
		*OutData = params.OutData;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameCMDataTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   pName                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FCupMagicDataTableRowBase ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCupMagicDataTableRowBase US3MiniGameFunctionLibrary::STATIC_GetRowByNameCMDataTable(class UDataTable* DataTable, const struct FName& pName, bool* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameCMDataTable");

	US3MiniGameFunctionLibrary_GetRowByNameCMDataTable_Params params;
	params.DataTable = DataTable;
	params.pName = pName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameAnimalRaceSpeedTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UDataTable*              DataTable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   pName                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Result                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FAnimalRaceSpeedTableRowBase ReturnValue                    (Parm, OutParm, ReturnParm)

struct FAnimalRaceSpeedTableRowBase US3MiniGameFunctionLibrary::STATIC_GetRowByNameAnimalRaceSpeedTable(class UDataTable* DataTable, const struct FName& pName, bool* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRowByNameAnimalRaceSpeedTable");

	US3MiniGameFunctionLibrary_GetRowByNameAnimalRaceSpeedTable_Params params;
	params.DataTable = DataTable;
	params.pName = pName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRandomValueInRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3MiniGameFunctionLibrary::STATIC_GetRandomValueInRange(float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRandomValueInRange");

	US3MiniGameFunctionLibrary_GetRandomValueInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetRandomIntValueInRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MiniGameFunctionLibrary::STATIC_GetRandomIntValueInRange(int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetRandomIntValueInRange");

	US3MiniGameFunctionLibrary_GetRandomIntValueInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetLastScoreKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         MiniGame                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3MiniGameFunctionLibrary::STATIC_GetLastScoreKey(class AS3MiniGameBase* MiniGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetLastScoreKey");

	US3MiniGameFunctionLibrary_GetLastScoreKey_Params params;
	params.MiniGame = MiniGame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.GetHighScoreKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         MiniGame                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3MiniGameFunctionLibrary::STATIC_GetHighScoreKey(class AS3MiniGameBase* MiniGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.GetHighScoreKey");

	US3MiniGameFunctionLibrary_GetHighScoreKey_Params params;
	params.MiniGame = MiniGame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameFunctionLibrary.CalculateTotalScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            HitScore                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Combo                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ComboScore                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ComboMaxScore                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MiniGameFunctionLibrary::STATIC_CalculateTotalScore(int HitScore, int Combo, int ComboScore, int ComboMaxScore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameFunctionLibrary.CalculateTotalScore");

	US3MiniGameFunctionLibrary_CalculateTotalScore_Params params;
	params.HitScore = HitScore;
	params.Combo = Combo;
	params.ComboScore = ComboScore;
	params.ComboMaxScore = ComboMaxScore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameManager.UpdateMiniGameWinRate
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AS3MiniGameManager::UpdateMiniGameWinRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameManager.UpdateMiniGameWinRate");

	AS3MiniGameManager_UpdateMiniGameWinRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameManager.RemoveMiniGameActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3MiniGameManager::RemoveMiniGameActor(class AS3MiniGameBase* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameManager.RemoveMiniGameActor");

	AS3MiniGameManager_RemoveMiniGameActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameManager.RemoveDelayedInitializeActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3MiniGameManager::RemoveDelayedInitializeActor(class AS3MiniGameBase* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameManager.RemoveDelayedInitializeActor");

	AS3MiniGameManager_RemoveDelayedInitializeActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameManager.GetMiniGameActorByTagCharaName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TagCharaName                   (Parm, ZeroConstructor, IsPlainOldData)
// class AS3MiniGameBase*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3MiniGameBase* AS3MiniGameManager::GetMiniGameActorByTagCharaName(const struct FName& TagCharaName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameManager.GetMiniGameActorByTagCharaName");

	AS3MiniGameManager_GetMiniGameActorByTagCharaName_Params params;
	params.TagCharaName = TagCharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameManager.GetCharacterLinkMiniGames
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          MiniGameActors                 (Parm, OutParm, ZeroConstructor)

void AS3MiniGameManager::GetCharacterLinkMiniGames(class AActor* TargetActor, TArray<class AActor*>* MiniGameActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameManager.GetCharacterLinkMiniGames");

	AS3MiniGameManager_GetCharacterLinkMiniGames_Params params;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MiniGameActors != nullptr)
		*MiniGameActors = params.MiniGameActors;
}


// Function Shenmue3.S3MiniGameManager.AddMiniGameActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3MiniGameManager::AddMiniGameActor(class AS3MiniGameBase* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameManager.AddMiniGameActor");

	AS3MiniGameManager_AddMiniGameActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetupMiniGameProgressInfoArray
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FS3MiniGameProgressSaveData> SaveDataArray                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void US3MiniGameProgressManager::SetupMiniGameProgressInfoArray(TArray<struct FS3MiniGameProgressSaveData> SaveDataArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetupMiniGameProgressInfoArray");

	US3MiniGameProgressManager_SetupMiniGameProgressInfoArray_Params params;
	params.SaveDataArray = SaveDataArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsStringArray
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<struct FString>         Values                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void US3MiniGameProgressManager::SetProgressValueAsStringArray(unsigned char MiniGameCategory, const struct FName& Key, TArray<struct FString> Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsStringArray");

	US3MiniGameProgressManager_SetProgressValueAsStringArray_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;
	params.Values = Values;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsString
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FString                 Value                          (Parm, ZeroConstructor)

void US3MiniGameProgressManager::SetProgressValueAsString(unsigned char MiniGameCategory, const struct FName& Key, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsString");

	US3MiniGameProgressManager_SetProgressValueAsString_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsIntArray
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<int>                    Values                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void US3MiniGameProgressManager::SetProgressValueAsIntArray(unsigned char MiniGameCategory, const struct FName& Key, TArray<int> Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsIntArray");

	US3MiniGameProgressManager_SetProgressValueAsIntArray_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;
	params.Values = Values;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsInt
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3MiniGameProgressManager::SetProgressValueAsInt(unsigned char MiniGameCategory, const struct FName& Key, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsInt");

	US3MiniGameProgressManager_SetProgressValueAsInt_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsFloatArray
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<float>                  Values                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void US3MiniGameProgressManager::SetProgressValueAsFloatArray(unsigned char MiniGameCategory, const struct FName& Key, TArray<float> Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsFloatArray");

	US3MiniGameProgressManager_SetProgressValueAsFloatArray_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;
	params.Values = Values;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsFloat
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3MiniGameProgressManager::SetProgressValueAsFloat(unsigned char MiniGameCategory, const struct FName& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetProgressValueAsFloat");

	US3MiniGameProgressManager_SetProgressValueAsFloat_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetLastScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         MiniGame                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3MiniGameProgressManager::SetLastScore(class AS3MiniGameBase* MiniGame, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetLastScore");

	US3MiniGameProgressManager_SetLastScore_Params params;
	params.MiniGame = MiniGame;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.SetHighScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3MiniGameBase*         MiniGame                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3MiniGameProgressManager::SetHighScore(class AS3MiniGameBase* MiniGame, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.SetHighScore");

	US3MiniGameProgressManager_SetHighScore_Params params;
	params.MiniGame = MiniGame;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MiniGameCategoryNum            (Parm, ZeroConstructor, IsPlainOldData)

void US3MiniGameProgressManager::Initialize(int MiniGameCategoryNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.Initialize");

	US3MiniGameProgressManager_Initialize_Params params;
	params.MiniGameCategoryNum = MiniGameCategoryNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsStringArray
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<struct FString>         OutValues                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MiniGameProgressManager::GetProgressValueAsStringArray(unsigned char MiniGameCategory, const struct FName& Key, TArray<struct FString>* OutValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsStringArray");

	US3MiniGameProgressManager_GetProgressValueAsStringArray_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValues != nullptr)
		*OutValues = params.OutValues;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsString
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FString                 OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MiniGameProgressManager::GetProgressValueAsString(unsigned char MiniGameCategory, const struct FName& Key, struct FString* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsString");

	US3MiniGameProgressManager_GetProgressValueAsString_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsIntArray
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<int>                    OutValues                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MiniGameProgressManager::GetProgressValueAsIntArray(unsigned char MiniGameCategory, const struct FName& Key, TArray<int>* OutValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsIntArray");

	US3MiniGameProgressManager_GetProgressValueAsIntArray_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValues != nullptr)
		*OutValues = params.OutValues;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsInt
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MiniGameProgressManager::GetProgressValueAsInt(unsigned char MiniGameCategory, const struct FName& Key, int* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsInt");

	US3MiniGameProgressManager_GetProgressValueAsInt_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsFloatArray
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<float>                  OutValues                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MiniGameProgressManager::GetProgressValueAsFloatArray(unsigned char MiniGameCategory, const struct FName& Key, TArray<float>* OutValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsFloatArray");

	US3MiniGameProgressManager_GetProgressValueAsFloatArray_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValues != nullptr)
		*OutValues = params.OutValues;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsFloat
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  MiniGameCategory               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Key                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3MiniGameProgressManager::GetProgressValueAsFloat(unsigned char MiniGameCategory, const struct FName& Key, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetProgressValueAsFloat");

	US3MiniGameProgressManager_GetProgressValueAsFloat_Params params;
	params.MiniGameCategory = MiniGameCategory;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetLastScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AS3MiniGameBase*         MiniGame                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MiniGameProgressManager::GetLastScore(class AS3MiniGameBase* MiniGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetLastScore");

	US3MiniGameProgressManager_GetLastScore_Params params;
	params.MiniGame = MiniGame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.GetHighScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AS3MiniGameBase*         MiniGame                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3MiniGameProgressManager::GetHighScore(class AS3MiniGameBase* MiniGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.GetHighScore");

	US3MiniGameProgressManager_GetHighScore_Params params;
	params.MiniGame = MiniGame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3MiniGameProgressManager.CreateProgressSaveDataArray
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FS3MiniGameProgressSaveData> OutSaveDataArray               (Parm, OutParm, ZeroConstructor)

void US3MiniGameProgressManager::CreateProgressSaveDataArray(TArray<struct FS3MiniGameProgressSaveData>* OutSaveDataArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameProgressManager.CreateProgressSaveDataArray");

	US3MiniGameProgressManager_CreateProgressSaveDataArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSaveDataArray != nullptr)
		*OutSaveDataArray = params.OutSaveDataArray;
}


// Function Shenmue3.S3MovementModeRequestHandler.UnrequestMovementMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Requester                      (Parm, ZeroConstructor, IsPlainOldData)

void US3MovementModeRequestHandler::UnrequestMovementMode(class UObject* Requester)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MovementModeRequestHandler.UnrequestMovementMode");

	US3MovementModeRequestHandler_UnrequestMovementMode_Params params;
	params.Requester = Requester;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MovementModeRequestHandler.RequestMovementMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Requester                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void US3MovementModeRequestHandler::RequestMovementMode(class UObject* Requester, TEnumAsByte<EMovementMode> Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MovementModeRequestHandler.RequestMovementMode");

	US3MovementModeRequestHandler_RequestMovementMode_Params params;
	params.Requester = Requester;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MovementModeRequestHandler.CheckInvalidUProperties
// (Final, Native, Public, BlueprintCallable)

void US3MovementModeRequestHandler::CheckInvalidUProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MovementModeRequestHandler.CheckInvalidUProperties");

	US3MovementModeRequestHandler_CheckInvalidUProperties_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NarrowPassageActor.RequestIgnoreCollision
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AS3Character*            Player                         (Parm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinTime                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3NarrowPassageActor::RequestIgnoreCollision(class AS3Character* Player, class AS3Character* Target, float MinTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NarrowPassageActor.RequestIgnoreCollision");

	AS3NarrowPassageActor_RequestIgnoreCollision_Params params;
	params.Player = Player;
	params.Target = Target;
	params.MinTime = MinTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NarrowPassageActor.OnOverlapEnd
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AS3NarrowPassageActor::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NarrowPassageActor.OnOverlapEnd");

	AS3NarrowPassageActor_OnOverlapEnd_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NarrowPassageActor.OnOverlapBegin
// (Final, Native, Protected, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AS3NarrowPassageActor::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NarrowPassageActor.OnOverlapBegin");

	AS3NarrowPassageActor_OnOverlapBegin_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3MiniGameCharacter.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3MiniGameCharacter::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3MiniGameCharacter.GetClothCharaName");

	AS3MiniGameCharacter_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NavigationFunctionLibrary.TestPathExists
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 Querier                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLocation                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 EndLocation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NavigationFunctionLibrary::STATIC_TestPathExists(class UObject* Querier, const struct FVector& StartLocation, const struct FVector& EndLocation, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NavigationFunctionLibrary.TestPathExists");

	US3NavigationFunctionLibrary_TestPathExists_Params params;
	params.Querier = Querier;
	params.StartLocation = StartLocation;
	params.EndLocation = EndLocation;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NavigationFunctionLibrary.GetRecastNavmesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class ARecastNavMesh*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARecastNavMesh* US3NavigationFunctionLibrary::STATIC_GetRecastNavmesh(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NavigationFunctionLibrary.GetRecastNavmesh");

	US3NavigationFunctionLibrary_GetRecastNavmesh_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NavigationFunctionLibrary.FindDistanceToWall
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLoc                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class ARecastNavMesh*          NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutClosestPointOnWall          (Parm, OutParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3NavigationFunctionLibrary::STATIC_FindDistanceToWall(class UObject* WorldContextObject, const struct FVector& StartLoc, class UClass* FilterClass, class ARecastNavMesh* NavData, float MaxDistance, struct FVector* OutClosestPointOnWall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NavigationFunctionLibrary.FindDistanceToWall");

	US3NavigationFunctionLibrary_FindDistanceToWall_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartLoc = StartLoc;
	params.FilterClass = FilterClass;
	params.NavData = NavData;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutClosestPointOnWall != nullptr)
		*OutClosestPointOnWall = params.OutClosestPointOnWall;

	return params.ReturnValue;
}


// Function Shenmue3.S3NavLinkCustomComponent.IsNavLinkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NavLinkCustomComponent::IsNavLinkEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NavLinkCustomComponent.IsNavLinkEnabled");

	US3NavLinkCustomComponent_IsNavLinkEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimDataAsset.GetFaceMontagesInstance
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3FaceMontageData      Data                           (Parm, OutParm)

void US3NPCAnimDataAsset::GetFaceMontagesInstance(class UObject* Outer, const struct FName& Name, struct FS3FaceMontageData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimDataAsset.GetFaceMontagesInstance");

	US3NPCAnimDataAsset_GetFaceMontagesInstance_Params params;
	params.Outer = Outer;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Shenmue3.S3NPCAnimDataAsset.GetFaceMontages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FS3FaceMontageData> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FS3FaceMontageData> US3NPCAnimDataAsset::GetFaceMontages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimDataAsset.GetFaceMontages");

	US3NPCAnimDataAsset_GetFaceMontages_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.UpdateTraceLocation
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::UpdateTraceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.UpdateTraceLocation");

	US3NPCAnimInstance_UpdateTraceLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.UpdatePreciseTarget
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::UpdatePreciseTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.UpdatePreciseTarget");

	US3NPCAnimInstance_UpdatePreciseTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.UpdateDominantFoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewRightDominant              (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::UpdateDominantFoot(bool bNewRightDominant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.UpdateDominantFoot");

	US3NPCAnimInstance_UpdateDominantFoot_Params params;
	params.bNewRightDominant = bNewRightDominant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.StopRequestedAnimation
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::StopRequestedAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.StopRequestedAnimation");

	US3NPCAnimInstance_StopRequestedAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.StartUsingStairs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           upflag                         (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::StartUsingStairs(bool upflag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.StartUsingStairs");

	US3NPCAnimInstance_StartUsingStairs_Params params;
	params.upflag = upflag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetWalkSequences
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*           Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           Loop                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           Stop                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetWalkSequences(class UAnimSequence* Start, class UAnimSequence* Loop, class UAnimSequence* Stop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetWalkSequences");

	US3NPCAnimInstance_SetWalkSequences_Params params;
	params.Start = Start;
	params.Loop = Loop;
	params.Stop = Stop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetUseHandMotion
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bUse                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetUseHandMotion(bool bUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetUseHandMotion");

	US3NPCAnimInstance_SetUseHandMotion_Params params;
	params.bUse = bUse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetTalkStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bStart                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetTalkStart(bool bStart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetTalkStart");

	US3NPCAnimInstance_SetTalkStart_Params params;
	params.bStart = bStart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetPelvisBoneFixed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetPelvisBoneFixed(bool bEnable, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetPelvisBoneFixed");

	US3NPCAnimInstance_SetPelvisBoneFixed_Params params;
	params.bEnable = bEnable;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetOpenDoorPause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bPause                         (Parm, ZeroConstructor, IsPlainOldData)
// class AS3GimmickOpenDoor*      pGimmickOpenDoor               (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetOpenDoorPause(bool bPause, class AS3GimmickOpenDoor* pGimmickOpenDoor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetOpenDoorPause");

	US3NPCAnimInstance_SetOpenDoorPause_Params params;
	params.bPause = bPause;
	params.pGimmickOpenDoor = pGimmickOpenDoor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetNamePlate
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetNamePlate(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetNamePlate");

	US3NPCAnimInstance_SetNamePlate_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetLookAtBody
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           Enable                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetLookAtBody(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetLookAtBody");

	US3NPCAnimInstance_SetLookAtBody_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetLocomotionStateAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*           AnimSequence                   (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetLocomotionStateAnim(class UAnimSequence* AnimSequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetLocomotionStateAnim");

	US3NPCAnimInstance_SetLocomotionStateAnim_Params params;
	params.AnimSequence = AnimSequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetLocomotionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELocomotionState>  NewLocomotionState             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowPathChanges              (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetLocomotionState(TEnumAsByte<ELocomotionState> NewLocomotionState, bool bAllowPathChanges)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetLocomotionState");

	US3NPCAnimInstance_SetLocomotionState_Params params;
	params.NewLocomotionState = NewLocomotionState;
	params.bAllowPathChanges = bAllowPathChanges;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetHaveItemShowHide
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShow                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetHaveItemShowHide(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetHaveItemShowHide");

	US3NPCAnimInstance_SetHaveItemShowHide_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetHaveItemCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           enableFlag                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetHaveItemCondition(bool enableFlag, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetHaveItemCondition");

	US3NPCAnimInstance_SetHaveItemCondition_Params params;
	params.enableFlag = enableFlag;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetHaveItemAttach
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::SetHaveItemAttach()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetHaveItemAttach");

	US3NPCAnimInstance_SetHaveItemAttach_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetForceLookAtTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  pTarget                        (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetForceLookAtTarget(class AActor* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetForceLookAtTarget");

	US3NPCAnimInstance_SetForceLookAtTarget_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetFootPlanting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bRightFoot                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPlanted                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetFootPlanting(bool bRightFoot, bool bPlanted)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetFootPlanting");

	US3NPCAnimInstance_SetFootPlanting_Params params;
	params.bRightFoot = bRightFoot;
	params.bPlanted = bPlanted;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SetFingerPointingType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFingerPointingType            Type                           (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::SetFingerPointingType(EFingerPointingType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SetFingerPointingType");

	US3NPCAnimInstance_SetFingerPointingType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.SaveAnimatingInfo
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::SaveAnimatingInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.SaveAnimatingInfo");

	US3NPCAnimInstance_SaveAnimatingInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ResetOverwriteLookAtParameters
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::ResetOverwriteLookAtParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ResetOverwriteLookAtParameters");

	US3NPCAnimInstance_ResetOverwriteLookAtParameters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ResetFurimuki
// (Final, Native, Private, BlueprintCallable)

void US3NPCAnimInstance::ResetFurimuki()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ResetFurimuki");

	US3NPCAnimInstance_ResetFurimuki_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ResetFingerPointingType
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::ResetFingerPointingType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ResetFingerPointingType");

	US3NPCAnimInstance_ResetFingerPointingType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.RequestTurnInPlace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::RequestTurnInPlace(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.RequestTurnInPlace");

	US3NPCAnimInstance_RequestTurnInPlace_Params params;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.RequestTalkMotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewTalking                    (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::RequestTalkMotion(bool bNewTalking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.RequestTalkMotion");

	US3NPCAnimInstance_RequestTalkMotion_Params params;
	params.bNewTalking = bNewTalking;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.RequestReactionChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EReactionOnTalk>   NewTalkReaction                (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::RequestReactionChange(TEnumAsByte<EReactionOnTalk> NewTalkReaction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.RequestReactionChange");

	US3NPCAnimInstance_RequestReactionChange_Params params;
	params.NewTalkReaction = NewTalkReaction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.RequestAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*           Sequence                       (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::RequestAnimation(class UAnimSequence* Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.RequestAnimation");

	US3NPCAnimInstance_RequestAnimation_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.OutputAttachLog
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   soketName                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bOn                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::OutputAttachLog(const struct FName& soketName, bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.OutputAttachLog");

	US3NPCAnimInstance_OutputAttachLog_Params params;
	params.soketName = soketName;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.OnTalkStart
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::OnTalkStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.OnTalkStart");

	US3NPCAnimInstance_OnTalkStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.OnFSMStateChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELocomotionState>  NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::OnFSMStateChanged(TEnumAsByte<ELocomotionState> NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.OnFSMStateChanged");

	US3NPCAnimInstance_OnFSMStateChanged_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.OnEncounteredDoor
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::OnEncounteredDoor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.OnEncounteredDoor");

	US3NPCAnimInstance_OnEncounteredDoor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.OnAdjustComplete
// (Final, Native, Protected, BlueprintCallable)

void US3NPCAnimInstance::OnAdjustComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.OnAdjustComplete");

	US3NPCAnimInstance_OnAdjustComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.MeshChangedInRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNear                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::MeshChangedInRange(bool bNear)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.MeshChangedInRange");

	US3NPCAnimInstance_MeshChangedInRange_Params params;
	params.bNear = bNear;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.LoadAnimatingInfo
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::LoadAnimatingInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.LoadAnimatingInfo");

	US3NPCAnimInstance_LoadAnimatingInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.LeftWalkingToIdle
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::LeftWalkingToIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.LeftWalkingToIdle");

	US3NPCAnimInstance_LeftWalkingToIdle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.LeftStepBack
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::LeftStepBack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.LeftStepBack");

	US3NPCAnimInstance_LeftStepBack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.IsWalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsWalking");

	US3NPCAnimInstance_IsWalking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsTurnArounding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsTurnArounding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsTurnArounding");

	US3NPCAnimInstance_IsTurnArounding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsStairsUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsStairsUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsStairsUp");

	US3NPCAnimInstance_IsStairsUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsStairsSkip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsStairsSkip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsStairsSkip");

	US3NPCAnimInstance_IsStairsSkip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsReadyTalk_Implementation
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsReadyTalk_Implementation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsReadyTalk_Implementation");

	US3NPCAnimInstance_IsReadyTalk_Implementation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsLookAtBody
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsLookAtBody()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsLookAtBody");

	US3NPCAnimInstance_IsLookAtBody_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsForceLookAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsForceLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsForceLookAt");

	US3NPCAnimInstance_IsForceLookAt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.IsFarAndHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::IsFarAndHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.IsFarAndHidden");

	US3NPCAnimInstance_IsFarAndHidden_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetVelocityFromStopMetaData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimSequence*           Sequence                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3NPCAnimInstance::GetVelocityFromStopMetaData(class UAnimSequence* Sequence, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetVelocityFromStopMetaData");

	US3NPCAnimInstance_GetVelocityFromStopMetaData_Params params;
	params.Sequence = Sequence;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetTalkBlendTime
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3NPCAnimInstance::GetTalkBlendTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetTalkBlendTime");

	US3NPCAnimInstance_GetTalkBlendTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetStartTraceLocationZ
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3NPCAnimInstance::GetStartTraceLocationZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetStartTraceLocationZ");

	US3NPCAnimInstance_GetStartTraceLocationZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetMotionTrans
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TEnumAsByte<ELocomotionState>  State                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            opt                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              trans                          (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::GetMotionTrans(TEnumAsByte<ELocomotionState> State, int opt, struct FTransform* trans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetMotionTrans");

	US3NPCAnimInstance_GetMotionTrans_Params params;
	params.State = State;
	params.opt = opt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (trans != nullptr)
		*trans = params.trans;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetGreetingMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* US3NPCAnimInstance::GetGreetingMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetGreetingMontage");

	US3NPCAnimInstance_GetGreetingMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetEndTraceLocationZ
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3NPCAnimInstance::GetEndTraceLocationZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetEndTraceLocationZ");

	US3NPCAnimInstance_GetEndTraceLocationZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetAttachMeshSocketTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*          pMeshComp                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   SocketName                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OffsetRotator                  (ConstParm, Parm, IsPlainOldData)
// struct FVector                 OffsetLocation                 (ConstParm, Parm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3NPCAnimInstance::GetAttachMeshSocketTransform(class UMeshComponent* pMeshComp, const struct FName& SocketName, const struct FRotator& OffsetRotator, const struct FVector& OffsetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetAttachMeshSocketTransform");

	US3NPCAnimInstance_GetAttachMeshSocketTransform_Params params;
	params.pMeshComp = pMeshComp;
	params.SocketName = SocketName;
	params.OffsetRotator = OffsetRotator;
	params.OffsetLocation = OffsetLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.GetAttachMeshObjectOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMeshComponent*          pMeshComp                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3NPCAnimInstance::GetAttachMeshObjectOffset(class UMeshComponent* pMeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.GetAttachMeshObjectOffset");

	US3NPCAnimInstance_GetAttachMeshObjectOffset_Params params;
	params.pMeshComp = pMeshComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.FullyBlendedWalkingToSit
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::FullyBlendedWalkingToSit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.FullyBlendedWalkingToSit");

	US3NPCAnimInstance_FullyBlendedWalkingToSit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.FriendshipGreetingEnd
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::FriendshipGreetingEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.FriendshipGreetingEnd");

	US3NPCAnimInstance_FriendshipGreetingEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ForceIdlePose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSittingIdle                   (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::ForceIdlePose(bool bSittingIdle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ForceIdlePose");

	US3NPCAnimInstance_ForceIdlePose_Params params;
	params.bSittingIdle = bSittingIdle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ExitUsingStairs
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::ExitUsingStairs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ExitUsingStairs");

	US3NPCAnimInstance_ExitUsingStairs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.EndTurningInPlace
// (Final, Native, Private, BlueprintCallable)

void US3NPCAnimInstance::EndTurningInPlace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.EndTurningInPlace");

	US3NPCAnimInstance_EndTurningInPlace_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.CoupleBenchActionEnd
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::CoupleBenchActionEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.CoupleBenchActionEnd");

	US3NPCAnimInstance_CoupleBenchActionEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.CoupleBenchActionBegin
// (Final, Native, Public, BlueprintCallable)

void US3NPCAnimInstance::CoupleBenchActionBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.CoupleBenchActionBegin");

	US3NPCAnimInstance_CoupleBenchActionBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ConsumeResetFSMFlag
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::ConsumeResetFSMFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ConsumeResetFSMFlag");

	US3NPCAnimInstance_ConsumeResetFSMFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.ChangeNPCScriptState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewScriptState                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::ChangeNPCScriptState(int NewScriptState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ChangeNPCScriptState");

	US3NPCAnimInstance_ChangeNPCScriptState_Params params;
	params.NewScriptState = NewScriptState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.ChangeNPCAnimSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3NPCMovementAnimationSet* NewAnimSet                     (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::ChangeNPCAnimSet(class US3NPCMovementAnimationSet* NewAnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.ChangeNPCAnimSet");

	US3NPCAnimInstance_ChangeNPCAnimSet_Params params;
	params.NewAnimSet = NewAnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.CanTalk
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::CanTalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.CanTalk");

	US3NPCAnimInstance_CanTalk_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.CanAnimationCansel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCAnimInstance::CanAnimationCansel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.CanAnimationCansel");

	US3NPCAnimInstance_CanAnimationCansel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAnimInstance.BeginOpenDoorBP
// (Event, Public, BlueprintEvent)

void US3NPCAnimInstance::BeginOpenDoorBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.BeginOpenDoorBP");

	US3NPCAnimInstance_BeginOpenDoorBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.Attach_HaveItem
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHaveItemAttachSetting  HaveItemSetting                (Parm)

void US3NPCAnimInstance::Attach_HaveItem(const struct FHaveItemAttachSetting& HaveItemSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.Attach_HaveItem");

	US3NPCAnimInstance_Attach_HaveItem_Params params;
	params.HaveItemSetting = HaveItemSetting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.AnimNotify_StartFingerPointing
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3NPCAnimInstance::AnimNotify_StartFingerPointing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.AnimNotify_StartFingerPointing");

	US3NPCAnimInstance_AnimNotify_StartFingerPointing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.AnimNotify_EndTurningInPlace
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3NPCAnimInstance::AnimNotify_EndTurningInPlace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.AnimNotify_EndTurningInPlace");

	US3NPCAnimInstance_AnimNotify_EndTurningInPlace_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.AnimNotify_EndTurnAround
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3NPCAnimInstance::AnimNotify_EndTurnAround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.AnimNotify_EndTurnAround");

	US3NPCAnimInstance_AnimNotify_EndTurnAround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.AnimNotify_EndFingerPointing
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3NPCAnimInstance::AnimNotify_EndFingerPointing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.AnimNotify_EndFingerPointing");

	US3NPCAnimInstance_AnimNotify_EndFingerPointing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.AnimationCompleteEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAnimSequenceA                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::AnimationCompleteEnd(bool bAnimSequenceA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.AnimationCompleteEnd");

	US3NPCAnimInstance_AnimationCompleteEnd_Params params;
	params.bAnimSequenceA = bAnimSequenceA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAnimInstance.AnimationCompleteBegin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAnimSequenceA                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAnimInstance::AnimationCompleteBegin(bool bAnimSequenceA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAnimInstance.AnimationCompleteBegin");

	US3NPCAnimInstance_AnimationCompleteBegin_Params params;
	params.bAnimSequenceA = bAnimSequenceA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NavLink_Stairs.SetStairParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Depth                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Num                            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EStairDirection>   dir                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ext                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3NavLink_Stairs::SetStairParam(class AActor* Target, float Height, float Depth, int Num, TEnumAsByte<EStairDirection> dir, float ext)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NavLink_Stairs.SetStairParam");

	AS3NavLink_Stairs_SetStairParam_Params params;
	params.Target = Target;
	params.Height = Height;
	params.Depth = Depth;
	params.Num = Num;
	params.dir = dir;
	params.ext = ext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.SetMeshVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bEnable                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::SetMeshVisibility(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.SetMeshVisibility");

	AS3NPCAttachmentActor_SetMeshVisibility_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.RequestActionName
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   ActionName                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::RequestActionName(const struct FName& ActionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.RequestActionName");

	AS3NPCAttachmentActor_RequestActionName_Params params;
	params.ActionName = ActionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.Notify_HiddenInGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           _bHidden                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::Notify_HiddenInGame(bool _bHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.Notify_HiddenInGame");

	AS3NPCAttachmentActor_Notify_HiddenInGame_Params params;
	params._bHidden = _bHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.Notify_FadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Time                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::Notify_FadeOut(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.Notify_FadeOut");

	AS3NPCAttachmentActor_Notify_FadeOut_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.Notify_FadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Time                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::Notify_FadeIn(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.Notify_FadeIn");

	AS3NPCAttachmentActor_Notify_FadeIn_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.IsMeshVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCAttachmentActor::IsMeshVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.IsMeshVisibility");

	AS3NPCAttachmentActor_IsMeshVisibility_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAttachmentActor.InitializeAttachNative
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Type                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::InitializeAttachNative(int Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.InitializeAttachNative");

	AS3NPCAttachmentActor_InitializeAttachNative_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.InitializeAttach
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            Type                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCAttachmentActor::InitializeAttach(int Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.InitializeAttach");

	AS3NPCAttachmentActor_InitializeAttach_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentActor.GetStaticMeshComp
// (Event, Public, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* AS3NPCAttachmentActor::GetStaticMeshComp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.GetStaticMeshComp");

	AS3NPCAttachmentActor_GetStaticMeshComp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAttachmentActor.GetSkeletalMeshComp
// (Event, Public, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* AS3NPCAttachmentActor::GetSkeletalMeshComp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.GetSkeletalMeshComp");

	AS3NPCAttachmentActor_GetSkeletalMeshComp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCAttachmentActor.CallDelayEndTalk
// (Final, Native, Public)

void AS3NPCAttachmentActor::CallDelayEndTalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentActor.CallDelayEndTalk");

	AS3NPCAttachmentActor_CallDelayEndTalk_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentAnimInstance.SetPerBoneMotionBlur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bBlur                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAttachmentAnimInstance::SetPerBoneMotionBlur(bool bBlur)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentAnimInstance.SetPerBoneMotionBlur");

	US3NPCAttachmentAnimInstance_SetPerBoneMotionBlur_Params params;
	params.bBlur = bBlur;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentAnimInstance.ResetTransitionFlag
// (Final, Native, Public, BlueprintCallable)

void US3NPCAttachmentAnimInstance::ResetTransitionFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentAnimInstance.ResetTransitionFlag");

	US3NPCAttachmentAnimInstance_ResetTransitionFlag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentAnimInstance.RequestAnimationName
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   AnimationName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAttachmentAnimInstance::RequestAnimationName(const struct FName& AnimationName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentAnimInstance.RequestAnimationName");

	US3NPCAttachmentAnimInstance_RequestAnimationName_Params params;
	params.AnimationName = AnimationName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentAnimInstance.RequestAnimationIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAttachmentAnimInstance::RequestAnimationIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentAnimInstance.RequestAnimationIndex");

	US3NPCAttachmentAnimInstance_RequestAnimationIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentAnimInstance.RequestActionName
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   ActionName                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAttachmentAnimInstance::RequestActionName(const struct FName& ActionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentAnimInstance.RequestActionName");

	US3NPCAttachmentAnimInstance_RequestActionName_Params params;
	params.ActionName = ActionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCAttachmentAnimInstance.InitializeAttach
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int                            Type                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3NPCAttachmentAnimInstance::InitializeAttach(int Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCAttachmentAnimInstance.InitializeAttach");

	US3NPCAttachmentAnimInstance_InitializeAttach_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCController.GetS3PathFollowingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3PathFollowingComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3PathFollowingComponent* AS3NPCController::GetS3PathFollowingComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCController.GetS3PathFollowingComponent");

	AS3NPCController_GetS3PathFollowingComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCLeadManager.IsQuickSkipTestOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCLeadManager::IsQuickSkipTestOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCLeadManager.IsQuickSkipTestOn");

	AS3NPCLeadManager_IsQuickSkipTestOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCLeadManager.GetTalkLocation
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3NPCLeadManager::GetTalkLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCLeadManager.GetTalkLocation");

	AS3NPCLeadManager_GetTalkLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCLeadManager.GetNPCCharater
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AS3Character*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Character* AS3NPCLeadManager::GetNPCCharater()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCLeadManager.GetNPCCharater");

	AS3NPCLeadManager_GetNPCCharater_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCLeadManager.FindSpawnLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class ACharacter*              PlayerChar                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               OffsetLS                       (Parm, IsPlainOldData)
// bool                           FacePlayer                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutLocation                    (Parm, OutParm, IsPlainOldData)
// float                          OutYaw                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCLeadManager::FindSpawnLocation(class ACharacter* PlayerChar, const struct FVector2D& OffsetLS, bool FacePlayer, struct FVector* OutLocation, float* OutYaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCLeadManager.FindSpawnLocation");

	AS3NPCLeadManager_FindSpawnLocation_Params params;
	params.PlayerChar = PlayerChar;
	params.OffsetLS = OffsetLS;
	params.FacePlayer = FacePlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutYaw != nullptr)
		*OutYaw = params.OutYaw;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCDefinition.SetTagCharaName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   NewName                        (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCDefinition::SetTagCharaName(const struct FName& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCDefinition.SetTagCharaName");

	US3NPCDefinition_SetTagCharaName_Params params;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCDefinition.SetLegLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewLength                      (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCDefinition::SetLegLength(float NewLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCDefinition.SetLegLength");

	US3NPCDefinition_SetLegLength_Params params;
	params.NewLength = NewLength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCDefinition.SetFacialAnimationData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3FaceAnimDataAsset*    DataAsset                      (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCDefinition::SetFacialAnimationData(class US3FaceAnimDataAsset* DataAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCDefinition.SetFacialAnimationData");

	US3NPCDefinition_SetFacialAnimationData_Params params;
	params.DataAsset = DataAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCLoadTrigger.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*     OverlappedComp                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCLoadTrigger::OnEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCLoadTrigger.OnEndOverlap");

	AS3NPCLoadTrigger_OnEndOverlap_Params params;
	params.OverlappedComp = OverlappedComp;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCLoadTrigger.OnBeginOverlap
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AS3NPCLoadTrigger::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCLoadTrigger.OnBeginOverlap");

	AS3NPCLoadTrigger_OnBeginOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.UpdateTimeManual
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUpdate                   (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::UpdateTimeManual(float NewTime, bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.UpdateTimeManual");

	AS3NPCManager_UpdateTimeManual_Params params;
	params.NewTime = NewTime;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.UpdateTime
// (Final, Native, Public)
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::UpdateTime(float NewTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.UpdateTime");

	AS3NPCManager_UpdateTime_Params params;
	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.UpdateDistanceFromPlayer
// (Final, Native, Private)

void AS3NPCManager::UpdateDistanceFromPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.UpdateDistanceFromPlayer");

	AS3NPCManager_UpdateDistanceFromPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.UnspawnNPCFromID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::UnspawnNPCFromID(const struct FGameplayTag& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.UnspawnNPCFromID");

	AS3NPCManager_UnspawnNPCFromID_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.TeleportOpenedDoorNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3GimmickOpenDoor*      pGimmickOpenDoor               (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::TeleportOpenedDoorNPC(class AS3GimmickOpenDoor* pGimmickOpenDoor, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.TeleportOpenedDoorNPC");

	AS3NPCManager_TeleportOpenedDoorNPC_Params params;
	params.pGimmickOpenDoor = pGimmickOpenDoor;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.SpawnNPCFromID
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// struct FTransform              SpawnTransform                 (Parm, IsPlainOldData)
// struct FBox                    ActionBounds                   (Parm, IsPlainOldData)
// bool                           FastFadein                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::SpawnNPCFromID(const struct FGameplayTag& NPCID, const struct FTransform& SpawnTransform, const struct FBox& ActionBounds, bool FastFadein)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.SpawnNPCFromID");

	AS3NPCManager_SpawnNPCFromID_Params params;
	params.NPCID = NPCID;
	params.SpawnTransform = SpawnTransform;
	params.ActionBounds = ActionBounds;
	params.FastFadein = FastFadein;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.ShowNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            TargetNPC                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::ShowNPC(class AActor* Executor, class AS3Character* TargetNPC, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.ShowNPC");

	AS3NPCManager_ShowNPC_Params params;
	params.Executor = Executor;
	params.TargetNPC = TargetNPC;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.SetShenfaSpawnTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              _transform                     (Parm, IsPlainOldData)

void AS3NPCManager::SetShenfaSpawnTransform(const struct FTransform& _transform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.SetShenfaSpawnTransform");

	AS3NPCManager_SetShenfaSpawnTransform_Params params;
	params._transform = _transform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.SetNPCHighPriorityShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// bool                           bHighPriorityShow              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::SetNPCHighPriorityShow(const struct FGameplayTag& NPCID, bool bHighPriorityShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.SetNPCHighPriorityShow");

	AS3NPCManager_SetNPCHighPriorityShow_Params params;
	params.NPCID = NPCID;
	params.bHighPriorityShow = bHighPriorityShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.SetForceStreamNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::SetForceStreamNPC(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.SetForceStreamNPC");

	AS3NPCManager_SetForceStreamNPC_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.OnStepChanged
// (Final, Native, Public)
// Parameters:
// int                            NewStep                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::OnStepChanged(int NewStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.OnStepChanged");

	AS3NPCManager_OnStepChanged_Params params;
	params.NewStep = NewStep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.OnPlayerBehaviorIdChanged
// (Final, Native, Public)
// Parameters:
// ES3PlayerBehavior              NewId                          (Parm, ZeroConstructor, IsPlainOldData)
// ES3PlayerBehavior              OldId                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::OnPlayerBehaviorIdChanged(ES3PlayerBehavior NewId, ES3PlayerBehavior OldId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.OnPlayerBehaviorIdChanged");

	AS3NPCManager_OnPlayerBehaviorIdChanged_Params params;
	params.NewId = NewId;
	params.OldId = OldId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.OnNPCDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                  DestroyedNPC                   (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::OnNPCDestroyed(class AActor* DestroyedNPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.OnNPCDestroyed");

	AS3NPCManager_OnNPCDestroyed_Params params;
	params.DestroyedNPC = DestroyedNPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.OnFlagChanged
// (Final, Native, Public)
// Parameters:
// int                            ArrayIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            SetFlags                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::OnFlagChanged(int ArrayIndex, int SetFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.OnFlagChanged");

	AS3NPCManager_OnFlagChanged_Params params;
	params.ArrayIndex = ArrayIndex;
	params.SetFlags = SetFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.NPCEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENpcManagerEventMessage        Message                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::NPCEvent(ENpcManagerEventMessage Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.NPCEvent");

	AS3NPCManager_NPCEvent_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.IsNPCSchedulePaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AS3Character*            Char                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::IsNPCSchedulePaused(class AS3Character* Char)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.IsNPCSchedulePaused");

	AS3NPCManager_IsNPCSchedulePaused_Params params;
	params.Char = Char;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.IsDebugDisableNPC
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::IsDebugDisableNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.IsDebugDisableNPC");

	AS3NPCManager_IsDebugDisableNPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.HideNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Executor                       (Parm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            TargetNPC                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::HideNPC(class AActor* Executor, class AS3Character* TargetNPC, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.HideNPC");

	AS3NPCManager_HideNPC_Params params;
	params.Executor = Executor;
	params.TargetNPC = TargetNPC;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.GetNPCFromString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// class AS3Character*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Character* AS3NPCManager::GetNPCFromString(const struct FString& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetNPCFromString");

	AS3NPCManager_GetNPCFromString_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetNPCFromID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// class AS3Character*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Character* AS3NPCManager::GetNPCFromID(const struct FGameplayTag& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetNPCFromID");

	AS3NPCManager_GetNPCFromID_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetNPCFadeInCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AS3NPCManager::GetNPCFadeInCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetNPCFadeInCount");

	AS3NPCManager_GetNPCFadeInCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetNPCDefinitionFromString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// class US3NPCDefinition*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3NPCDefinition* AS3NPCManager::GetNPCDefinitionFromString(const struct FString& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetNPCDefinitionFromString");

	AS3NPCManager_GetNPCDefinitionFromString_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetNPCDefinitionFromID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// class US3NPCDefinition*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3NPCDefinition* AS3NPCManager::GetNPCDefinitionFromID(const struct FGameplayTag& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetNPCDefinitionFromID");

	AS3NPCManager_GetNPCDefinitionFromID_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetNPCControllerFromID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// class AS3NPCController*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3NPCController* AS3NPCManager::GetNPCControllerFromID(const struct FGameplayTag& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetNPCControllerFromID");

	AS3NPCManager_GetNPCControllerFromID_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3NPCManager*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3NPCManager* AS3NPCManager::STATIC_GetInstance(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetInstance");

	AS3NPCManager_GetInstance_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetCurrentMesh
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class US3NPCDefinition*        inNPCDef                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::GetCurrentMesh(class US3NPCDefinition* inNPCDef)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetCurrentMesh");

	AS3NPCManager_GetCurrentMesh_Params params;
	params.inNPCDef = inNPCDef;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetAnyNPCFadeInProgress
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AS3Character*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Character* AS3NPCManager::GetAnyNPCFadeInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetAnyNPCFadeInProgress");

	AS3NPCManager_GetAnyNPCFadeInProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.GetAllNPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class AS3Character*>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AS3Character*> AS3NPCManager::GetAllNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.GetAllNPC");

	AS3NPCManager_GetAllNPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.ForceAllPendingTasks
// (Final, Native, Public, BlueprintCallable)

void AS3NPCManager::ForceAllPendingTasks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.ForceAllPendingTasks");

	AS3NPCManager_ForceAllPendingTasks_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.FindAppropriateLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// struct FTransform              OutTransform                   (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::FindAppropriateLocation(const struct FGameplayTag& NPCID, struct FTransform* OutTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.FindAppropriateLocation");

	AS3NPCManager_FindAppropriateLocation_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTransform != nullptr)
		*OutTransform = params.OutTransform;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.ExitChair
// (Final, Native, Public)
// Parameters:
// class AS3GimmickChair*         gimmick                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::ExitChair(class AS3GimmickChair* gimmick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.ExitChair");

	AS3NPCManager_ExitChair_Params params;
	params.gimmick = gimmick;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.EntryChair
// (Final, Native, Public)
// Parameters:
// class AS3GimmickChair*         gimmick                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::EntryChair(class AS3GimmickChair* gimmick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.EntryChair");

	AS3NPCManager_EntryChair_Params params;
	params.gimmick = gimmick;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.DestroyNPCCameraCollision
// (Final, Native, Public, BlueprintCallable)

void AS3NPCManager::DestroyNPCCameraCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.DestroyNPCCameraCollision");

	AS3NPCManager_DestroyNPCCameraCollision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.CreateNPCCameraCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Distance                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::CreateNPCCameraCollision(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.CreateNPCCameraCollision");

	AS3NPCManager_CreateNPCCameraCollision_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.ClearAllScheduleNPCs
// (Final, Native, Public, BlueprintCallable)

void AS3NPCManager::ClearAllScheduleNPCs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.ClearAllScheduleNPCs");

	AS3NPCManager_ClearAllScheduleNPCs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.CheckNPCState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// ENpcCheckState                 State                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::CheckNPCState(const struct FGameplayTag& NPCID, ENpcCheckState State)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.CheckNPCState");

	AS3NPCManager_CheckNPCState_Params params;
	params.NPCID = NPCID;
	params.State = State;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.ChangeMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::ChangeMesh(const struct FGameplayTag& NPCID, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.ChangeMesh");

	AS3NPCManager_ChangeMesh_Params params;
	params.NPCID = NPCID;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCManager.CanSpawnNPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3NPCManager::CanSpawnNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.CanSpawnNPC");

	AS3NPCManager_CanSpawnNPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCManager.BlueprintInitializeNPC
// (Event, Public, BlueprintEvent)
// Parameters:
// class AS3Character*            NewNPC                         (Parm, ZeroConstructor, IsPlainOldData)
// class AS3NPCController*        NewAI                          (Parm, ZeroConstructor, IsPlainOldData)
// class US3NPCDefinition*        NPCDef                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3NPCManager::BlueprintInitializeNPC(class AS3Character* NewNPC, class AS3NPCController* NewAI, class US3NPCDefinition* NPCDef)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCManager.BlueprintInitializeNPC");

	AS3NPCManager_BlueprintInitializeNPC_Params params;
	params.NewNPC = NewNPC;
	params.NewAI = NewAI;
	params.NPCDef = NPCDef;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCPathFollowingComponent.ResumePathMove
// (Native, Public, BlueprintCallable)

void US3NPCPathFollowingComponent::ResumePathMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCPathFollowingComponent.ResumePathMove");

	US3NPCPathFollowingComponent_ResumePathMove_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCPathFollowingComponent.PausePathMove
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bResetVelocity                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCPathFollowingComponent::PausePathMove(bool bResetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCPathFollowingComponent.PausePathMove");

	US3NPCPathFollowingComponent_PausePathMove_Params params;
	params.bResetVelocity = bResetVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCPathFollowingComponent.GetPathPoints
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>         OutPoints                      (Parm, OutParm, ZeroConstructor)

void US3NPCPathFollowingComponent::GetPathPoints(TArray<struct FVector>* OutPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCPathFollowingComponent.GetPathPoints");

	US3NPCPathFollowingComponent_GetPathPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPoints != nullptr)
		*OutPoints = params.OutPoints;
}


// Function Shenmue3.S3NPCPathFollowingComponent.GetDistanceToGoal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3NPCPathFollowingComponent::GetDistanceToGoal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCPathFollowingComponent.GetDistanceToGoal");

	US3NPCPathFollowingComponent_GetDistanceToGoal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCPathFollowingComponent.AbortPathMove
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Reason                         (Parm, ZeroConstructor)
// bool                           bResetVelocity                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCPathFollowingComponent::AbortPathMove(const struct FString& Reason, bool bResetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCPathFollowingComponent.AbortPathMove");

	US3NPCPathFollowingComponent_AbortPathMove_Params params;
	params.Reason = Reason;
	params.bResetVelocity = bResetVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCPOIScheduler.OnOverlapBegin
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AS3NPCPOIScheduler::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCPOIScheduler.OnOverlapBegin");

	AS3NPCPOIScheduler_OnOverlapBegin_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCSchedule.ChangeAnimSequences
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag            NPCID                          (Parm)
// class UAnimSequence*           srcAnim                        (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           distAnim                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsNPCAll                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCSchedule::ChangeAnimSequences(const struct FGameplayTag& NPCID, class UAnimSequence* srcAnim, class UAnimSequence* distAnim, bool IsNPCAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCSchedule.ChangeAnimSequences");

	US3NPCSchedule_ChangeAnimSequences_Params params;
	params.NPCID = NPCID;
	params.srcAnim = srcAnim;
	params.distAnim = distAnim;
	params.IsNPCAll = IsNPCAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCScheduleTask.CheckHighPriorityShow
// (Final, Native, Public)

void US3NPCScheduleTask::CheckHighPriorityShow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask.CheckHighPriorityShow");

	US3NPCScheduleTask_CheckHighPriorityShow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Animation.AnimCompleteEnd
// (Final, Native, Public)
// Parameters:
// bool                           bAnimSequenceA                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Animation::AnimCompleteEnd(bool bAnimSequenceA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Animation.AnimCompleteEnd");

	US3NPCScheduleTask_Animation_AnimCompleteEnd_Params params;
	params.bAnimSequenceA = bAnimSequenceA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Animation.AnimCompleteBegin
// (Final, Native, Public)
// Parameters:
// bool                           bAnimSequenceA                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Animation::AnimCompleteBegin(bool bAnimSequenceA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Animation.AnimCompleteBegin");

	US3NPCScheduleTask_Animation_AnimCompleteBegin_Params params;
	params.bAnimSequenceA = bAnimSequenceA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.StartNextMoveAfterRandomDelay
// (Final, Native, Private)

void US3NPCScheduleTask_Move::StartNextMoveAfterRandomDelay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.StartNextMoveAfterRandomDelay");

	US3NPCScheduleTask_Move_StartNextMoveAfterRandomDelay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.StartNextMove
// (Final, Native, Private)

void US3NPCScheduleTask_Move::StartNextMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.StartNextMove");

	US3NPCScheduleTask_Move_StartNextMove_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.SearchChair
// (Final, Native, Private)
// Parameters:
// bool                           bForceSit                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCScheduleTask_Move::SearchChair(bool bForceSit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.SearchChair");

	US3NPCScheduleTask_Move_SearchChair_Params params;
	params.bForceSit = bForceSit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCScheduleTask_Move.OnSuccess
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EPathFollowingResult> Result                         (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Move::OnSuccess(TEnumAsByte<EPathFollowingResult> Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.OnSuccess");

	US3NPCScheduleTask_Move_OnSuccess_Params params;
	params.Result = Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.OnPOIWait
// (Final, Native, Private)

void US3NPCScheduleTask_Move::OnPOIWait()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.OnPOIWait");

	US3NPCScheduleTask_Move_OnPOIWait_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.OnPOIMoveSuccess
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EPathFollowingResult> Result                         (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Move::OnPOIMoveSuccess(TEnumAsByte<EPathFollowingResult> Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.OnPOIMoveSuccess");

	US3NPCScheduleTask_Move_OnPOIMoveSuccess_Params params;
	params.Result = Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.OnPOIMoveFailure
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EPathFollowingResult> Result                         (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Move::OnPOIMoveFailure(TEnumAsByte<EPathFollowingResult> Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.OnPOIMoveFailure");

	US3NPCScheduleTask_Move_OnPOIMoveFailure_Params params;
	params.Result = Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.OnPOIAnimComplete
// (Final, Native, Private)
// Parameters:
// bool                           bAnimSequenceA                 (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Move::OnPOIAnimComplete(bool bAnimSequenceA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.OnPOIAnimComplete");

	US3NPCScheduleTask_Move_OnPOIAnimComplete_Params params;
	params.bAnimSequenceA = bAnimSequenceA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.OnFailure
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EPathFollowingResult> Result                         (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCScheduleTask_Move::OnFailure(TEnumAsByte<EPathFollowingResult> Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.OnFailure");

	US3NPCScheduleTask_Move_OnFailure_Params params;
	params.Result = Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.MoveComplete
// (Final, Native, Private)

void US3NPCScheduleTask_Move::MoveComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.MoveComplete");

	US3NPCScheduleTask_Move_MoveComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.LeavedChair
// (Final, Native, Private)

void US3NPCScheduleTask_Move::LeavedChair()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.LeavedChair");

	US3NPCScheduleTask_Move_LeavedChair_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCScheduleTask_Move.IsTargetGimmick
// (Final, Native, Public, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCScheduleTask_Move::IsTargetGimmick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.IsTargetGimmick");

	US3NPCScheduleTask_Move_IsTargetGimmick_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCScheduleTask_Move.GetSitDirection
// (Final, Native, Public, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3NPCScheduleTask_Move::GetSitDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.GetSitDirection");

	US3NPCScheduleTask_Move_GetSitDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCScheduleTask_Move.GetSeatedChair
// (Final, Native, Private)
// Parameters:
// class AS3GimmickChair*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GimmickChair* US3NPCScheduleTask_Move::GetSeatedChair()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.GetSeatedChair");

	US3NPCScheduleTask_Move_GetSeatedChair_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCScheduleTask_Move.GetGimmickChair
// (Final, Native, Public)
// Parameters:
// class AS3GimmickChair*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GimmickChair* US3NPCScheduleTask_Move::GetGimmickChair()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.GetGimmickChair");

	US3NPCScheduleTask_Move_GetGimmickChair_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCScheduleTask_Move.GetChairTransform
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FTransform              trans                          (Parm, OutParm, IsPlainOldData)

void US3NPCScheduleTask_Move::GetChairTransform(struct FTransform* trans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.GetChairTransform");

	US3NPCScheduleTask_Move_GetChairTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (trans != nullptr)
		*trans = params.trans;
}


// Function Shenmue3.S3NPCScheduleTask_Move.GetChairLeavePoint
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FTransform              trans                          (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3NPCScheduleTask_Move::GetChairLeavePoint(struct FTransform* trans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCScheduleTask_Move.GetChairLeavePoint");

	US3NPCScheduleTask_Move_GetChairLeavePoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (trans != nullptr)
		*trans = params.trans;

	return params.ReturnValue;
}


// Function Shenmue3.S3NPCStreamingComponent.OnTriggerDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                  DestroyedTrigger               (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCStreamingComponent::OnTriggerDestroyed(class AActor* DestroyedTrigger)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCStreamingComponent.OnTriggerDestroyed");

	US3NPCStreamingComponent_OnTriggerDestroyed_Params params;
	params.DestroyedTrigger = DestroyedTrigger;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCStreamingComponent.OnNPCDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                  DestroyedNPC                   (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCStreamingComponent::OnNPCDestroyed(class AActor* DestroyedNPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCStreamingComponent.OnNPCDestroyed");

	US3NPCStreamingComponent_OnNPCDestroyed_Params params;
	params.DestroyedNPC = DestroyedNPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3NPCStreamingComponent.ClothesChanged
// (Final, Native, Private)
// Parameters:
// TScriptInterface<class US3ClothInterface> Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)

void US3NPCStreamingComponent::ClothesChanged(const TScriptInterface<class US3ClothInterface>& Interface, const struct FName& CharaName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3NPCStreamingComponent.ClothesChanged");

	US3NPCStreamingComponent_ClothesChanged_Params params;
	params.Interface = Interface;
	params.CharaName = CharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PathFollowingComponent.ResumePathMove
// (Native, Public, BlueprintCallable)

void US3PathFollowingComponent::ResumePathMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.ResumePathMove");

	US3PathFollowingComponent_ResumePathMove_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PathFollowingComponent.PausePathMove
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bResetVelocity                 (Parm, ZeroConstructor, IsPlainOldData)

void US3PathFollowingComponent::PausePathMove(bool bResetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.PausePathMove");

	US3PathFollowingComponent_PausePathMove_Params params;
	params.bResetVelocity = bResetVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PathFollowingComponent.IsUsingStairs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::IsUsingStairs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.IsUsingStairs");

	US3PathFollowingComponent_IsUsingStairs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.IsNearStairs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::IsNearStairs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.IsNearStairs");

	US3PathFollowingComponent_IsNearStairs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.HasDoorOnCurrentPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::HasDoorOnCurrentPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.HasDoorOnCurrentPath");

	US3PathFollowingComponent_HasDoorOnCurrentPath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetTargetRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                Rotation                       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::GetTargetRotation(struct FRotator* Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetTargetRotation");

	US3PathFollowingComponent_GetTargetRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Rotation != nullptr)
		*Rotation = params.Rotation;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetTargetLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Location                       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::GetTargetLocation(struct FVector* Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetTargetLocation");

	US3PathFollowingComponent_GetTargetLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetStrideInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InRemainingSteps               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          AdjustedRemainingStrides       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          RequiredAdjustment             (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3PathFollowingComponent::GetStrideInfo(float* InRemainingSteps, float* AdjustedRemainingStrides, float* RequiredAdjustment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetStrideInfo");

	US3PathFollowingComponent_GetStrideInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InRemainingSteps != nullptr)
		*InRemainingSteps = params.InRemainingSteps;
	if (AdjustedRemainingStrides != nullptr)
		*AdjustedRemainingStrides = params.AdjustedRemainingStrides;
	if (RequiredAdjustment != nullptr)
		*RequiredAdjustment = params.RequiredAdjustment;
}


// Function Shenmue3.S3PathFollowingComponent.GetRemainingSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3PathFollowingComponent::GetRemainingSteps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetRemainingSteps");

	US3PathFollowingComponent_GetRemainingSteps_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetPathPoints
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>         OutPoints                      (Parm, OutParm, ZeroConstructor)

void US3PathFollowingComponent::GetPathPoints(TArray<struct FVector>* OutPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetPathPoints");

	US3PathFollowingComponent_GetPathPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPoints != nullptr)
		*OutPoints = params.OutPoints;
}


// Function Shenmue3.S3PathFollowingComponent.GetPathLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PathFollowingComponent::GetPathLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetPathLength");

	US3PathFollowingComponent_GetPathLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetNextTurnAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PathFollowingComponent::GetNextTurnAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetNextTurnAngle");

	US3PathFollowingComponent_GetNextTurnAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetNextPathLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 InNextPathLocation             (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::GetNextPathLocation(struct FVector* InNextPathLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetNextPathLocation");

	US3PathFollowingComponent_GetNextPathLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InNextPathLocation != nullptr)
		*InNextPathLocation = params.InNextPathLocation;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetNextLocationNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3PathFollowingComponent::GetNextLocationNormal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetNextLocationNormal");

	US3PathFollowingComponent_GetNextLocationNormal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetNearStairsNavLinkPos
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector US3PathFollowingComponent::GetNearStairsNavLinkPos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetNearStairsNavLinkPos");

	US3PathFollowingComponent_GetNearStairsNavLinkPos_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetNearStairsNavLinkNextPos
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector US3PathFollowingComponent::GetNearStairsNavLinkNextPos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetNearStairsNavLinkNextPos");

	US3PathFollowingComponent_GetNearStairsNavLinkNextPos_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetNearStairsNavLinkActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* US3PathFollowingComponent::GetNearStairsNavLinkActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetNearStairsNavLinkActor");

	US3PathFollowingComponent_GetNearStairsNavLinkActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetDistanceToNextTurn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PathFollowingComponent::GetDistanceToNextTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetDistanceToNextTurn");

	US3PathFollowingComponent_GetDistanceToNextTurn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetDistanceToGoal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PathFollowingComponent::GetDistanceToGoal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetDistanceToGoal");

	US3PathFollowingComponent_GetDistanceToGoal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetDirectionToGoal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3PathFollowingComponent::GetDirectionToGoal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetDirectionToGoal");

	US3PathFollowingComponent_GetDirectionToGoal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.GetAngleToGoal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PathFollowingComponent::GetAngleToGoal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.GetAngleToGoal");

	US3PathFollowingComponent_GetAngleToGoal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.DidLastMoveReachGoal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PathFollowingComponent::DidLastMoveReachGoal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.DidLastMoveReachGoal");

	US3PathFollowingComponent_DidLastMoveReachGoal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PathFollowingComponent.AbortPathMove
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Reason                         (Parm, ZeroConstructor)
// bool                           bResetVelocity                 (Parm, ZeroConstructor, IsPlainOldData)

void US3PathFollowingComponent::AbortPathMove(const struct FString& Reason, bool bResetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PathFollowingComponent.AbortPathMove");

	US3PathFollowingComponent_AbortPathMove_Params params;
	params.Reason = Reason;
	params.bResetVelocity = bResetVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerCameraLibrary.GetNearRotCamera
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          Rot1                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rot2                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FPlayerCameraGetNearRotResult ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FPlayerCameraGetNearRotResult US3PlayerCameraLibrary::STATIC_GetNearRotCamera(float Rot1, float Rot2, float Speed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraLibrary.GetNearRotCamera");

	US3PlayerCameraLibrary_GetNearRotCamera_Params params;
	params.Rot1 = Rot1;
	params.Rot2 = Rot2;
	params.Speed = Speed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraLibrary.CalcCameraCenter
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CameraC                        (Parm, IsPlainOldData)
// struct FVector                 CameraP                        (Parm, IsPlainOldData)
// float                          CameraDis                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Z_AttentionFlag                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z_AttentionRot                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          RotY                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          CameraCenter                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          RotAdd                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FPlayerCameraCalcCenterResult ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPlayerCameraCalcCenterResult US3PlayerCameraLibrary::STATIC_CalcCameraCenter(const struct FVector& CameraC, const struct FVector& CameraP, float CameraDis, bool Z_AttentionFlag, float Z_AttentionRot, float RotY, float CameraCenter, float RotAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraLibrary.CalcCameraCenter");

	US3PlayerCameraLibrary_CalcCameraCenter_Params params;
	params.CameraC = CameraC;
	params.CameraP = CameraP;
	params.CameraDis = CameraDis;
	params.Z_AttentionFlag = Z_AttentionFlag;
	params.Z_AttentionRot = Z_AttentionRot;
	params.RotY = RotY;
	params.CameraCenter = CameraCenter;
	params.RotAdd = RotAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.SetNotInterpSearchZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSeachZoom                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerCameraManager::SetNotInterpSearchZoom(bool bSeachZoom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.SetNotInterpSearchZoom");

	AS3PlayerCameraManager_SetNotInterpSearchZoom_Params params;
	params.bSeachZoom = bSeachZoom;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerCameraManager.SetCameraState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECameraState                   NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerCameraManager::SetCameraState(ECameraState NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.SetCameraState");

	AS3PlayerCameraManager_SetCameraState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerCameraManager.IsAutoCameraRotationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3PlayerCameraManager::IsAutoCameraRotationEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.IsAutoCameraRotationEnabled");

	AS3PlayerCameraManager_IsAutoCameraRotationEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.GetSearchCameraFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3PlayerCameraManager::GetSearchCameraFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.GetSearchCameraFOV");

	AS3PlayerCameraManager_GetSearchCameraFOV_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.GetIsZoomingInFOV
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3PlayerCameraManager::GetIsZoomingInFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.GetIsZoomingInFOV");

	AS3PlayerCameraManager_GetIsZoomingInFOV_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.GetDesiredZoomFOV
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3PlayerCameraManager::GetDesiredZoomFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.GetDesiredZoomFOV");

	AS3PlayerCameraManager_GetDesiredZoomFOV_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.GetDefaultViewTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AS3PlayerCameraManager::GetDefaultViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.GetDefaultViewTarget");

	AS3PlayerCameraManager_GetDefaultViewTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.GetCameraState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECameraState                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ECameraState AS3PlayerCameraManager::GetCameraState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.GetCameraState");

	AS3PlayerCameraManager_GetCameraState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.GetBaseFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3PlayerCameraManager::GetBaseFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.GetBaseFOV");

	AS3PlayerCameraManager_GetBaseFOV_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerCameraManager.ChangedCameraState
// (Event, Public, BlueprintEvent)
// Parameters:
// ECameraState                   OldState                       (Parm, ZeroConstructor, IsPlainOldData)
// ECameraState                   NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3PlayerCameraManager::ChangedCameraState(ECameraState OldState, ECameraState NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerCameraManager.ChangedCameraState");

	AS3PlayerCameraManager_ChangedCameraState_Params params;
	params.OldState = OldState;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.SetAttributePoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::SetAttributePoints(const struct FName& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.SetAttributePoints");

	US3PlayerExpCollection_SetAttributePoints_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.SetAttributePointRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Ratio                          (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::SetAttributePointRatio(const struct FName& Key, float Ratio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.SetAttributePointRatio");

	US3PlayerExpCollection_SetAttributePointRatio_Params params;
	params.Key = Key;
	params.Ratio = Ratio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.SetAttributeLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Level                          (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::SetAttributeLevel(const struct FName& Key, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.SetAttributeLevel");

	US3PlayerExpCollection_SetAttributeLevel_Params params;
	params.Key = Key;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.ListUpValidAttributes
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> US3PlayerExpCollection::ListUpValidAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.ListUpValidAttributes");

	US3PlayerExpCollection_ListUpValidAttributes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.IsValidAttribute
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PlayerExpCollection::IsValidAttribute(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.IsValidAttribute");

	US3PlayerExpCollection_IsValidAttribute_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.GetMaxAttributePoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PlayerExpCollection::GetMaxAttributePoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.GetMaxAttributePoints");

	US3PlayerExpCollection_GetMaxAttributePoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.GetAttributeRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PlayerExpCollection::GetAttributeRatio(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.GetAttributeRatio");

	US3PlayerExpCollection_GetAttributeRatio_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.GetAttributePoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PlayerExpCollection::GetAttributePoints(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.GetAttributePoints");

	US3PlayerExpCollection_GetAttributePoints_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.GetAttributeMinLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3PlayerExpCollection::GetAttributeMinLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.GetAttributeMinLevel");

	US3PlayerExpCollection_GetAttributeMinLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.GetAttributeMaxLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3PlayerExpCollection::GetAttributeMaxLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.GetAttributeMaxLevel");

	US3PlayerExpCollection_GetAttributeMaxLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.GetAttributeLevel
// (Final, Native, Public, HasOutParms, BlueprintCallable, Const)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            OutLevel                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutNextRatio                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::GetAttributeLevel(const struct FName& Key, int* OutLevel, float* OutNextRatio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.GetAttributeLevel");

	US3PlayerExpCollection_GetAttributeLevel_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLevel != nullptr)
		*OutLevel = params.OutLevel;
	if (OutNextRatio != nullptr)
		*OutNextRatio = params.OutNextRatio;
}


// Function Shenmue3.S3PlayerExpCollection.Debug_SetTotalEarnedAttributeLevels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Levels                         (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::Debug_SetTotalEarnedAttributeLevels(int Levels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.Debug_SetTotalEarnedAttributeLevels");

	US3PlayerExpCollection_Debug_SetTotalEarnedAttributeLevels_Params params;
	params.Levels = Levels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.CountAttributeLevels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3PlayerExpCollection::CountAttributeLevels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.CountAttributeLevels");

	US3PlayerExpCollection_CountAttributeLevels_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerExpCollection.ConfigureFixedLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InAttributeLevel               (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::ConfigureFixedLevel(int InAttributeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.ConfigureFixedLevel");

	US3PlayerExpCollection_ConfigureFixedLevel_Params params;
	params.InAttributeLevel = InAttributeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.ConfigureByTotalXp
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            InMinAttributeLevel            (Parm, ZeroConstructor, IsPlainOldData)
// int                            InMaxAttributeLevel            (Parm, ZeroConstructor, IsPlainOldData)
// float                          InTotalXpToMax                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InXpDifficultyRamp             (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::ConfigureByTotalXp(int InMinAttributeLevel, int InMaxAttributeLevel, float InTotalXpToMax, float InXpDifficultyRamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.ConfigureByTotalXp");

	US3PlayerExpCollection_ConfigureByTotalXp_Params params;
	params.InMinAttributeLevel = InMinAttributeLevel;
	params.InMaxAttributeLevel = InMaxAttributeLevel;
	params.InTotalXpToMax = InTotalXpToMax;
	params.InXpDifficultyRamp = InXpDifficultyRamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.Configure
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            InMinAttributeLevel            (Parm, ZeroConstructor, IsPlainOldData)
// int                            InMaxAttributeLevel            (Parm, ZeroConstructor, IsPlainOldData)
// float                          InAttributePointsToLevel       (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::Configure(int InMinAttributeLevel, int InMaxAttributeLevel, float InAttributePointsToLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.Configure");

	US3PlayerExpCollection_Configure_Params params;
	params.InMinAttributeLevel = InMinAttributeLevel;
	params.InMaxAttributeLevel = InMaxAttributeLevel;
	params.InAttributePointsToLevel = InAttributePointsToLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.AddAttributePoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::AddAttributePoints(const struct FName& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.AddAttributePoints");

	US3PlayerExpCollection_AddAttributePoints_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerExpCollection.AddAttributePointRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Key                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Ratio                          (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerExpCollection::AddAttributePointRatio(const struct FName& Key, float Ratio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerExpCollection.AddAttributePointRatio");

	US3PlayerExpCollection_AddAttributePointRatio_Params params;
	params.Key = Key;
	params.Ratio = Ratio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerMovementComponent.SetExecCountPerformMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerMovementComponent::SetExecCountPerformMovement(int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.SetExecCountPerformMovement");

	US3PlayerMovementComponent_SetExecCountPerformMovement_Params params;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerMovementComponent.PauseAvoidance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsPaused                       (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerMovementComponent::PauseAvoidance(bool IsPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.PauseAvoidance");

	US3PlayerMovementComponent_PauseAvoidance_Params params;
	params.IsPaused = IsPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerMovementComponent.GetVelocityTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3PlayerMovementComponent::GetVelocityTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetVelocityTarget");

	US3PlayerMovementComponent_GetVelocityTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.GetRequestedVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3PlayerMovementComponent::GetRequestedVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetRequestedVelocity");

	US3PlayerMovementComponent_GetRequestedVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.GetNPCAnimRotateMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ENPCAnimRotateMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENPCAnimRotateMode> US3PlayerMovementComponent::GetNPCAnimRotateMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetNPCAnimRotateMode");

	US3PlayerMovementComponent_GetNPCAnimRotateMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.GetNPCAnimMoveMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ENPCAnimMoveMode>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENPCAnimMoveMode> US3PlayerMovementComponent::GetNPCAnimMoveMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetNPCAnimMoveMode");

	US3PlayerMovementComponent_GetNPCAnimMoveMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.GetForwardVelocityProjection
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Original                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3PlayerMovementComponent::GetForwardVelocityProjection(const struct FVector& Original)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetForwardVelocityProjection");

	US3PlayerMovementComponent_GetForwardVelocityProjection_Params params;
	params.Original = Original;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.GetEffectiveNPCAnimRotateMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ENPCAnimRotateMode> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENPCAnimRotateMode> US3PlayerMovementComponent::GetEffectiveNPCAnimRotateMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetEffectiveNPCAnimRotateMode");

	US3PlayerMovementComponent_GetEffectiveNPCAnimRotateMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.GetEffectiveNPCAnimMoveMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<ENPCAnimMoveMode>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENPCAnimMoveMode> US3PlayerMovementComponent::GetEffectiveNPCAnimMoveMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.GetEffectiveNPCAnimMoveMode");

	US3PlayerMovementComponent_GetEffectiveNPCAnimMoveMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerMovementComponent.CalculateDeltaLocationForDeltaRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          FromYawDegrees                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ToYawDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3PlayerMovementComponent::CalculateDeltaLocationForDeltaRotation(float FromYawDegrees, float ToYawDegrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerMovementComponent.CalculateDeltaLocationForDeltaRotation");

	US3PlayerMovementComponent_CalculateDeltaLocationForDeltaRotation_Params params;
	params.FromYawDegrees = FromYawDegrees;
	params.ToYawDegrees = ToYawDegrees;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerObstacleSensorComponent.CheckForNPCObstacles
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class AS3Character*>    Chars                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AS3Character*            PreviousChar                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InDirection                    (Parm, IsPlainOldData)
// float                          PreviousCharRadiusPad          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReactDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutDirection                   (Parm, OutParm, IsPlainOldData)
// float                          OutDistance                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Character* US3PlayerObstacleSensorComponent::CheckForNPCObstacles(TArray<class AS3Character*> Chars, class AS3Character* PreviousChar, const struct FVector& InDirection, float PreviousCharRadiusPad, float ReactDistance, struct FVector* OutDirection, float* OutDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerObstacleSensorComponent.CheckForNPCObstacles");

	US3PlayerObstacleSensorComponent_CheckForNPCObstacles_Params params;
	params.Chars = Chars;
	params.PreviousChar = PreviousChar;
	params.InDirection = InDirection;
	params.PreviousCharRadiusPad = PreviousCharRadiusPad;
	params.ReactDistance = ReactDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDirection != nullptr)
		*OutDirection = params.OutDirection;
	if (OutDistance != nullptr)
		*OutDistance = params.OutDistance;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerObstacleSensorComponent.CalculateStopParameters
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          WalkCycleTime                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          WalkCycleDuration              (Parm, ZeroConstructor, IsPlainOldData)
// float                          WalkCycleSpeed                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          WalkStopMarkerA                (Parm, ZeroConstructor, IsPlainOldData)
// float                          WalkStopMarkerB                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StopAnimDistance               (Parm, ZeroConstructor, IsPlainOldData)
// float                          DistanceToStopPoint            (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutStrideScale                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           OutQueueStopAnim               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3PlayerObstacleSensorComponent::CalculateStopParameters(float WalkCycleTime, float WalkCycleDuration, float WalkCycleSpeed, float WalkStopMarkerA, float WalkStopMarkerB, float StopAnimDistance, float DistanceToStopPoint, float* OutStrideScale, bool* OutQueueStopAnim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerObstacleSensorComponent.CalculateStopParameters");

	US3PlayerObstacleSensorComponent_CalculateStopParameters_Params params;
	params.WalkCycleTime = WalkCycleTime;
	params.WalkCycleDuration = WalkCycleDuration;
	params.WalkCycleSpeed = WalkCycleSpeed;
	params.WalkStopMarkerA = WalkStopMarkerA;
	params.WalkStopMarkerB = WalkStopMarkerB;
	params.StopAnimDistance = StopAnimDistance;
	params.DistanceToStopPoint = DistanceToStopPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutStrideScale != nullptr)
		*OutStrideScale = params.OutStrideScale;
	if (OutQueueStopAnim != nullptr)
		*OutQueueStopAnim = params.OutQueueStopAnim;
}


// Function Shenmue3.S3PlayerObstacleSensorComponent.CalculateStopGap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AS3Character*            Char                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3PlayerObstacleSensorComponent::CalculateStopGap(class AS3Character* Char)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerObstacleSensorComponent.CalculateStopGap");

	US3PlayerObstacleSensorComponent_CalculateStopGap_Params params;
	params.Char = Char;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerInput.UpdateKeyBinding
// (Final, Native, Public, BlueprintCallable)

void US3PlayerInput::UpdateKeyBinding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerInput.UpdateKeyBinding");

	US3PlayerInput_UpdateKeyBinding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PostProcessAnimInstance.SetEarringPattern
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EEarringParttern               Pattern                        (Parm, ZeroConstructor, IsPlainOldData)

void US3PostProcessAnimInstance::SetEarringPattern(EEarringParttern Pattern)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PostProcessAnimInstance.SetEarringPattern");

	US3PostProcessAnimInstance_SetEarringPattern_Params params;
	params.Pattern = Pattern;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PostProcessAnimInstance.IsNeedSupportHem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PostProcessAnimInstance::IsNeedSupportHem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PostProcessAnimInstance.IsNeedSupportHem");

	US3PostProcessAnimInstance_IsNeedSupportHem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PostProcessAnimInstance.IsDisablePhysics
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PostProcessAnimInstance::IsDisablePhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PostProcessAnimInstance.IsDisablePhysics");

	US3PostProcessAnimInstance_IsDisablePhysics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerSteeringComponent.UpdateTestCache
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void US3PlayerSteeringComponent::UpdateTestCache(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerSteeringComponent.UpdateTestCache");

	US3PlayerSteeringComponent_UpdateTestCache_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3PlayerSteeringComponent.SteerTowardsPartnerSpline
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InLocation                     (Parm, IsPlainOldData)
// float                          InputYaw                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InputMagnitude                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutputYaw                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutputMagnitude                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PlayerSteeringComponent::SteerTowardsPartnerSpline(const struct FVector& InLocation, float InputYaw, float InputMagnitude, float* OutputYaw, float* OutputMagnitude)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerSteeringComponent.SteerTowardsPartnerSpline");

	US3PlayerSteeringComponent_SteerTowardsPartnerSpline_Params params;
	params.InLocation = InLocation;
	params.InputYaw = InputYaw;
	params.InputMagnitude = InputMagnitude;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputYaw != nullptr)
		*OutputYaw = params.OutputYaw;
	if (OutputMagnitude != nullptr)
		*OutputMagnitude = params.OutputMagnitude;

	return params.ReturnValue;
}


// Function Shenmue3.S3PlayerSteeringComponent.CheckTalkToNPCWithCache
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3TalkComponentBase*    NPCTalkComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3PlayerSteeringComponent::CheckTalkToNPCWithCache(class US3TalkComponentBase* NPCTalkComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3PlayerSteeringComponent.CheckTalkToNPCWithCache");

	US3PlayerSteeringComponent_CheckTalkToNPCWithCache_Params params;
	params.NPCTalkComponent = NPCTalkComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ProceduralAnimBlendComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void US3ProceduralAnimBlendComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProceduralAnimBlendComponent.Stop");

	US3ProceduralAnimBlendComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProceduralAnimBlendComponent.SampleStep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NormalizedTime                 (Parm, ZeroConstructor, IsPlainOldData)

void US3ProceduralAnimBlendComponent::SampleStep(float NormalizedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProceduralAnimBlendComponent.SampleStep");

	US3ProceduralAnimBlendComponent_SampleStep_Params params;
	params.NormalizedTime = NormalizedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProceduralAnimBlendComponent.IsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ProceduralAnimBlendComponent::IsRunning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProceduralAnimBlendComponent.IsRunning");

	US3ProceduralAnimBlendComponent_IsRunning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ProceduralAnimBlendComponent.BeginStep
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              TargetActorTransform           (Parm, IsPlainOldData)
// struct FTransform              TargetFootTransform            (Parm, IsPlainOldData)
// bool                           LeadWithRight                  (Parm, ZeroConstructor, IsPlainOldData)

void US3ProceduralAnimBlendComponent::BeginStep(const struct FTransform& TargetActorTransform, const struct FTransform& TargetFootTransform, bool LeadWithRight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProceduralAnimBlendComponent.BeginStep");

	US3ProceduralAnimBlendComponent_BeginStep_Params params;
	params.TargetActorTransform = TargetActorTransform;
	params.TargetFootTransform = TargetFootTransform;
	params.LeadWithRight = LeadWithRight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProceduralAnimBlendComponent.BeginBlend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*       EndSequence                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndSequenceTime                (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              TargetTransform                (Parm, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void US3ProceduralAnimBlendComponent::BeginBlend(class UAnimSequenceBase* EndSequence, float EndSequenceTime, const struct FTransform& TargetTransform, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProceduralAnimBlendComponent.BeginBlend");

	US3ProceduralAnimBlendComponent_BeginBlend_Params params;
	params.EndSequence = EndSequence;
	params.EndSequenceTime = EndSequenceTime;
	params.TargetTransform = TargetTransform;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProgressManager.UpdateMainFlowWork
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Param                          (Parm, ZeroConstructor)

void US3ProgressManager::UpdateMainFlowWork(const struct FName& ID, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProgressManager.UpdateMainFlowWork");

	US3ProgressManager_UpdateMainFlowWork_Params params;
	params.ID = ID;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProgressManager.UpdateACPlayDateTime
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDateTime               NewDateTime                    (Parm)

void US3ProgressManager::UpdateACPlayDateTime(const struct FName& ID, const struct FDateTime& NewDateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProgressManager.UpdateACPlayDateTime");

	US3ProgressManager_UpdateACPlayDateTime_Params params;
	params.ID = ID;
	params.NewDateTime = NewDateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProgressManager.RemoveMainFlowWork
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void US3ProgressManager::RemoveMainFlowWork(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProgressManager.RemoveMainFlowWork");

	US3ProgressManager_RemoveMainFlowWork_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProgressManager.InitProgress
// (Native, Public, BlueprintCallable)
// Parameters:
// int                            flag_array_length              (Parm, ZeroConstructor, IsPlainOldData)

void US3ProgressManager::InitProgress(int flag_array_length)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProgressManager.InitProgress");

	US3ProgressManager_InitProgress_Params params;
	params.flag_array_length = flag_array_length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ProgressManager.GetMainFlowWork
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3ProgressManager::GetMainFlowWork(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProgressManager.GetMainFlowWork");

	US3ProgressManager_GetMainFlowWork_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3ProgressManager.GetACPlayDateTime
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDateTime               DateTime                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3ProgressManager::GetACPlayDateTime(const struct FName& ID, struct FDateTime* DateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ProgressManager.GetACPlayDateTime");

	US3ProgressManager_GetACPlayDateTime_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DateTime != nullptr)
		*DateTime = params.DateTime;

	return params.ReturnValue;
}


// Function Shenmue3.S3RainManager.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           NewEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3RainManager::SetEnabled(bool NewEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3RainManager.SetEnabled");

	AS3RainManager_SetEnabled_Params params;
	params.NewEnabled = NewEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3RainManager.NavigationRaincast
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 RayStart                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 RayEnd                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, OutParm, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3RainManager::NavigationRaincast(const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, struct FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3RainManager.NavigationRaincast");

	AS3RainManager_NavigationRaincast_Params params;
	params.RayStart = RayStart;
	params.RayEnd = RayEnd;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Shenmue3.S3RainManager.GetNavData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ANavigationData*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ANavigationData* AS3RainManager::GetNavData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3RainManager.GetNavData");

	AS3RainManager_GetNavData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveGame.GetEventFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3SaveGame::GetEventFlag(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveGame.GetEventFlag");

	US3SaveGame_GetEventFlag_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SceneAndWidgetCapture2D.OnInterpToggle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3SceneAndWidgetCapture2D::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SceneAndWidgetCapture2D.OnInterpToggle");

	AS3SceneAndWidgetCapture2D_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ToggleCamera
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::ToggleCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ToggleCamera");

	AS3SearchArea_ToggleCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.StopSearch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3PlayerController*     PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::StopSearch(class AS3PlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.StopSearch");

	AS3SearchArea_StopSearch_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.StartSearch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AS3PlayerController*     PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::StartSearch(class AS3PlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.StartSearch");

	AS3SearchArea_StartSearch_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.StartGrabSubAnim
// (Event, Public, BlueprintEvent)

void AS3SearchArea::StartGrabSubAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.StartGrabSubAnim");

	AS3SearchArea_StartGrabSubAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.StartCheckCameraTransition
// (Final, Native, Public)
// Parameters:
// float                          TransitionTime                 (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::StartCheckCameraTransition(float TransitionTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.StartCheckCameraTransition");

	AS3SearchArea_StartCheckCameraTransition_Params params;
	params.TransitionTime = TransitionTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.StartACEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTalkScript*             ACEventScript                  (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::StartACEvent(class UTalkScript* ACEventScript)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.StartACEvent");

	AS3SearchArea_StartACEvent_Params params;
	params.ACEventScript = ACEventScript;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.SetLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLocked                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::SetLocked(bool bNewLocked)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.SetLocked");

	AS3SearchArea_SetLocked_Params params;
	params.bNewLocked = bNewLocked;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.SetEnabledSearchCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::SetEnabledSearchCount(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.SetEnabledSearchCount");

	AS3SearchArea_SetEnabledSearchCount_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.SetCurrentSearch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3SearchComponent*      Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3SearchArea::SetCurrentSearch(class US3SearchComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.SetCurrentSearch");

	AS3SearchArea_SetCurrentSearch_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.SetCurrentFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3SearchComponent*      NewForcus                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3SearchArea::SetCurrentFocus(class US3SearchComponent* NewForcus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.SetCurrentFocus");

	AS3SearchArea_SetCurrentFocus_Params params;
	params.NewForcus = NewForcus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.SetBusyLockOnChangeFlag
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::SetBusyLockOnChangeFlag(bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.SetBusyLockOnChangeFlag");

	AS3SearchArea_SetBusyLockOnChangeFlag_Params params;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.SelectCameraTransitionComplete
// (Final, Native, Public)

void AS3SearchArea::SelectCameraTransitionComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.SelectCameraTransitionComplete");

	AS3SearchArea_SelectCameraTransitionComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ResumeCurrentMontage
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::ResumeCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ResumeCurrentMontage");

	AS3SearchArea_ResumeCurrentMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.RestoreCamera
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::RestoreCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.RestoreCamera");

	AS3SearchArea_RestoreCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ResetDetailParam
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::ResetDetailParam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ResetDetailParam");

	AS3SearchArea_ResetDetailParam_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ReleasedItem
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::ReleasedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ReleasedItem");

	AS3SearchArea_ReleasedItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.PlayGetSound
// (Event, Public, BlueprintEvent)

void AS3SearchArea::PlayGetSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.PlayGetSound");

	AS3SearchArea_PlayGetSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.PlayCutscene
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   CutsceneId                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::PlayCutscene(const struct FName& CutsceneId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.PlayCutscene");

	AS3SearchArea_PlayCutscene_Params params;
	params.CutsceneId = CutsceneId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.PauseCurrentMontage
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::PauseCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.PauseCurrentMontage");

	AS3SearchArea_PauseCurrentMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.OnStopSearch
// (Event, Public, BlueprintEvent)

void AS3SearchArea::OnStopSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.OnStopSearch");

	AS3SearchArea_OnStopSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.OnStartSearch
// (Event, Public, BlueprintEvent)

void AS3SearchArea::OnStartSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.OnStartSearch");

	AS3SearchArea_OnStartSearch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.OnInteracted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InteractingActor               (Parm, ZeroConstructor, IsPlainOldData)
// class US3SearchComponent*      SearchComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AS3SearchArea::OnInteracted(class AActor* InteractingActor, class US3SearchComponent* SearchComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.OnInteracted");

	AS3SearchArea_OnInteracted_Params params;
	params.InteractingActor = InteractingActor;
	params.SearchComponent = SearchComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.OnBack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InteractingActor               (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::OnBack(class AActor* InteractingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.OnBack");

	AS3SearchArea_OnBack_Params params;
	params.InteractingActor = InteractingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.OnAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InteractingActor               (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::OnAction(class AActor* InteractingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.OnAction");

	AS3SearchArea_OnAction_Params params;
	params.InteractingActor = InteractingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.MoveGrabedItem
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::MoveGrabedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.MoveGrabedItem");

	AS3SearchArea_MoveGrabedItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.LookingItem
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::LookingItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.LookingItem");

	AS3SearchArea_LookingItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.KillTransitionEvent
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::KillTransitionEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.KillTransitionEvent");

	AS3SearchArea_KillTransitionEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.IsValidComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3GameInstance*         GameIns                        (Parm, ZeroConstructor, IsPlainOldData)
// class US3SearchComponent*      Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsValidComponent(class US3GameInstance* GameIns, class US3SearchComponent* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsValidComponent");

	AS3SearchArea_IsValidComponent_Params params;
	params.GameIns = GameIns;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.IsTransitionBusy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsTransitionBusy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsTransitionBusy");

	AS3SearchArea_IsTransitionBusy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.IsStartSeach
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsStartSeach()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsStartSeach");

	AS3SearchArea_IsStartSeach_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.IsShowBackIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsShowBackIcon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsShowBackIcon");

	AS3SearchArea_IsShowBackIcon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.IsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bForDescription                (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsLocked(bool bForDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsLocked");

	AS3SearchArea_IsLocked_Params params;
	params.bForDescription = bForDescription;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.IsEnabledPlaySubTitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsEnabledPlaySubTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsEnabledPlaySubTitle");

	AS3SearchArea_IsEnabledPlaySubTitle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.IsDetailTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::IsDetailTransition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.IsDetailTransition");

	AS3SearchArea_IsDetailTransition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.InitializeGather
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::InitializeGather()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.InitializeGather");

	AS3SearchArea_InitializeGather_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.GrabCompleted
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::GrabCompleted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GrabCompleted");

	AS3SearchArea_GrabCompleted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.GrabbedItem
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::GrabbedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GrabbedItem");

	AS3SearchArea_GrabbedItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.GetTagCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3SearchArea::GetTagCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetTagCharaName");

	AS3SearchArea_GetTagCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetSearchComponentByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 Name                           (Parm, ZeroConstructor)
// class US3SearchComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3SearchComponent* AS3SearchArea::GetSearchComponentByName(const struct FString& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetSearchComponentByName");

	AS3SearchArea_GetSearchComponentByName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetMoveMotionValue
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bReturnMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3SearchArea::GetMoveMotionValue(bool bReturnMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetMoveMotionValue");

	AS3SearchArea_GetMoveMotionValue_Params params;
	params.bReturnMode = bReturnMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetLastChildSearch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3SearchComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3SearchComponent* AS3SearchArea::GetLastChildSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetLastChildSearch");

	AS3SearchArea_GetLastChildSearch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetItem
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3SearchArea::GetItem(const struct FName& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetItem");

	AS3SearchArea_GetItem_Params params;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.GetDetailBackRequest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::GetDetailBackRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetDetailBackRequest");

	AS3SearchArea_GetDetailBackRequest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetCurrentSearch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3SearchComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3SearchComponent* AS3SearchArea::GetCurrentSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetCurrentSearch");

	AS3SearchArea_GetCurrentSearch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetCurrentFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class US3SearchComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class US3SearchComponent* AS3SearchArea::GetCurrentFocus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetCurrentFocus");

	AS3SearchArea_GetCurrentFocus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetCurrentCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACameraActor*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACameraActor* AS3SearchArea::GetCurrentCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetCurrentCamera");

	AS3SearchArea_GetCurrentCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetClothCharaName
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AS3SearchArea::GetClothCharaName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetClothCharaName");

	AS3SearchArea_GetClothCharaName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACameraActor*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACameraActor* AS3SearchArea::GetCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetCamera");

	AS3SearchArea_GetCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.GetActionIconType
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESearchActionIcon              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ESearchActionIcon AS3SearchArea::GetActionIconType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.GetActionIconType");

	AS3SearchArea_GetActionIconType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.FreeSearchLock
// (Event, Public, BlueprintEvent)

void AS3SearchArea::FreeSearchLock()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.FreeSearchLock");

	AS3SearchArea_FreeSearchLock_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ForceUnlock
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::ForceUnlock()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ForceUnlock");

	AS3SearchArea_ForceUnlock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.FinishedSearchPoint
// (Event, Public, BlueprintEvent)

void AS3SearchArea::FinishedSearchPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.FinishedSearchPoint");

	AS3SearchArea_FinishedSearchPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ExitSearchMode
// (Event, Public, BlueprintEvent)

void AS3SearchArea::ExitSearchMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ExitSearchMode");

	AS3SearchArea_ExitSearchMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.ExitSearch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3SearchArea::ExitSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.ExitSearch");

	AS3SearchArea_ExitSearch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.EndGrabSubAnim
// (Event, Public, BlueprintEvent)

void AS3SearchArea::EndGrabSubAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.EndGrabSubAnim");

	AS3SearchArea_EndGrabSubAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.EndCheckCameraTransition
// (Final, Native, Public)

void AS3SearchArea::EndCheckCameraTransition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.EndCheckCameraTransition");

	AS3SearchArea_EndCheckCameraTransition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.CheckAction
// (Final, Native, Public)
// Parameters:
// ESearchTiming                  Timing                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::CheckAction(ESearchTiming Timing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.CheckAction");

	AS3SearchArea_CheckAction_Params params;
	params.Timing = Timing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.CanOpenMemopad
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SearchArea::CanOpenMemopad()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.CanOpenMemopad");

	AS3SearchArea_CanOpenMemopad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchArea.CameraTransitionComplete
// (Final, Native, Public)

void AS3SearchArea::CameraTransitionComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.CameraTransitionComplete");

	AS3SearchArea_CameraTransitionComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchArea.AttachGrabActor
// (Final, Native, Public, BlueprintCallable)

void AS3SearchArea::AttachGrabActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchArea.AttachGrabActor");

	AS3SearchArea_AttachGrabActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.ShowNotInstallDLCDialog
// (Event, Public, BlueprintEvent)

void US3SaveLoadManager::ShowNotInstallDLCDialog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ShowNotInstallDLCDialog");

	US3SaveLoadManager_ShowNotInstallDLCDialog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.SetOverrideSaveParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FS3SaveOverrideParam    Param                          (Parm)

void US3SaveLoadManager::SetOverrideSaveParam(const struct FS3SaveOverrideParam& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.SetOverrideSaveParam");

	US3SaveLoadManager_SetOverrideSaveParam_Params params;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.SetLoadingScreen
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3LoadingType                 Type                           (Parm, ZeroConstructor, IsPlainOldData)

void US3SaveLoadManager::SetLoadingScreen(ES3LoadingType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.SetLoadingScreen");

	US3SaveLoadManager_SetLoadingScreen_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.SetLoadedData
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class US3SaveGame*             SaveGame                       (Parm, ZeroConstructor, IsPlainOldData)

void US3SaveLoadManager::SetLoadedData(class US3SaveGame* SaveGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.SetLoadedData");

	US3SaveLoadManager_SetLoadedData_Params params;
	params.SaveGame = SaveGame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.ResetSaveData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::ResetSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ResetSaveData");

	US3SaveLoadManager_ResetSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.OpenSaveWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::OpenSaveWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.OpenSaveWidget");

	US3SaveLoadManager_OpenSaveWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.OpenSaveLoadWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3SaveLoadManager::OpenSaveLoadWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.OpenSaveLoadWidget");

	US3SaveLoadManager_OpenSaveLoadWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.OpenLoadWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::OpenLoadWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.OpenLoadWidget");

	US3SaveLoadManager_OpenLoadWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.OpenLevel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ES3Where                       LocationId                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            EventStep                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::OpenLevel(ES3Where LocationId, int EventStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.OpenLevel");

	US3SaveLoadManager_OpenLevel_Params params;
	params.LocationId = LocationId;
	params.EventStep = EventStep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.MakeSlotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SaveLoadManager::MakeSlotName(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.MakeSlotName");

	US3SaveLoadManager_MakeSlotName_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.MakeNewGameData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3SaveGame*             SaveGame                       (Parm, ZeroConstructor, IsPlainOldData)
// ES3Where                       ClearRestartLevel              (Parm, ZeroConstructor, IsPlainOldData)

void US3SaveLoadManager::MakeNewGameData(class US3SaveGame* SaveGame, ES3Where ClearRestartLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.MakeNewGameData");

	US3SaveLoadManager_MakeNewGameData_Params params;
	params.SaveGame = SaveGame;
	params.ClearRestartLevel = ClearRestartLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.IsIgnoreStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::IsIgnoreStep(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.IsIgnoreStep");

	US3SaveLoadManager_IsIgnoreStep_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.IsExistAutoSaveData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::IsExistAutoSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.IsExistAutoSaveData");

	US3SaveLoadManager_IsExistAutoSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.IsClearData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3SaveGame*             SaveGame                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::IsClearData(class US3SaveGame* SaveGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.IsClearData");

	US3SaveLoadManager_IsClearData_Params params;
	params.SaveGame = SaveGame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.GetUniquePlayerId
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bSuccess                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 ID                             (Parm, OutParm, ZeroConstructor)

void US3SaveLoadManager::GetUniquePlayerId(bool* bSuccess, struct FString* ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.GetUniquePlayerId");

	US3SaveLoadManager_GetUniquePlayerId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bSuccess != nullptr)
		*bSuccess = params.bSuccess;
	if (ID != nullptr)
		*ID = params.ID;
}


// Function Shenmue3.S3SaveLoadManager.GetTitleName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SaveLoadManager::GetTitleName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.GetTitleName");

	US3SaveLoadManager_GetTitleName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.GetLoadingData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// class US3SaveGame*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3SaveGame* US3SaveLoadManager::GetLoadingData(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.GetLoadingData");

	US3SaveLoadManager_GetLoadingData_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.GetGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3SaveLoadManager::GetGameInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.GetGameInstance");

	US3SaveLoadManager_GetGameInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.ExecSaveSystem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAutoSave                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::ExecSaveSystem(bool bAutoSave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ExecSaveSystem");

	US3SaveLoadManager_ExecSaveSystem_Params params;
	params.bAutoSave = bAutoSave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.ExecSaveIgnore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 SaveLabel                      (Parm, ZeroConstructor)
// struct FString                 SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::ExecSaveIgnore(const struct FString& SaveLabel, const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ExecSaveIgnore");

	US3SaveLoadManager_ExecSaveIgnore_Params params;
	params.SaveLabel = SaveLabel;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.ExecSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 SaveLabel                      (Parm, ZeroConstructor)
// struct FString                 SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::ExecSave(const struct FString& SaveLabel, const struct FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ExecSave");

	US3SaveLoadManager_ExecSave_Params params;
	params.SaveLabel = SaveLabel;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.ExecLoadSystemAsync
// (Final, Native, Public, BlueprintCallable)

void US3SaveLoadManager::ExecLoadSystemAsync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ExecLoadSystemAsync");

	US3SaveLoadManager_ExecLoadSystemAsync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.ExecLoad
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bSuccess                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           SetData                        (Parm, ZeroConstructor, IsPlainOldData)
// class US3SaveGame*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3SaveGame* US3SaveLoadManager::ExecLoad(const struct FString& SlotName, int UserIndex, bool SetData, bool* bSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ExecLoad");

	US3SaveLoadManager_ExecLoad_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;
	params.SetData = SetData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bSuccess != nullptr)
		*bSuccess = params.bSuccess;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.ExecAutoSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SaveLoadManager::ExecAutoSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ExecAutoSave");

	US3SaveLoadManager_ExecAutoSave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.DateTimeToString
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime               DateTime                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SaveLoadManager::DateTimeToString(const struct FDateTime& DateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.DateTimeToString");

	US3SaveLoadManager_DateTimeToString_Params params;
	params.DateTime = DateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.CreateSaveProgressText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3Where                       Location                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SaveLoadManager::CreateSaveProgressText(ES3Where Location, int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.CreateSaveProgressText");

	US3SaveLoadManager_CreateSaveProgressText_Params params;
	params.Location = Location;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.CreateMoneyChipName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Money                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            chip                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SaveLoadManager::CreateMoneyChipName(int Money, int chip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.CreateMoneyChipName");

	US3SaveLoadManager_CreateMoneyChipName_Params params;
	params.Money = Money;
	params.chip = chip;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.CreateDifficultyAndKungFuName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FS3BattleStatsSaveData  BattleStats                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SaveLoadManager::CreateDifficultyAndKungFuName(const struct FS3BattleStatsSaveData& BattleStats)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.CreateDifficultyAndKungFuName");

	US3SaveLoadManager_CreateDifficultyAndKungFuName_Params params;
	params.BattleStats = BattleStats;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SaveLoadManager.ClearOverrideSaveParam
// (Final, Native, Public, BlueprintCallable)

void US3SaveLoadManager::ClearOverrideSaveParam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ClearOverrideSaveParam");

	US3SaveLoadManager_ClearOverrideSaveParam_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.BeginLoadData
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class US3SaveGame*             SaveGame                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRetryData                     (Parm, ZeroConstructor, IsPlainOldData)

void US3SaveLoadManager::BeginLoadData(class US3SaveGame* SaveGame, bool bRetryData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.BeginLoadData");

	US3SaveLoadManager_BeginLoadData_Params params;
	params.SaveGame = SaveGame;
	params.bRetryData = bRetryData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SaveLoadManager.ApplyIniSaveData
// (Final, Native, Public, BlueprintCallable)

void US3SaveLoadManager::ApplyIniSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SaveLoadManager.ApplyIniSaveData");

	US3SaveLoadManager_ApplyIniSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.SetUniqueItemName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 UniqueName                     (Parm, ZeroConstructor)

void US3SearchComponent::SetUniqueItemName(const struct FString& UniqueName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.SetUniqueItemName");

	US3SearchComponent_SetUniqueItemName_Params params;
	params.UniqueName = UniqueName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.SetIconColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            NormalColor                    (Parm, IsPlainOldData)
// struct FLinearColor            DisableColor                   (Parm, IsPlainOldData)

void US3SearchComponent::SetIconColor(const struct FLinearColor& NormalColor, const struct FLinearColor& DisableColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.SetIconColor");

	US3SearchComponent_SetIconColor_Params params;
	params.NormalColor = NormalColor;
	params.DisableColor = DisableColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.SetCharacterWorldTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              NewTransform                   (Parm, IsPlainOldData)
// float                          AdjustRight                    (Parm, ZeroConstructor, IsPlainOldData)

void US3SearchComponent::SetCharacterWorldTransform(const struct FTransform& NewTransform, float AdjustRight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.SetCharacterWorldTransform");

	US3SearchComponent_SetCharacterWorldTransform_Params params;
	params.NewTransform = NewTransform;
	params.AdjustRight = AdjustRight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.IsMoveItem
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SearchComponent::IsMoveItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.IsMoveItem");

	US3SearchComponent_IsMoveItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.IsDeleteItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SearchComponent::IsDeleteItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.IsDeleteItem");

	US3SearchComponent_IsDeleteItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.InitializePreGrabActorLocation
// (Final, Native, Public, BlueprintCallable)

void US3SearchComponent::InitializePreGrabActorLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.InitializePreGrabActorLocation");

	US3SearchComponent_InitializePreGrabActorLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.InitializePreComponentLocation
// (Final, Native, Public, BlueprintCallable)

void US3SearchComponent::InitializePreComponentLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.InitializePreComponentLocation");

	US3SearchComponent_InitializePreComponentLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.InitializeLocationBackUp
// (Final, Native, Public, BlueprintCallable)

void US3SearchComponent::InitializeLocationBackUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.InitializeLocationBackUp");

	US3SearchComponent_InitializeLocationBackUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.GetUniqueItemName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SearchComponent::GetUniqueItemName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetUniqueItemName");

	US3SearchComponent_GetUniqueItemName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetSearchEnableRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3SearchComponent::GetSearchEnableRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetSearchEnableRadius");

	US3SearchComponent_GetSearchEnableRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetNextSearchStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FS3SearchStep           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3SearchStep US3SearchComponent::GetNextSearchStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetNextSearchStep");

	US3SearchComponent_GetNextSearchStep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetGrabMotionTypeName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3SearchComponent::GetGrabMotionTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetGrabMotionTypeName");

	US3SearchComponent_GetGrabMotionTypeName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetFirstActionIconType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESearchActionIcon              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ESearchActionIcon US3SearchComponent::GetFirstActionIconType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetFirstActionIconType");

	US3SearchComponent_GetFirstActionIconType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetEditedStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3SearchComponent::GetEditedStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetEditedStep");

	US3SearchComponent_GetEditedStep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCurrentTextDisplayTimeOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3SearchComponent::GetCurrentTextDisplayTimeOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCurrentTextDisplayTimeOverride");

	US3SearchComponent_GetCurrentTextDisplayTimeOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCurrentSearchStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FS3SearchStep           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3SearchStep US3SearchComponent::GetCurrentSearchStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCurrentSearchStep");

	US3SearchComponent_GetCurrentSearchStep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCurrentScriptLabel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName US3SearchComponent::GetCurrentScriptLabel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCurrentScriptLabel");

	US3SearchComponent_GetCurrentScriptLabel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCurrentPreviewSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* US3SearchComponent::GetCurrentPreviewSequence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCurrentPreviewSequence");

	US3SearchComponent_GetCurrentPreviewSequence_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCurrentMontage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* US3SearchComponent::GetCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCurrentMontage");

	US3SearchComponent_GetCurrentMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCharacterWorldTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bForArmMesh                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3SearchComponent::GetCharacterWorldTransform(bool bForArmMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCharacterWorldTransform");

	US3SearchComponent_GetCharacterWorldTransform_Params params;
	params.bForArmMesh = bForArmMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.GetCameraTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          InterpTime                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          CameraFOVOffset                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Camera                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewModeFlag                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform US3SearchComponent::GetCameraTransform(int Camera, bool bNewModeFlag, float* InterpTime, float* CameraFOVOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.GetCameraTransform");

	US3SearchComponent_GetCameraTransform_Params params;
	params.Camera = Camera;
	params.bNewModeFlag = bNewModeFlag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InterpTime != nullptr)
		*InterpTime = params.InterpTime;
	if (CameraFOVOffset != nullptr)
		*CameraFOVOffset = params.CameraFOVOffset;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchComponent.FinalizeComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bActionComplete                (Parm, ZeroConstructor, IsPlainOldData)

void US3SearchComponent::FinalizeComponent(bool bActionComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.FinalizeComponent");

	US3SearchComponent_FinalizeComponent_Params params;
	params.bActionComplete = bActionComplete;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SearchComponent.AdvanceSearch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bReverse                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           BMax                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopOnAll                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3SearchComponent::AdvanceSearch(bool bReverse, bool BMax, bool bStopOnAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchComponent.AdvanceSearch");

	US3SearchComponent_AdvanceSearch_Params params;
	params.bReverse = bReverse;
	params.BMax = BMax;
	params.bStopOnAll = bStopOnAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SearchPamphletComponent.UpdateFlagCount
// (Event, Public, BlueprintEvent)

void US3SearchPamphletComponent::UpdateFlagCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SearchPamphletComponent.UpdateFlagCount");

	US3SearchPamphletComponent_UpdateFlagCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3ShopDataManagerBase.GetShopData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class US3ShopData*             ShopData                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// class US3ShopDataBase*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3ShopDataBase* AS3ShopDataManagerBase::GetShopData(class US3ShopData* ShopData, const struct FName& Label)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3ShopDataManagerBase.GetShopData");

	AS3ShopDataManagerBase_GetShopData_Params params;
	params.ShopData = ShopData;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SkyManager.CalcMoonPhase
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AS3SkyManager::CalcMoonPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SkyManager.CalcMoonPhase");

	AS3SkyManager_CalcMoonPhase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundPlayer.Stop
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SoundPlayer::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.Stop");

	AS3SoundPlayer_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SoundPlayer.SetVoiceFlag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewFlag                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3SoundPlayer::SetVoiceFlag(bool bNewFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.SetVoiceFlag");

	AS3SoundPlayer_SetVoiceFlag_Params params;
	params.bNewFlag = bNewFlag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundPlayer.SetSystemVolume
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3SoundPlayer::SetSystemVolume(float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.SetSystemVolume");

	AS3SoundPlayer_SetSystemVolume_Params params;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundPlayer.Restart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3SoundPlayer::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.Restart");

	AS3SoundPlayer_Restart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundPlayer.PermitPlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3SoundPlayer::PermitPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.PermitPlay");

	AS3SoundPlayer_PermitPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundPlayer.Pause
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AS3SoundPlayer::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.Pause");

	AS3SoundPlayer_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundPlayer.GetPlaybackTime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3SoundPlayer::GetPlaybackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundPlayer.GetPlaybackTime");

	AS3SoundPlayer_GetPlaybackTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SpectatorPawn.InputY
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3SpectatorPawn::InputY(float Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SpectatorPawn.InputY");

	AS3SpectatorPawn_InputY_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SpectatorPawn.InputX
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3SpectatorPawn::InputX(float Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SpectatorPawn.InputX");

	AS3SpectatorPawn_InputX_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SplineMoveActor.SplineInit
// (Final, Native, Public, BlueprintCallable)

void AS3SplineMoveActor::SplineInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SplineMoveActor.SplineInit");

	AS3SplineMoveActor_SplineInit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SplineMoveActor.IsLocationWithinSplineWidth
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// float                          Buffer                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SplineMoveActor::IsLocationWithinSplineWidth(const struct FVector& Location, float Buffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SplineMoveActor.IsLocationWithinSplineWidth");

	AS3SplineMoveActor_IsLocationWithinSplineWidth_Params params;
	params.Location = Location;
	params.Buffer = Buffer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SplineMoveActor.GetWidthAtDistanceAlongSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3SplineMoveActor::GetWidthAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SplineMoveActor.GetWidthAtDistanceAlongSpline");

	AS3SplineMoveActor_GetWidthAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SplineMoveActor.FindSplineDistanceAndForward
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, OutParm, IsPlainOldData)
// float                          DistanceAlongSpline            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AS3SplineMoveActor::FindSplineDistanceAndForward(const struct FVector& WorldLocation, struct FVector* Direction, float* DistanceAlongSpline)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SplineMoveActor.FindSplineDistanceAndForward");

	AS3SplineMoveActor_FindSplineDistanceAndForward_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Direction != nullptr)
		*Direction = params.Direction;
	if (DistanceAlongSpline != nullptr)
		*DistanceAlongSpline = params.DistanceAlongSpline;
}


// Function Shenmue3.S3SplineMoveActor.FindSplineDistance
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AS3SplineMoveActor::FindSplineDistance(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SplineMoveActor.FindSplineDistance");

	AS3SplineMoveActor_FindSplineDistance_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3StaticMeshWithLights.UpdateLight
// (Final, Native, Public)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3StaticMeshWithLights::UpdateLight(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StaticMeshWithLights.UpdateLight");

	AS3StaticMeshWithLights_UpdateLight_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StaticMeshWithLights.OnSetLightEnable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewLightEnable                (Parm, ZeroConstructor, IsPlainOldData)

void AS3StaticMeshWithLights::OnSetLightEnable(bool bNewLightEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StaticMeshWithLights.OnSetLightEnable");

	AS3StaticMeshWithLights_OnSetLightEnable_Params params;
	params.bNewLightEnable = bNewLightEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StaticMeshWithLights.OnSetLightCastShadow
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewLightCastShadow            (Parm, ZeroConstructor, IsPlainOldData)

void AS3StaticMeshWithLights::OnSetLightCastShadow(bool bNewLightCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StaticMeshWithLights.OnSetLightCastShadow");

	AS3StaticMeshWithLights_OnSetLightCastShadow_Params params;
	params.bNewLightCastShadow = bNewLightCastShadow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StatusManager.UpdateClothParts
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TMap<EClothPartsType, struct FName> WearParts                      (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void US3StatusManager::UpdateClothParts(bool bRyo, TMap<EClothPartsType, struct FName>* WearParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.UpdateClothParts");

	US3StatusManager_UpdateClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WearParts != nullptr)
		*WearParts = params.WearParts;
}


// Function Shenmue3.S3StatusManager.UnlockClothParts
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)

void US3StatusManager::UnlockClothParts(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.UnlockClothParts");

	US3StatusManager_UnlockClothParts_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StatusManager.SetRedemptionPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewPoint                       (Parm, ZeroConstructor, IsPlainOldData)

void US3StatusManager::SetRedemptionPoint(int NewPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.SetRedemptionPoint");

	US3StatusManager_SetRedemptionPoint_Params params;
	params.NewPoint = NewPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StatusManager.IsUnlockedClothParts
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3StatusManager::IsUnlockedClothParts(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.IsUnlockedClothParts");

	US3StatusManager_IsUnlockedClothParts_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3StatusManager.InitStatus
// (Final, Native, Public, BlueprintCallable)

void US3StatusManager::InitStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.InitStatus");

	US3StatusManager_InitStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StatusManager.GetWearClothParts
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<EClothPartsType, struct FName> WearParts                      (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void US3StatusManager::GetWearClothParts(bool bRyo, TMap<EClothPartsType, struct FName>* WearParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.GetWearClothParts");

	US3StatusManager_GetWearClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WearParts != nullptr)
		*WearParts = params.WearParts;
}


// Function Shenmue3.S3StatusManager.GetUnlockedClothParts
// (Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FName>           UnlockedParts                  (Parm, OutParm, ZeroConstructor)
// bool                           bRyo                           (Parm, ZeroConstructor, IsPlainOldData)

void US3StatusManager::GetUnlockedClothParts(bool bRyo, TArray<struct FName>* UnlockedParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.GetUnlockedClothParts");

	US3StatusManager_GetUnlockedClothParts_Params params;
	params.bRyo = bRyo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (UnlockedParts != nullptr)
		*UnlockedParts = params.UnlockedParts;
}


// Function Shenmue3.S3StatusManager.GetRedemptionPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3StatusManager::GetRedemptionPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.GetRedemptionPoint");

	US3StatusManager_GetRedemptionPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3StatusManager.AddRedemptionPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            AddPoint                       (Parm, ZeroConstructor, IsPlainOldData)

void US3StatusManager::AddRedemptionPoint(int AddPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StatusManager.AddRedemptionPoint");

	US3StatusManager_AddRedemptionPoint_Params params;
	params.AddPoint = AddPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StopAnimMetaData.SetYawMinMax
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)

void US3StopAnimMetaData::SetYawMinMax(float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StopAnimMetaData.SetYawMinMax");

	US3StopAnimMetaData_SetYawMinMax_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StopAnimMetaData.MassageCurves
// (Final, Native, Public, BlueprintCallable, Const)

void US3StopAnimMetaData::MassageCurves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StopAnimMetaData.MassageCurves");

	US3StopAnimMetaData_MassageCurves_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StopAnimMetaData.GetYawAtDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3StopAnimMetaData::GetYawAtDistance(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StopAnimMetaData.GetYawAtDistance");

	US3StopAnimMetaData_GetYawAtDistance_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3StopAnimMetaData.AddYawDataPoint
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void US3StopAnimMetaData::AddYawDataPoint(float Distance, float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StopAnimMetaData.AddYawDataPoint");

	US3StopAnimMetaData_AddYawDataPoint_Params params;
	params.Distance = Distance;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StopAnimMetaData.AddSpeedDataPoint
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)

void US3StopAnimMetaData::AddSpeedDataPoint(float Distance, float Speed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StopAnimMetaData.AddSpeedDataPoint");

	US3StopAnimMetaData_AddSpeedDataPoint_Params params;
	params.Distance = Distance;
	params.Speed = Speed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3StopAnimMetaData.AddDataPoint
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)

void US3StopAnimMetaData::AddDataPoint(float Time, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StopAnimMetaData.AddDataPoint");

	US3StopAnimMetaData_AddDataPoint_Params params;
	params.Time = Time;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SpringArmComponent.ZoomFlagOn
// (Final, Native, Public, BlueprintCallable)

void US3SpringArmComponent::ZoomFlagOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SpringArmComponent.ZoomFlagOn");

	US3SpringArmComponent_ZoomFlagOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SpringArmComponent.ZoomFlagOff
// (Final, Native, Public, BlueprintCallable)

void US3SpringArmComponent::ZoomFlagOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SpringArmComponent.ZoomFlagOff");

	US3SpringArmComponent_ZoomFlagOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SpringArmComponent.IsHitUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SpringArmComponent::IsHitUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SpringArmComponent.IsHitUp");

	US3SpringArmComponent_IsHitUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SpringArmComponent.IsHit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SpringArmComponent::IsHit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SpringArmComponent.IsHit");

	US3SpringArmComponent_IsHit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3StreetFightTrigger.GetNextFighter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AS3StreetFightTrigger::GetNextFighter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3StreetFightTrigger.GetNextFighter");

	AS3StreetFightTrigger_GetNextFighter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SoundManager.Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InId                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3SoundManager::Stop(const struct FName& InId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundManager.Stop");

	AS3SoundManager_Stop_Params params;
	params.InId = InId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SoundManager.SetTalkVolume
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3SoundManager::SetTalkVolume(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundManager.SetTalkVolume");

	AS3SoundManager_SetTalkVolume_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundManager.SetEnableFadePause
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AS3SoundManager::SetEnableFadePause(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundManager.SetEnableFadePause");

	AS3SoundManager_SetEnableFadePause_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundManager.Play
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundAtomCue*           Cue                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3SoundManager::Play(class USoundAtomCue* Cue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundManager.Play");

	AS3SoundManager_Play_Params params;
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SoundManager.GetPlayerById
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   InId                           (Parm, ZeroConstructor, IsPlainOldData)
// class AS3SoundPlayer*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3SoundPlayer* AS3SoundManager::GetPlayerById(const struct FName& InId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundManager.GetPlayerById");

	AS3SoundManager_GetPlayerById_Params params;
	params.InId = InId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SoundManager.CreateAtomComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAtomComponent*          ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAtomComponent* AS3SoundManager::CreateAtomComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SoundManager.CreateAtomComponent");

	AS3SoundManager_CreateAtomComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SubmissionConfig.SetDemoType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3DemoType                    NewType                        (Parm, ZeroConstructor, IsPlainOldData)

void US3SubmissionConfig::SetDemoType(ES3DemoType NewType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SubmissionConfig.SetDemoType");

	US3SubmissionConfig_SetDemoType_Params params;
	params.NewType = NewType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.UpdateKeyConfig
// (Final, Native, Public)
// Parameters:
// ES3KeyConfigType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::UpdateKeyConfig(ES3KeyConfigType Type, unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.UpdateKeyConfig");

	US3SystemManager_UpdateKeyConfig_Params params;
	params.Type = Type;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.UpdateCulture
// (Final, Native, Public)

void US3SystemManager::UpdateCulture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.UpdateCulture");

	US3SystemManager_UpdateCulture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetWindowParam
// (Final, Native, Public)
// Parameters:
// ES3WindowType                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 InResolution                   (Parm, ZeroConstructor)

void US3SystemManager::SetWindowParam(ES3WindowType Type, const struct FString& InResolution)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetWindowParam");

	US3SystemManager_SetWindowParam_Params params;
	params.Type = Type;
	params.InResolution = InResolution;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetVSync
// (Final, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetVSync(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetVSync");

	US3SystemManager_SetVSync_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetVoiceVolume
// (Final, Native, Public)
// Parameters:
// float                          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetVoiceVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetVoiceVolume");

	US3SystemManager_SetVoiceVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetVoiceLanguage
// (Final, Native, Public)
// Parameters:
// ES3VoiceLanguage               InVoiceLanguage                (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetVoiceLanguage(ES3VoiceLanguage InVoiceLanguage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetVoiceLanguage");

	US3SystemManager_SetVoiceLanguage_Params params;
	params.InVoiceLanguage = InVoiceLanguage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetSEVolume
// (Final, Native, Public)
// Parameters:
// float                          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetSEVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetSEVolume");

	US3SystemManager_SetSEVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetLocale
// (Final, Native, Public)
// Parameters:
// ES3Locale                      InLocale                       (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetLocale(ES3Locale InLocale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetLocale");

	US3SystemManager_SetLocale_Params params;
	params.InLocale = InLocale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetDisplayGamma
// (Final, Native, Public)
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetDisplayGamma(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetDisplayGamma");

	US3SystemManager_SetDisplayGamma_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetBGMVolume
// (Final, Native, Public)
// Parameters:
// float                          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void US3SystemManager::SetBGMVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetBGMVolume");

	US3SystemManager_SetBGMVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.SetBattleRallyInfo
// (Native, Public)
// Parameters:
// struct FS3BattleRallySaveData  Info                           (Parm)

void US3SystemManager::SetBattleRallyInfo(const struct FS3BattleRallySaveData& Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.SetBattleRallyInfo");

	US3SystemManager_SetBattleRallyInfo_Params params;
	params.Info = Info;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.GetWindowParam
// (Final, Native, Public, HasOutParms)
// Parameters:
// ES3WindowType                  Type                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FString                 OutResolution                  (Parm, OutParm, ZeroConstructor)

void US3SystemManager::GetWindowParam(ES3WindowType* Type, struct FString* OutResolution)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetWindowParam");

	US3SystemManager_GetWindowParam_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Type != nullptr)
		*Type = params.Type;
	if (OutResolution != nullptr)
		*OutResolution = params.OutResolution;
}


// Function Shenmue3.S3SystemManager.GetVSync
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SystemManager::GetVSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetVSync");

	US3SystemManager_GetVSync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetVoiceVolume
// (Final, Native, Public, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3SystemManager::GetVoiceVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetVoiceVolume");

	US3SystemManager_GetVoiceVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetVoiceLanguage
// (Final, Native, Public, Const)
// Parameters:
// ES3VoiceLanguage               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3VoiceLanguage US3SystemManager::GetVoiceLanguage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetVoiceLanguage");

	US3SystemManager_GetVoiceLanguage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetSEVolume
// (Final, Native, Public, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3SystemManager::GetSEVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetSEVolume");

	US3SystemManager_GetSEVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetRewardPasswords
// (Native, Public)
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> US3SystemManager::GetRewardPasswords()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetRewardPasswords");

	US3SystemManager_GetRewardPasswords_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetLocale
// (Final, Native, Public, Const)
// Parameters:
// ES3Locale                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3Locale US3SystemManager::GetLocale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetLocale");

	US3SystemManager_GetLocale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetKeyConfigValue
// (Final, Native, Public)
// Parameters:
// ES3KeyConfigType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char US3SystemManager::GetKeyConfigValue(ES3KeyConfigType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetKeyConfigValue");

	US3SystemManager_GetKeyConfigValue_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetDisplayGamma
// (Final, Native, Public, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3SystemManager::GetDisplayGamma()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetDisplayGamma");

	US3SystemManager_GetDisplayGamma_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetBGMVolume
// (Final, Native, Public, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3SystemManager::GetBGMVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetBGMVolume");

	US3SystemManager_GetBGMVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3SystemManager.GetBattleRallyInfo
// (Native, Public, HasOutParms, Const)
// Parameters:
// struct FS3BattleRallySaveData  Info                           (Parm, OutParm)

void US3SystemManager::GetBattleRallyInfo(struct FS3BattleRallySaveData* Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.GetBattleRallyInfo");

	US3SystemManager_GetBattleRallyInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Info != nullptr)
		*Info = params.Info;
}


// Function Shenmue3.S3SystemManager.ClearRewardPasswords
// (Native, Public, BlueprintCallable)

void US3SystemManager::ClearRewardPasswords()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.ClearRewardPasswords");

	US3SystemManager_ClearRewardPasswords_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3SystemManager.AddRewardPassword
// (Native, Public)
// Parameters:
// struct FName                   Password                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3SystemManager::AddRewardPassword(const struct FName& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3SystemManager.AddRewardPassword");

	US3SystemManager_AddRewardPassword_Params params;
	params.Password = Password;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponent.IsValidMiniGame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTalkScript*             Script                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponent::IsValidMiniGame(class UTalkScript* Script)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponent.IsValidMiniGame");

	US3TalkComponent_IsValidMiniGame_Params params;
	params.Script = Script;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponent.IsLineSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Player                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  NPC                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponent::IsLineSight(class AActor* Player, class AActor* NPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponent.IsLineSight");

	US3TalkComponent_IsLineSight_Params params;
	params.Player = Player;
	params.NPC = NPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponent.IsInTalkAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponent::IsInTalkAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponent.IsInTalkAngle");

	US3TalkComponent_IsInTalkAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponent.GetInteractionAngle
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 RefLocation                    (Parm, IsPlainOldData)
// struct FVector                 RefDirection                   (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3TalkComponent::GetInteractionAngle(const struct FVector& RefLocation, const struct FVector& RefDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponent.GetInteractionAngle");

	US3TalkComponent_GetInteractionAngle_Params params;
	params.RefLocation = RefLocation;
	params.RefDirection = RefDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponent.GetEyeLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector US3TalkComponent::GetEyeLocation(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponent.GetEyeLocation");

	US3TalkComponent_GetEyeLocation_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkComponent.CheckLineOfSight
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 PlayerLocation                 (Parm, IsPlainOldData)
// struct FVector                 NPCLocation                    (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkComponent::CheckLineOfSight(const struct FVector& PlayerLocation, const struct FVector& NPCLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkComponent.CheckLineOfSight");

	US3TalkComponent_CheckLineOfSight_Params params;
	params.PlayerLocation = PlayerLocation;
	params.NPCLocation = NPCLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.SetTalkScriptProgressIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class UTalkScript*             TalkScript                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::SetTalkScriptProgressIndex(class AActor* Actor, class UTalkScript* TalkScript, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.SetTalkScriptProgressIndex");

	AS3TalkEventManagerBase_SetTalkScriptProgressIndex_Params params;
	params.Actor = Actor;
	params.TalkScript = TalkScript;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.SetJoinedThisTalkActors
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          NewActors                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void AS3TalkEventManagerBase::SetJoinedThisTalkActors(TArray<class AActor*> NewActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.SetJoinedThisTalkActors");

	AS3TalkEventManagerBase_SetJoinedThisTalkActors_Params params;
	params.NewActors = NewActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.SetBetweenVolumeUnloadRequestsMinTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::SetBetweenVolumeUnloadRequestsMinTime(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.SetBetweenVolumeUnloadRequestsMinTime");

	AS3TalkEventManagerBase_SetBetweenVolumeUnloadRequestsMinTime_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.SetActorsTextureForceResidentFlag
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          Actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::SetActorsTextureForceResidentFlag(TArray<class AActor*> Actors, bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.SetActorsTextureForceResidentFlag");

	AS3TalkEventManagerBase_SetActorsTextureForceResidentFlag_Params params;
	params.Actors = Actors;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.ResetBetweenVolumeUnloadRequestsMinTime
// (Final, Native, Public, BlueprintCallable)

void AS3TalkEventManagerBase::ResetBetweenVolumeUnloadRequestsMinTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.ResetBetweenVolumeUnloadRequestsMinTime");

	AS3TalkEventManagerBase_ResetBetweenVolumeUnloadRequestsMinTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.RequestStepChange
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::RequestStepChange(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.RequestStepChange");

	AS3TalkEventManagerBase_RequestStepChange_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.RemoveJoinedThisTalkActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  RemoveActor                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::RemoveJoinedThisTalkActors(class AActor* RemoveActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.RemoveJoinedThisTalkActors");

	AS3TalkEventManagerBase_RemoveJoinedThisTalkActors_Params params;
	params.RemoveActor = RemoveActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.OnVoiceFinished
// (Event, Public, BlueprintEvent)

void AS3TalkEventManagerBase::OnVoiceFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.OnVoiceFinished");

	AS3TalkEventManagerBase_OnVoiceFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.OnTalkStart
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTalkEventTaskBase*      ptr                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::OnTalkStart(class UTalkEventTaskBase* ptr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.OnTalkStart");

	AS3TalkEventManagerBase_OnTalkStart_Params params;
	params.ptr = ptr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.OnFinishedSubEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTalkEventTaskBase*      ptr                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            NextIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBreakEvent                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::OnFinishedSubEvent(class UTalkEventTaskBase* ptr, int NextIndex, bool bBreakEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.OnFinishedSubEvent");

	AS3TalkEventManagerBase_OnFinishedSubEvent_Params params;
	params.ptr = ptr;
	params.NextIndex = NextIndex;
	params.bBreakEvent = bBreakEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.OnFinished
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTalkEventTaskBase*      ptr                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            NextIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBreakEvent                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::OnFinished(class UTalkEventTaskBase* ptr, int NextIndex, bool bBreakEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.OnFinished");

	AS3TalkEventManagerBase_OnFinished_Params params;
	params.ptr = ptr;
	params.NextIndex = NextIndex;
	params.bBreakEvent = bBreakEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.OnActivate
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTalkEventTaskBase*      ptr                            (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::OnActivate(class UTalkEventTaskBase* ptr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.OnActivate");

	AS3TalkEventManagerBase_OnActivate_Params params;
	params.ptr = ptr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.IsTalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::IsTalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.IsTalking");

	AS3TalkEventManagerBase_IsTalking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.IsMultipleTalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::IsMultipleTalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.IsMultipleTalking");

	AS3TalkEventManagerBase_IsMultipleTalking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.IsMiniGameTalk
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                           bStrictly                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::IsMiniGameTalk(bool bStrictly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.IsMiniGameTalk");

	AS3TalkEventManagerBase_IsMiniGameTalk_Params params;
	params.bStrictly = bStrictly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.IsJoinTalk
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::IsJoinTalk(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.IsJoinTalk");

	AS3TalkEventManagerBase_IsJoinTalk_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.Initialize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  InTalkedActor                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InIsBS                         (Parm, ZeroConstructor, IsPlainOldData)
// class UTalkScript*             InTalkScript                   (Parm, ZeroConstructor, IsPlainOldData)
// class US3TalkComponent*        InTalkComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// ENPCTalkState                  InTalkState                    (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::Initialize(class AActor* InTalkedActor, bool InIsBS, class UTalkScript* InTalkScript, class US3TalkComponent* InTalkComponent, ENPCTalkState InTalkState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.Initialize");

	AS3TalkEventManagerBase_Initialize_Params params;
	params.InTalkedActor = InTalkedActor;
	params.InIsBS = InIsBS;
	params.InTalkScript = InTalkScript;
	params.InTalkComponent = InTalkComponent;
	params.InTalkState = InTalkState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.GetTalkScriptProgressIndex
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bCanSkip                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class UTalkScript*             TalkScript                     (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::GetTalkScriptProgressIndex(class AActor* Actor, class UTalkScript* TalkScript, bool* bCanSkip, int* Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.GetTalkScriptProgressIndex");

	AS3TalkEventManagerBase_GetTalkScriptProgressIndex_Params params;
	params.Actor = Actor;
	params.TalkScript = TalkScript;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bCanSkip != nullptr)
		*bCanSkip = params.bCanSkip;
	if (Index != nullptr)
		*Index = params.Index;
}


// Function Shenmue3.S3TalkEventManagerBase.GetMultipleTalkCanterLocation2D
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3TalkEventManagerBase::GetMultipleTalkCanterLocation2D()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.GetMultipleTalkCanterLocation2D");

	AS3TalkEventManagerBase_GetMultipleTalkCanterLocation2D_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.GetJoinTalkActorFromType
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3CharacterType               Type                           (Parm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3Character* AS3TalkEventManagerBase::GetJoinTalkActorFromType(ES3CharacterType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.GetJoinTalkActorFromType");

	AS3TalkEventManagerBase_GetJoinTalkActorFromType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.GetJoinedThisTalkActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> AS3TalkEventManagerBase::GetJoinedThisTalkActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.GetJoinedThisTalkActors");

	AS3TalkEventManagerBase_GetJoinedThisTalkActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.GetActorUniqueName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AS3TalkEventManagerBase::GetActorUniqueName(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.GetActorUniqueName");

	AS3TalkEventManagerBase_GetActorUniqueName_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.Finalize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::Finalize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.Finalize");

	AS3TalkEventManagerBase_Finalize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.DumpCallStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ScriptName                     (Parm, ZeroConstructor)
// struct FString                 outputFolderName               (Parm, ZeroConstructor)

void AS3TalkEventManagerBase::DumpCallStack(const struct FString& ScriptName, const struct FString& outputFolderName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.DumpCallStack");

	AS3TalkEventManagerBase_DumpCallStack_Params params;
	params.ScriptName = ScriptName;
	params.outputFolderName = outputFolderName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.ClearJoinedThisTalkActors
// (Final, Native, Public, BlueprintCallable)

void AS3TalkEventManagerBase::ClearJoinedThisTalkActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.ClearJoinedThisTalkActors");

	AS3TalkEventManagerBase_ClearJoinedThisTalkActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.ClearCallStack
// (Final, Native, Public, BlueprintCallable)

void AS3TalkEventManagerBase::ClearCallStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.ClearCallStack");

	AS3TalkEventManagerBase_ClearCallStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.ChangeBoundsScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::ChangeBoundsScale(class AActor* Actor, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.ChangeBoundsScale");

	AS3TalkEventManagerBase_ChangeBoundsScale_Params params;
	params.Actor = Actor;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.AddJoinedThisTalkActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  AddActor                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkEventManagerBase::AddJoinedThisTalkActors(class AActor* AddActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.AddJoinedThisTalkActors");

	AS3TalkEventManagerBase_AddJoinedThisTalkActors_Params params;
	params.AddActor = AddActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkEventManagerBase.ActivateSubEvent
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class UTalkEventTaskBase*> EventData                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::ActivateSubEvent(TArray<class UTalkEventTaskBase*> EventData, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.ActivateSubEvent");

	AS3TalkEventManagerBase_ActivateSubEvent_Params params;
	params.EventData = EventData;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerBase.ActivateEvent
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class UTalkEventTaskBase*> EventData                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3TalkEventManagerBase::ActivateEvent(TArray<class UTalkEventTaskBase*> EventData, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerBase.ActivateEvent");

	AS3TalkEventManagerBase_ActivateEvent_Params params;
	params.EventData = EventData;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerFunctionLibrary.TalkEvent_IsJoinTalk
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkEventManagerFunctionLibrary::STATIC_TalkEvent_IsJoinTalk(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerFunctionLibrary.TalkEvent_IsJoinTalk");

	US3TalkEventManagerFunctionLibrary_TalkEvent_IsJoinTalk_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerFunctionLibrary.IsSight
// (Final, Native, Static, Public)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class ACharacter*              FromChara                      (Parm, ZeroConstructor, IsPlainOldData)
// class ACharacter*              ToChara                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkEventManagerFunctionLibrary::STATIC_IsSight(class UWorld* World, class ACharacter* FromChara, class ACharacter* ToChara)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerFunctionLibrary.IsSight");

	US3TalkEventManagerFunctionLibrary_IsSight_Params params;
	params.World = World;
	params.FromChara = FromChara;
	params.ToChara = ToChara;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerFunctionLibrary.IsRunningSubQuest
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            SubQuestGlobalFlagIndex        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkEventManagerFunctionLibrary::STATIC_IsRunningSubQuest(class UObject* WorldContextObject, int SubQuestGlobalFlagIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerFunctionLibrary.IsRunningSubQuest");

	US3TalkEventManagerFunctionLibrary_IsRunningSubQuest_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SubQuestGlobalFlagIndex = SubQuestGlobalFlagIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerFunctionLibrary.GetS3CharacterAll
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AS3Character*>    Characters                     (Parm, OutParm, ZeroConstructor)

void US3TalkEventManagerFunctionLibrary::STATIC_GetS3CharacterAll(class UObject* WorldContextObject, TArray<class AS3Character*>* Characters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerFunctionLibrary.GetS3CharacterAll");

	US3TalkEventManagerFunctionLibrary_GetS3CharacterAll_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Characters != nullptr)
		*Characters = params.Characters;
}


// Function Shenmue3.S3TalkEventManagerFunctionLibrary.GetNPCTalkState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3Character*            Character                      (Parm, ZeroConstructor, IsPlainOldData)
// ENPCTalkState                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENPCTalkState US3TalkEventManagerFunctionLibrary::STATIC_GetNPCTalkState(class UObject* WorldContextObject, class AS3Character* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerFunctionLibrary.GetNPCTalkState");

	US3TalkEventManagerFunctionLibrary_GetNPCTalkState_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Character = Character;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkEventManagerFunctionLibrary.BreakInt32Range
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FInt32Range             Range                          (Parm)
// TEnumAsByte<ERangeBoundTypes>  LowerType                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            LowerValue                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERangeBoundTypes>  UpperType                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            UpperValue                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void US3TalkEventManagerFunctionLibrary::STATIC_BreakInt32Range(const struct FInt32Range& Range, TEnumAsByte<ERangeBoundTypes>* LowerType, int* LowerValue, TEnumAsByte<ERangeBoundTypes>* UpperType, int* UpperValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkEventManagerFunctionLibrary.BreakInt32Range");

	US3TalkEventManagerFunctionLibrary_BreakInt32Range_Params params;
	params.Range = Range;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LowerType != nullptr)
		*LowerType = params.LowerType;
	if (LowerValue != nullptr)
		*LowerValue = params.LowerValue;
	if (UpperType != nullptr)
		*UpperType = params.UpperType;
	if (UpperValue != nullptr)
		*UpperValue = params.UpperValue;
}


// Function Shenmue3.S3TalkAvoidanceComponent.MakeRadialLocations
// (Final, Native, Protected, HasOutParms, BlueprintCallable, Const)
// Parameters:
// float                          BaseDistance                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            DistanceDiv                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            AngleDiv                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         OutLocations                   (Parm, OutParm, ZeroConstructor)

void US3TalkAvoidanceComponent::MakeRadialLocations(float BaseDistance, int DistanceDiv, float MaxAngle, int AngleDiv, TArray<struct FVector>* OutLocations)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkAvoidanceComponent.MakeRadialLocations");

	US3TalkAvoidanceComponent_MakeRadialLocations_Params params;
	params.BaseDistance = BaseDistance;
	params.DistanceDiv = DistanceDiv;
	params.MaxAngle = MaxAngle;
	params.AngleDiv = AngleDiv;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocations != nullptr)
		*OutLocations = params.OutLocations;
}


// Function Shenmue3.S3TalkAvoidanceComponent.MakeCircularSurroundLocations
// (Final, Native, Protected, HasOutParms, BlueprintCallable, Const)
// Parameters:
// class ACharacter*              SurroundChar                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         OutLocations                   (Parm, OutParm, ZeroConstructor)

void US3TalkAvoidanceComponent::MakeCircularSurroundLocations(class ACharacter* SurroundChar, TArray<struct FVector>* OutLocations)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkAvoidanceComponent.MakeCircularSurroundLocations");

	US3TalkAvoidanceComponent_MakeCircularSurroundLocations_Params params;
	params.SurroundChar = SurroundChar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocations != nullptr)
		*OutLocations = params.OutLocations;
}


// Function Shenmue3.S3TalkAvoidanceComponent.IsDebugDrawingEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkAvoidanceComponent::IsDebugDrawingEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkAvoidanceComponent.IsDebugDrawingEnabled");

	US3TalkAvoidanceComponent_IsDebugDrawingEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkInterface.Screen_Player
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3TalkInterface::Screen_Player()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkInterface.Screen_Player");

	US3TalkInterface_Screen_Player_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkInterface.Screen_NPC
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void US3TalkInterface::Screen_NPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkInterface.Screen_NPC");

	US3TalkInterface_Screen_NPC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkInterface.OnTalkStart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class US3TalkComponent*        TalkComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3TalkInterface::OnTalkStart(class US3TalkComponent* TalkComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkInterface.OnTalkStart");

	US3TalkInterface_OnTalkStart_Params params;
	params.TalkComponent = TalkComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkInterface.OnTalkFinished
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class US3TalkComponent*        TalkComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           interrupted                    (Parm, ZeroConstructor, IsPlainOldData)

void US3TalkInterface::OnTalkFinished(class US3TalkComponent* TalkComponent, bool interrupted)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkInterface.OnTalkFinished");

	US3TalkInterface_OnTalkFinished_Params params;
	params.TalkComponent = TalkComponent;
	params.interrupted = interrupted;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkInterface.IsTalking
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkInterface::IsTalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkInterface.IsTalking");

	US3TalkInterface_IsTalking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.SetProgressIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkScriptManager::SetProgressIndex(const struct FString& Key, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.SetProgressIndex");

	US3TalkScriptManager_SetProgressIndex_Params params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.SetLoadData
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FTalkScriptData> talkScriptIndexData            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TMap<struct FString, struct FNPCTalkData> NPCTalkData                    (Parm, ZeroConstructor)
// TMap<struct FString, struct FTalkScheduleData> PcData                         (Parm, ZeroConstructor)
// TMap<struct FString, struct FTalkScheduleData> BsData                         (Parm, ZeroConstructor)
// TMap<struct FString, struct FTalkScheduleData> MiniGameData                   (Parm, ZeroConstructor)
// TMap<struct FString, struct FTalkScheduleData> ShopData                       (Parm, ZeroConstructor)
// TMap<struct FString, int>      ACData                         (Parm, ZeroConstructor)
// TArray<struct FName>           CutsceneIds                    (Parm, ZeroConstructor)
// TMap<int, struct FDateTime>    StartTimer                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)

void US3TalkScriptManager::SetLoadData(TArray<struct FTalkScriptData> talkScriptIndexData, TMap<struct FString, struct FNPCTalkData> NPCTalkData, TMap<struct FString, struct FTalkScheduleData> PcData, TMap<struct FString, struct FTalkScheduleData> BsData, TMap<struct FString, struct FTalkScheduleData> MiniGameData, TMap<struct FString, struct FTalkScheduleData> ShopData, TMap<struct FString, int> ACData, TArray<struct FName> CutsceneIds, TMap<int, struct FDateTime> StartTimer, int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.SetLoadData");

	US3TalkScriptManager_SetLoadData_Params params;
	params.talkScriptIndexData = talkScriptIndexData;
	params.NPCTalkData = NPCTalkData;
	params.PcData = PcData;
	params.BsData = BsData;
	params.MiniGameData = MiniGameData;
	params.ShopData = ShopData;
	params.ACData = ACData;
	params.CutsceneIds = CutsceneIds;
	params.StartTimer = StartTimer;
	params.Step = Step;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkScriptManager.SetIsFirstContactState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// bool                           newParam                       (Parm, ZeroConstructor, IsPlainOldData)

void US3TalkScriptManager::SetIsFirstContactState(const struct FString& NPCID, bool newParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.SetIsFirstContactState");

	US3TalkScriptManager_SetIsFirstContactState_Params params;
	params.NPCID = NPCID;
	params.newParam = newParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkScriptManager.OnGameTimeEvent
// (Final, Native, Public)
// Parameters:
// ES3DayTimeEvent                EventType                      (Parm, ZeroConstructor, IsPlainOldData)

void US3TalkScriptManager::OnGameTimeEvent(ES3DayTimeEvent EventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.OnGameTimeEvent");

	US3TalkScriptManager_OnGameTimeEvent_Params params;
	params.EventType = EventType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkScriptManager.OnGameDateNext
// (Final, Native, Public)

void US3TalkScriptManager::OnGameDateNext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.OnGameDateNext");

	US3TalkScriptManager_OnGameDateNext_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkScriptManager.IsPlayedCutscene
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ID                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkScriptManager::IsPlayedCutscene(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.IsPlayedCutscene");

	US3TalkScriptManager_IsPlayedCutscene_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.Init
// (Final, Native, Public, BlueprintCallable)

void US3TalkScriptManager::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.Init");

	US3TalkScriptManager_Init_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkScriptManager.GetTalkScriptIndexData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FTalkScriptData> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FTalkScriptData> US3TalkScriptManager::GetTalkScriptIndexData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.GetTalkScriptIndexData");

	US3TalkScriptManager_GetTalkScriptIndexData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.GetProgressStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3TalkScriptManager::GetProgressStep(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.GetProgressStep");

	US3TalkScriptManager_GetProgressStep_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.GetProgressIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3TalkScriptManager::GetProgressIndex(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.GetProgressIndex");

	US3TalkScriptManager_GetProgressIndex_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.GetIsFirstContactState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TalkScriptManager::GetIsFirstContactState(const struct FString& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.GetIsFirstContactState");

	US3TalkScriptManager_GetIsFirstContactState_Params params;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.GetGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class US3GameInstance*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3GameInstance* US3TalkScriptManager::GetGameInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.GetGameInstance");

	US3TalkScriptManager_GetGameInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.GetACPlayCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int US3TalkScriptManager::GetACPlayCount(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.GetACPlayCount");

	US3TalkScriptManager_GetACPlayCount_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.CreateKeyFromNpcIdAndScrinptName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// struct FString                 ScriptName                     (Parm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TalkScriptManager::STATIC_CreateKeyFromNpcIdAndScrinptName(const struct FString& NPCID, const struct FString& ScriptName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.CreateKeyFromNpcIdAndScrinptName");

	US3TalkScriptManager_CreateKeyFromNpcIdAndScrinptName_Params params;
	params.NPCID = NPCID;
	params.ScriptName = ScriptName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkScriptManager.AddCutsceneId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ID                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void US3TalkScriptManager::AddCutsceneId(const struct FName& ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.AddCutsceneId");

	US3TalkScriptManager_AddCutsceneId_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TalkScriptManager.AddACPlayCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)

void US3TalkScriptManager::AddACPlayCount(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkScriptManager.AddACPlayCount");

	US3TalkScriptManager_AddACPlayCount_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TextDataTalk.GetClipperString
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3VoiceLanguage               VoiceLanguage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataTalk::GetClipperString(ES3VoiceLanguage VoiceLanguage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataTalk.GetClipperString");

	US3TextDataTalk_GetClipperString_Params params;
	params.VoiceLanguage = VoiceLanguage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TalkCameraManagerBase.SetGameCameraCutThisFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           newParam                       (Parm, ZeroConstructor, IsPlainOldData)

void AS3TalkCameraManagerBase::SetGameCameraCutThisFrame(bool newParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TalkCameraManagerBase.SetGameCameraCutThisFrame");

	AS3TalkCameraManagerBase_SetGameCameraCutThisFrame_Params params;
	params.newParam = newParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchPointLight.UpdateLight
// (Final, Native, Public)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchPointLight::UpdateLight(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchPointLight.UpdateLight");

	AS3TimeSwitchPointLight_UpdateLight_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchPointLight.SetVisibleTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewVisibleTime                (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchPointLight::SetVisibleTime(bool bNewVisibleTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchPointLight.SetVisibleTime");

	AS3TimeSwitchPointLight_SetVisibleTime_Params params;
	params.bNewVisibleTime = bNewVisibleTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchPointLight.SetLimitLightArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLimitLightArea             (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchPointLight::SetLimitLightArea(bool bNewLimitLightArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchPointLight.SetLimitLightArea");

	AS3TimeSwitchPointLight_SetLimitLightArea_Params params;
	params.bNewLimitLightArea = bNewLimitLightArea;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchPointLight.OnSetLightEnable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewLightEnable                (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchPointLight::OnSetLightEnable(bool bNewLightEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchPointLight.OnSetLightEnable");

	AS3TimeSwitchPointLight_OnSetLightEnable_Params params;
	params.bNewLightEnable = bNewLightEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchPointLight.OnSetLightCastShadow
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewLightCastShadow            (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchPointLight::OnSetLightCastShadow(bool bNewLightCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchPointLight.OnSetLightCastShadow");

	AS3TimeSwitchPointLight_OnSetLightCastShadow_Params params;
	params.bNewLightCastShadow = bNewLightCastShadow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchPointLight.InitialDisable
// (Native, Event, Public, BlueprintEvent)

void AS3TimeSwitchPointLight::InitialDisable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchPointLight.InitialDisable");

	AS3TimeSwitchPointLight_InitialDisable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchSpotLight.UpdateLight
// (Final, Native, Public)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchSpotLight::UpdateLight(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchSpotLight.UpdateLight");

	AS3TimeSwitchSpotLight_UpdateLight_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchSpotLight.SetVisibleTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewVisibleTime                (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchSpotLight::SetVisibleTime(bool bNewVisibleTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchSpotLight.SetVisibleTime");

	AS3TimeSwitchSpotLight_SetVisibleTime_Params params;
	params.bNewVisibleTime = bNewVisibleTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchSpotLight.SetLimitLightArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewLimitLightArea             (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchSpotLight::SetLimitLightArea(bool bNewLimitLightArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchSpotLight.SetLimitLightArea");

	AS3TimeSwitchSpotLight_SetLimitLightArea_Params params;
	params.bNewLimitLightArea = bNewLimitLightArea;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchSpotLight.OnSetLightEnable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewLightEnable                (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchSpotLight::OnSetLightEnable(bool bNewLightEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchSpotLight.OnSetLightEnable");

	AS3TimeSwitchSpotLight_OnSetLightEnable_Params params;
	params.bNewLightEnable = bNewLightEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TimeSwitchSpotLight.OnSetLightCastShadow
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bNewLightCastShadow            (Parm, ZeroConstructor, IsPlainOldData)

void AS3TimeSwitchSpotLight::OnSetLightCastShadow(bool bNewLightCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TimeSwitchSpotLight.OnSetLightCastShadow");

	AS3TimeSwitchSpotLight_OnSetLightCastShadow_Params params;
	params.bNewLightCastShadow = bNewLightCastShadow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TextDataLibrary.StringLengthConvertTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 S                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3TextDataLibrary::STATIC_StringLengthConvertTime(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.StringLengthConvertTime");

	US3TextDataLibrary_StringLengthConvertTime_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.ShouldSplitTextData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Path                           (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TextDataLibrary::STATIC_ShouldSplitTextData(const struct FString& Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.ShouldSplitTextData");

	US3TextDataLibrary_ShouldSplitTextData_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.RemoveRuby
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 CheckString                    (Parm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_RemoveRuby(const struct FString& CheckString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.RemoveRuby");

	US3TextDataLibrary_RemoveRuby_Params params;
	params.CheckString = CheckString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.GetVoiceLanguageCueSheetPostfix
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3VoiceLanguage               VoiceLanguage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_GetVoiceLanguageCueSheetPostfix(ES3VoiceLanguage VoiceLanguage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetVoiceLanguageCueSheetPostfix");

	US3TextDataLibrary_GetVoiceLanguageCueSheetPostfix_Params params;
	params.VoiceLanguage = VoiceLanguage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.GetVoiceLanguageAbbreviation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3VoiceLanguage               VoiceLanguage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_GetVoiceLanguageAbbreviation(ES3VoiceLanguage VoiceLanguage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetVoiceLanguageAbbreviation");

	US3TextDataLibrary_GetVoiceLanguageAbbreviation_Params params;
	params.VoiceLanguage = VoiceLanguage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.GetVoiceAssetPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3TextPathType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_GetVoiceAssetPath(ES3TextPathType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetVoiceAssetPath");

	US3TextDataLibrary_GetVoiceAssetPath_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.GetTextDataAssets
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// ES3TextPathType                PathType                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ES3Locale                      Locale                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 LabelKeyword                   (Parm, ZeroConstructor)
// TArray<class US3TextDataAsset*> OutAssets                      (Parm, OutParm, ZeroConstructor)

void US3TextDataLibrary::STATIC_GetTextDataAssets(ES3TextPathType PathType, ES3Locale Locale, const struct FString& LabelKeyword, TArray<class US3TextDataAsset*>* OutAssets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetTextDataAssets");

	US3TextDataLibrary_GetTextDataAssets_Params params;
	params.PathType = PathType;
	params.Locale = Locale;
	params.LabelKeyword = LabelKeyword;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAssets != nullptr)
		*OutAssets = params.OutAssets;
}


// Function Shenmue3.S3TextDataLibrary.GetTextDataAssetPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3TextPathType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_GetTextDataAssetPath(ES3TextPathType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetTextDataAssetPath");

	US3TextDataLibrary_GetTextDataAssetPath_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.GetSplitAssetName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Label                          (Parm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_GetSplitAssetName(const struct FString& Label)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetSplitAssetName");

	US3TextDataLibrary_GetSplitAssetName_Params params;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.GetLocaleAbbreviation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ES3Locale                      Locale                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_GetLocaleAbbreviation(ES3Locale Locale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.GetLocaleAbbreviation");

	US3TextDataLibrary_GetLocaleAbbreviation_Params params;
	params.Locale = Locale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.ConvertFullWidthCharacter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ConvertString                  (Parm, ZeroConstructor)
// ES3Locale                      Locale                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_ConvertFullWidthCharacter(const struct FString& ConvertString, ES3Locale Locale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.ConvertFullWidthCharacter");

	US3TextDataLibrary_ConvertFullWidthCharacter_Params params;
	params.ConvertString = ConvertString;
	params.Locale = Locale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataLibrary.AddSimpleLineBreak
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 SourceString                   (Parm, ZeroConstructor)
// int                            MinLengthToBreak               (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinRatio                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataLibrary::STATIC_AddSimpleLineBreak(const struct FString& SourceString, int MinLengthToBreak, float MinRatio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataLibrary.AddSimpleLineBreak");

	US3TextDataLibrary_AddSimpleLineBreak_Params params;
	params.SourceString = SourceString;
	params.MinLengthToBreak = MinLengthToBreak;
	params.MinRatio = MinRatio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ES3Locale                      InLocale                       (Parm, ZeroConstructor, IsPlainOldData)
// ES3VoiceLanguage               InVoiceLanguage                (Parm, ZeroConstructor, IsPlainOldData)

void US3TextDataManagerBase::Initialize(ES3Locale InLocale, ES3VoiceLanguage InVoiceLanguage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.Initialize");

	US3TextDataManagerBase_Initialize_Params params;
	params.InLocale = InLocale;
	params.InVoiceLanguage = InVoiceLanguage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TextDataManagerBase.GetVoiceByLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// struct FName                   CharaName                      (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* US3TextDataManagerBase::GetVoiceByLabel(const struct FName& Label, const struct FString& RootAssetPath, const struct FName& CharaName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetVoiceByLabel");

	US3TextDataManagerBase_GetVoiceByLabel_Params params;
	params.Label = Label;
	params.RootAssetPath = RootAssetPath;
	params.CharaName = CharaName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetTextDataObjectByLabel
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// ES3TextDataType                OutType                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOutputErrorLog                (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* US3TextDataManagerBase::GetTextDataObjectByLabel(const struct FName& Label, const struct FString& RootAssetPath, bool bOutputErrorLog, ES3TextDataType* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetTextDataObjectByLabel");

	US3TextDataManagerBase_GetTextDataObjectByLabel_Params params;
	params.Label = Label;
	params.RootAssetPath = RootAssetPath;
	params.bOutputErrorLog = bOutputErrorLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetTextDataByLabelAndLocale
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// ES3Locale                      InLocale                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// ES3TextDataType                OutType                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOutputErrorLog                (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3TextData             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3TextData US3TextDataManagerBase::GetTextDataByLabelAndLocale(const struct FName& Label, ES3Locale InLocale, const struct FString& RootAssetPath, bool bOutputErrorLog, ES3TextDataType* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetTextDataByLabelAndLocale");

	US3TextDataManagerBase_GetTextDataByLabelAndLocale_Params params;
	params.Label = Label;
	params.InLocale = InLocale;
	params.RootAssetPath = RootAssetPath;
	params.bOutputErrorLog = bOutputErrorLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetTextDataByLabel
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// ES3TextDataType                OutType                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOutputErrorLog                (Parm, ZeroConstructor, IsPlainOldData)
// struct FS3TextData             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FS3TextData US3TextDataManagerBase::GetTextDataByLabel(const struct FName& Label, const struct FString& RootAssetPath, bool bOutputErrorLog, ES3TextDataType* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetTextDataByLabel");

	US3TextDataManagerBase_GetTextDataByLabel_Params params;
	params.Label = Label;
	params.RootAssetPath = RootAssetPath;
	params.bOutputErrorLog = bOutputErrorLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetTextDataAssetByLabelAndLocale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// ES3Locale                      InLocale                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// bool                           bOutputErrorLog                (Parm, ZeroConstructor, IsPlainOldData)
// class US3TextDataAsset*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3TextDataAsset* US3TextDataManagerBase::GetTextDataAssetByLabelAndLocale(const struct FName& Label, ES3Locale InLocale, const struct FString& RootAssetPath, bool bOutputErrorLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetTextDataAssetByLabelAndLocale");

	US3TextDataManagerBase_GetTextDataAssetByLabelAndLocale_Params params;
	params.Label = Label;
	params.InLocale = InLocale;
	params.RootAssetPath = RootAssetPath;
	params.bOutputErrorLog = bOutputErrorLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetTextDataAssetByLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 RootAssetPath                  (Parm, ZeroConstructor)
// bool                           bOutputErrorLog                (Parm, ZeroConstructor, IsPlainOldData)
// class US3TextDataAsset*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3TextDataAsset* US3TextDataManagerBase::GetTextDataAssetByLabel(const struct FName& Label, const struct FString& RootAssetPath, bool bOutputErrorLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetTextDataAssetByLabel");

	US3TextDataManagerBase_GetTextDataAssetByLabel_Params params;
	params.Label = Label;
	params.RootAssetPath = RootAssetPath;
	params.bOutputErrorLog = bOutputErrorLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetTextByLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// ES3TextPathType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataManagerBase::GetTextByLabel(const struct FName& Label, ES3TextPathType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetTextByLabel");

	US3TextDataManagerBase_GetTextByLabel_Params params;
	params.Label = Label;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetOuterGameMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AS3GameMode*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3GameMode* US3TextDataManagerBase::GetOuterGameMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetOuterGameMode");

	US3TextDataManagerBase_GetOuterGameMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetItemNameAndDescription
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 OutName                        (Parm, OutParm, ZeroConstructor)
// struct FString                 OutDescription                 (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TextDataManagerBase::GetItemNameAndDescription(const struct FName& Label, struct FString* OutName, struct FString* OutDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetItemNameAndDescription");

	US3TextDataManagerBase_GetItemNameAndDescription_Params params;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutName != nullptr)
		*OutName = params.OutName;
	if (OutDescription != nullptr)
		*OutDescription = params.OutDescription;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetItemName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataManagerBase::GetItemName(const struct FName& Label)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetItemName");

	US3TextDataManagerBase_GetItemName_Params params;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetItemDescription
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataManagerBase::GetItemDescription(const struct FName& Label)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetItemDescription");

	US3TextDataManagerBase_GetItemDescription_Params params;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetFolderName
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 Label                          (Parm, ZeroConstructor)
// struct FString                 Out                            (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3TextDataManagerBase::STATIC_GetFolderName(const struct FString& Label, struct FString* Out)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetFolderName");

	US3TextDataManagerBase_GetFolderName_Params params;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Out != nullptr)
		*Out = params.Out;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.GetCueSheetAssetPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 BaseSheetName                  (Parm, ZeroConstructor)
// ES3TextPathType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString US3TextDataManagerBase::GetCueSheetAssetPath(const struct FString& BaseSheetName, ES3TextPathType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.GetCueSheetAssetPath");

	US3TextDataManagerBase_GetCueSheetAssetPath_Params params;
	params.BaseSheetName = BaseSheetName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.FixupTextPathType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ES3TextPathType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Label                          (Parm, ZeroConstructor, IsPlainOldData)
// ES3TextPathType                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ES3TextPathType US3TextDataManagerBase::STATIC_FixupTextPathType(ES3TextPathType Type, const struct FName& Label)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.FixupTextPathType");

	US3TextDataManagerBase_FixupTextPathType_Params params;
	params.Type = Type;
	params.Label = Label;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3TextDataManagerBase.EnableCacheData
// (Final, Native, Public, BlueprintCallable)

void US3TextDataManagerBase::EnableCacheData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.EnableCacheData");

	US3TextDataManagerBase_EnableCacheData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3TextDataManagerBase.DisableCacheData
// (Final, Native, Public, BlueprintCallable)

void US3TextDataManagerBase::DisableCacheData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3TextDataManagerBase.DisableCacheData");

	US3TextDataManagerBase_DisableCacheData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WalkOnlyTrigger.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInEnable                      (Parm, ZeroConstructor, IsPlainOldData)

void AS3WalkOnlyTrigger::SetEnable(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WalkOnlyTrigger.SetEnable");

	AS3WalkOnlyTrigger_SetEnable_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WalkOnlyTrigger.GetEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3WalkOnlyTrigger::GetEnable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WalkOnlyTrigger.GetEnable");

	AS3WalkOnlyTrigger_GetEnable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WaveActor.SnapAttachedActorsToWave
// (Final, Native, Public, BlueprintCallable)

void AS3WaveActor::SnapAttachedActorsToWave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WaveActor.SnapAttachedActorsToWave");

	AS3WaveActor_SnapAttachedActorsToWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WaveActor.ProjectPointToWave
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, IsPlainOldData)
// bool                           bZOnly                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AS3WaveActor::ProjectPointToWave(const struct FVector& Location, bool bZOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WaveActor.ProjectPointToWave");

	AS3WaveActor_ProjectPointToWave_Params params;
	params.Location = Location;
	params.bZOnly = bZOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WaveActor.ExitArea
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AS3WaveActor::ExitArea(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WaveActor.ExitArea");

	AS3WaveActor_ExitArea_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WaveActor.EnterArea
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComp                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AS3WaveActor::EnterArea(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WaveActor.EnterArea");

	AS3WaveActor_EnterArea_Params params;
	params.OverlappedComp = OverlappedComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WeatherDataAsset.GetDefaultHour
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3WeatherDataAsset::GetDefaultHour()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WeatherDataAsset.GetDefaultHour");

	US3WeatherDataAsset_GetDefaultHour_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WeatherFunctionLibrary.TestInRainShelter
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Extent                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3WeatherFunctionLibrary::STATIC_TestInRainShelter(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WeatherFunctionLibrary.TestInRainShelter");

	US3WeatherFunctionLibrary_TestInRainShelter_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WeatherFunctionLibrary.GetRainNavData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AS3RainNavData*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AS3RainNavData* US3WeatherFunctionLibrary::STATIC_GetRainNavData(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WeatherFunctionLibrary.GetRainNavData");

	US3WeatherFunctionLibrary_GetRainNavData_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WetnessComponent.SimulateTimeSkip
// (Final, Native, Public, BlueprintCallable)

void US3WetnessComponent::SimulateTimeSkip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.SimulateTimeSkip");

	US3WetnessComponent_SimulateTimeSkip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WetnessComponent.SetRoughWetnessValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void US3WetnessComponent::SetRoughWetnessValue(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.SetRoughWetnessValue");

	US3WetnessComponent_SetRoughWetnessValue_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WetnessComponent.SetMeshComponents
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class UMeshComponent*>  Components                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void US3WetnessComponent::SetMeshComponents(TArray<class UMeshComponent*> Components)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.SetMeshComponents");

	US3WetnessComponent_SetMeshComponents_Params params;
	params.Components = Components;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WetnessComponent.SetMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*          Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void US3WetnessComponent::SetMeshComponent(class UMeshComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.SetMeshComponent");

	US3WetnessComponent_SetMeshComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WetnessComponent.SetIsInShelter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void US3WetnessComponent::SetIsInShelter(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.SetIsInShelter");

	US3WetnessComponent_SetIsInShelter_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WetnessComponent.ResetWetnessValue
// (Final, Native, Public, BlueprintCallable)

void US3WetnessComponent::ResetWetnessValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.ResetWetnessValue");

	US3WetnessComponent_ResetWetnessValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WetnessComponent.IsInShelter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3WetnessComponent::IsInShelter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.IsInShelter");

	US3WetnessComponent_IsInShelter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WetnessComponent.GetWetnessValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float US3WetnessComponent::GetWetnessValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.GetWetnessValue");

	US3WetnessComponent_GetWetnessValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WetnessComponent.EnableAutomaticShelterUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void US3WetnessComponent::EnableAutomaticShelterUpdate(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WetnessComponent.EnableAutomaticShelterUpdate");

	US3WetnessComponent_EnableAutomaticShelterUpdate_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.S3WheeledVehicle.SetLinearDriveVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Velocity                       (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3WheeledVehicle::SetLinearDriveVelocity(const struct FName& BoneName, const struct FVector& Velocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WheeledVehicle.SetLinearDriveVelocity");

	AS3WheeledVehicle_SetLinearDriveVelocity_Params params;
	params.BoneName = BoneName;
	params.Velocity = Velocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WheeledVehicle.SetLinearDrivePosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3WheeledVehicle::SetLinearDrivePosition(const struct FName& BoneName, const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WheeledVehicle.SetLinearDrivePosition");

	AS3WheeledVehicle_SetLinearDrivePosition_Params params;
	params.BoneName = BoneName;
	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.S3WheeledVehicle.GetLinearDriveVelocity
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Velocity                       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3WheeledVehicle::GetLinearDriveVelocity(const struct FName& BoneName, struct FVector* Velocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WheeledVehicle.GetLinearDriveVelocity");

	AS3WheeledVehicle_GetLinearDriveVelocity_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Velocity != nullptr)
		*Velocity = params.Velocity;

	return params.ReturnValue;
}


// Function Shenmue3.S3WheeledVehicle.GetLinearDrivePosition
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AS3WheeledVehicle::GetLinearDrivePosition(const struct FName& BoneName, struct FVector* Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WheeledVehicle.GetLinearDrivePosition");

	AS3WheeledVehicle_GetLinearDrivePosition_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;

	return params.ReturnValue;
}


// Function Shenmue3.S3WidgetToRenderTargetComponent.DrawWidgetToRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool US3WidgetToRenderTargetComponent::DrawWidgetToRenderTarget(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.S3WidgetToRenderTargetComponent.DrawWidgetToRenderTarget");

	US3WidgetToRenderTargetComponent_DrawWidgetToRenderTarget_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.ScriptFunctionLibrary.GetNPCDefinition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 NPCID                          (Parm, ZeroConstructor)
// class US3NPCDefinition*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class US3NPCDefinition* UScriptFunctionLibrary::STATIC_GetNPCDefinition(class UObject* WorldContextObject, const struct FString& NPCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ScriptFunctionLibrary.GetNPCDefinition");

	UScriptFunctionLibrary_GetNPCDefinition_Params params;
	params.WorldContextObject = WorldContextObject;
	params.NPCID = NPCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Shenmue3.ScriptFunctionLibrary.CreateTaskWithClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ObjectClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 TaskClass                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UScriptFunctionLibrary::STATIC_CreateTaskWithClass(class UObject* Outer, class UClass* ObjectClass, class UObject** TaskClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ScriptFunctionLibrary.CreateTaskWithClass");

	UScriptFunctionLibrary_CreateTaskWithClass_Params params;
	params.Outer = Outer;
	params.ObjectClass = ObjectClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TaskClass != nullptr)
		*TaskClass = params.TaskClass;

	return params.ReturnValue;
}


// Function Shenmue3.TalkCameraFunctionLibrary.TakeScreenShotWithCompression
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 fineName                       (Parm, ZeroConstructor)
// TEnumAsByte<EImageFormatType>  inFormat                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInsertTimeStampToFileName     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInShowUI                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddFilenameSuffix             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Quality                        (Parm, ZeroConstructor, IsPlainOldData)

void UTalkCameraFunctionLibrary::STATIC_TakeScreenShotWithCompression(const struct FString& fineName, TEnumAsByte<EImageFormatType> inFormat, bool bInsertTimeStampToFileName, bool bInShowUI, bool bAddFilenameSuffix, int Quality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkCameraFunctionLibrary.TakeScreenShotWithCompression");

	UTalkCameraFunctionLibrary_TakeScreenShotWithCompression_Params params;
	params.fineName = fineName;
	params.inFormat = inFormat;
	params.bInsertTimeStampToFileName = bInsertTimeStampToFileName;
	params.bInShowUI = bInShowUI;
	params.bAddFilenameSuffix = bAddFilenameSuffix;
	params.Quality = Quality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkCameraFunctionLibrary.TakeScreenShot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 fineName                       (Parm, ZeroConstructor)
// TEnumAsByte<EImageFormatType>  Format                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInsertTimeStampToFileName     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInShowUI                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddFilenameSuffix             (Parm, ZeroConstructor, IsPlainOldData)

void UTalkCameraFunctionLibrary::STATIC_TakeScreenShot(const struct FString& fineName, TEnumAsByte<EImageFormatType> Format, bool bInsertTimeStampToFileName, bool bInShowUI, bool bAddFilenameSuffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkCameraFunctionLibrary.TakeScreenShot");

	UTalkCameraFunctionLibrary_TakeScreenShot_Params params;
	params.fineName = fineName;
	params.Format = Format;
	params.bInsertTimeStampToFileName = bInsertTimeStampToFileName;
	params.bInShowUI = bInShowUI;
	params.bAddFilenameSuffix = bAddFilenameSuffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkCameraFunctionLibrary.PrintTalkCameraLog
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FString                 inString                       (Parm, ZeroConstructor)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UTalkCameraFunctionLibrary::STATIC_PrintTalkCameraLog(const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkCameraFunctionLibrary.PrintTalkCameraLog");

	UTalkCameraFunctionLibrary_PrintTalkCameraLog_Params params;
	params.inString = inString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkEventProcessBase.Update
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UTalkEventProcessBase::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventProcessBase.Update");

	UTalkEventProcessBase_Update_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkEventProcessBase.Initialize
// (Native, Public)
// Parameters:
// class UTalkEventTaskBase*      Task                           (Parm, ZeroConstructor, IsPlainOldData)
// class AS3TalkEventManagerBase* TalkManager                    (Parm, ZeroConstructor, IsPlainOldData)

void UTalkEventProcessBase::Initialize(class UTalkEventTaskBase* Task, class AS3TalkEventManagerBase* TalkManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventProcessBase.Initialize");

	UTalkEventProcessBase_Initialize_Params params;
	params.Task = Task;
	params.TalkManager = TalkManager;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkEventProcessBase.Finalize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UTalkEventProcessBase::Finalize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventProcessBase.Finalize");

	UTalkEventProcessBase_Finalize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.TalkEventProcessBase.Activate
// (Native, Event, Public, BlueprintEvent)

void UTalkEventProcessBase::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.TalkEventProcessBase.Activate");

	UTalkEventProcessBase_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.ShopTask.SetCancelLabelIndex
// (Final, Native, Public, BlueprintCallable)

void UShopTask::SetCancelLabelIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ShopTask.SetCancelLabelIndex");

	UShopTask_SetCancelLabelIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Shenmue3.ShopTask.SetBuyLabelIndex
// (Final, Native, Public, BlueprintCallable)

void UShopTask::SetBuyLabelIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Shenmue3.ShopTask.SetBuyLabelIndex");

	UShopTask_SetBuyLabelIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
